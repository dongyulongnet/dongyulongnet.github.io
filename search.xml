<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RocketMQ总结及部署</title>
      <link href="/posts/1919f520/"/>
      <url>/posts/1919f520/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="RocketMQ特性"><a href="#RocketMQ特性" class="headerlink" title="RocketMQ特性"></a><code>RocketMQ</code>特性</h1><ul><li>支持集群模型、负载均衡、水平扩展能力</li><li>亿级别消息堆积能力</li><li>采用零拷贝的原理，顺序写盘，随机读</li><li>底层通信框架采用Netty NIO</li><li>NameServer代替Zookeeper，实现服务寻址和服务协调</li><li>消息失败重试机制、消息可查询</li><li>强调集群无单点，可扩展，任意一点高可用，水平可扩展</li><li>经过多次双十一的考验</li></ul><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><ul><li>高压下 1 毫秒内超过 99.6% 的响应延迟。</li><li>具有跟踪和审计功能的高可用性。</li><li>给定足够的磁盘空间，在不损失性能的情况下积累消息。</li><li>批量转移与泛洪吞吐量的多功能集成。</li><li>万亿级消息容量保障。</li><li>自最新 4.1 版本以来的新开放分布式消息传递和流媒体标准。</li></ul><h1 id="架构与设计"><a href="#架构与设计" class="headerlink" title="架构与设计"></a>架构与设计</h1><p><img src="/files/post_img/RocketMq%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="RocketMq部署架构图"></p><h2 id="RocketMQ组件介绍"><a href="#RocketMQ组件介绍" class="headerlink" title="RocketMQ组件介绍"></a>RocketMQ组件介绍</h2><h3 id="消息生产者Producer"><a href="#消息生产者Producer" class="headerlink" title="消息生产者Producer"></a>消息生产者<code>Producer</code></h3><ul><li>支持分布式集群方式部署。</li><li>Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</li></ul><h3 id="消息消费者Consumer"><a href="#消息消费者Consumer" class="headerlink" title="消息消费者Consumer"></a>消息消费者<code>Consumer</code></h3><ul><li>支持分布式集群方式部署。</li><li>支持以push推，pull拉两种模式对消息进行消费。</li><li>同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</li></ul><h3 id="Topic路由注册中心NameServer"><a href="#Topic路由注册中心NameServer" class="headerlink" title="Topic路由注册中心NameServer"></a><code>Topic</code>路由注册中心<code>NameServer</code></h3><p>NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer和Consumer仍然可以动态感知Broker的路由的信息。<br>支持Broker的动态注册与发现。主要包括两个功能: </p><ul><li>Broker管理<br>NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活。</li><li>路由信息管理<br>每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Consumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。</li></ul><h3 id="消息存储服务器BrokerServer"><a href="#消息存储服务器BrokerServer" class="headerlink" title="消息存储服务器BrokerServer"></a>消息存储服务器<code>BrokerServer</code></h3><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证</p><h4 id="Broker包含了几个重要子模块"><a href="#Broker包含了几个重要子模块" class="headerlink" title="Broker包含了几个重要子模块"></a>Broker包含了几个重要子模块</h4><ul><li>Remoting Module：整个Broker的实体，负责处理来自Client端的请求。</li><li>Client Manager：负责管理客户端(Producer&#x2F;Consumer)和维护Consumer的Topic订阅信息。</li><li>Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li><li>HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li><li>Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</li></ul><h2 id="RocketMQ部署介绍"><a href="#RocketMQ部署介绍" class="headerlink" title="RocketMQ部署介绍"></a>RocketMQ部署介绍</h2><table><thead><tr><th><div style="width: 60pt">名称</div></th><th><div style="width: 100pt">解释</div></th><th><div style="width: 50pt">部署顺序</div></th><th><div style="width: 500pt">详细介绍</div></th></tr></thead><tbody><tr><td>NameServer</td><td>Topic路由注册中心</td><td>1</td><td>几乎无状态节点，可集群部署，节点之间无任何信息同步。</td></tr><tr><td>BrokerServer</td><td>消息存储服务器</td><td>2</td><td>Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。<br> <code>当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载</code></td></tr><tr><td>Producer</td><td>消息发布的角色</td><td>-</td><td>Producer与NameServer集群中<code>随机选择</code>一个节点建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署</td></tr><tr><td>Consumer</td><td>消息消费的角色</td><td>-</td><td>Consumer与NameServer集群中<code>随机选择</code>一个节点建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I&#x2F;O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取</td></tr></tbody></table><p><code>另外还需要部署RocketMQ面板,查看消息信息及状态等</code></p><h1 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h1><table><thead><tr><th><div style="width: 90pt">部署方案</div></th><th><div style="width: 120pt">优点</div></th><th><div style="width: 200pt">缺点</div></th><th><div style="width: 200pt">详细介绍</div></th></tr></thead><tbody><tr><td>单Master</td><td>除了配置简单没什么优点</td><td>不可靠，该机器重启或者宕机，将要导致整个服务不可用</td><td>-</td></tr><tr><td>单Master</td><td>配置简单，性能最高</td><td>可能会有少量消息丢失（配置相关），单台机器重启或宕机期间，该机器下未被消费的消息在机器恢复前不可订阅，影响消息实时性</td><td>-</td></tr><tr><td>同步<br>多Master多Slave</td><td>服务可用性与数据可用性非常高</td><td>性能比异步集群略低，当前版本主宕备不能自动切换为主</td><td>每个Master配一个Slave，有多对Master-Slave，集群采用同步双写方式，主备都写成功，向应用返回成功</td></tr><tr><td>异步<br>多Master多Slave</td><td>性能同多Master几乎一样，实时性高，主备间切换对应用透明，不需人工干预</td><td>Master宕机或磁盘损坏时会有少量消息丢失性</td><td>每个Master配一个Slave，有多对Master-Slave，集群采用异步复制方式，主备有短暂消息延迟，毫秒级</td></tr></tbody></table><h1 id="单节点部署-仅限测试"><a href="#单节点部署-仅限测试" class="headerlink" title="单节点部署(仅限测试)"></a>单节点部署(仅限测试)</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>RocketMQ也可以通过项目源码构建镜像,具体可以参考<a href="https://github.com/apache/rocketmq-docker.git">Github源码</a></p><p><a href="hub.docker.com">Docker镜像官网</a>查询下版本较高的<code>rocketMq</code>和<code>rocketmq-dashboard</code>镜像,通过命令<code>docker pull</code>拉取到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache/rocketmq</span><br><span class="line">docker pull apacherocketmq/rocketmq-dashboard</span><br></pre></td></tr></table></figure><h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a><code>docker-compose</code>安装</h2><p>需要先安装下<code>docker-compose</code>命令</p><h3 id="创建挂载文件-夹"><a href="#创建挂载文件-夹" class="headerlink" title="创建挂载文件(夹)"></a>创建挂载文件(夹)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">NameServer日志路径以及存储路径</span></span><br><span class="line">mkdir -p /home/ubbuntu/rocketmq/data/namesrv/logs</span><br><span class="line">mkdir -p /home/ubbuntu/rocketmq/data/namesrv/store</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Broker日志、数据存储、以及配置存放的挂载路径</span></span><br><span class="line">mkdir -p /home/ubbuntu/rocketmq/data/broker/logs</span><br><span class="line">mkdir -p /home/ubbuntu/rocketmq/data/broker/store</span><br><span class="line">mkdir -p /home/ubbuntu/rocketmq/etc/broker</span><br></pre></td></tr></table></figure><h3 id="创建Broker配置文件"><a href="#创建Broker配置文件" class="headerlink" title="创建Broker配置文件"></a>创建Broker配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /home/ubbuntu/rocketmq/etc/broker/broker.conf</span><br></pre></td></tr></table></figure><p><a id="4.2.2">文件内容如下</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># broker所属集群的名称</span><br><span class="line">brokerClusterName = defaultCluster</span><br><span class="line"></span><br><span class="line"># broker的名称</span><br><span class="line">brokerName = broker-1</span><br><span class="line"></span><br><span class="line"># broker的ID, 0表示Master，非0表示Slave</span><br><span class="line">brokerId = 0</span><br><span class="line"></span><br><span class="line"># 删除文件时间点,默认是凌晨4点</span><br><span class="line">deleteWhen = 04</span><br><span class="line"></span><br><span class="line"># 文件保留时间,默认保留48小时</span><br><span class="line">fileReservedTime = 48</span><br><span class="line"></span><br><span class="line"># broker的角色</span><br><span class="line"># ASYNC_MASTER: 异步复制Master</span><br><span class="line"># SYNC_MASTER: 同步双写Master</span><br><span class="line"># SLAVE: slave</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line"></span><br><span class="line"># 刷盘方式</span><br><span class="line"># ASYNC_FLUSH: 异步刷盘</span><br><span class="line"># SYNC_FLUSH: 同步刷盘</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line"># 当前broker监听的IP地址</span><br><span class="line"># Docker环境需要设置成宿主机IP</span><br><span class="line">brokerIP1 = 192.168.43.128</span><br></pre></td></tr></table></figure><h3 id="编写docker-compose文件"><a href="#编写docker-compose文件" class="headerlink" title="编写docker-compose文件"></a>编写<code>docker-compose</code>文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  #Service for nameserver</span><br><span class="line">  namesrv:</span><br><span class="line">    image: apache/rocketmq</span><br><span class="line">    container_name: rocketmq-namesrv</span><br><span class="line">    ports:</span><br><span class="line">      - 9876:9876</span><br><span class="line">    environment:</span><br><span class="line">      - JAVA_OPT_EXT=-server -Xms128m -Xmx128m -Xmn128m</span><br><span class="line">    volumes:</span><br><span class="line">      - /home/ubuntu/rocketmq/data/namesrv/logs:/root/logs</span><br><span class="line">    command: sh mqnamesrv</span><br><span class="line"></span><br><span class="line">  #Service for broker</span><br><span class="line">  broker:</span><br><span class="line">    image: apache/rocketmq</span><br><span class="line">    container_name: rocketmq-broker</span><br><span class="line">    links:</span><br><span class="line">      - namesrv</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    ports:</span><br><span class="line">      - 10909:10909</span><br><span class="line">      - 10911:10911</span><br><span class="line">      - 10912:10912</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=192.168.43.128:9876</span><br><span class="line">      - JAVA_OPT_EXT=-server -Xms256m -Xmx256m -Xmn256m</span><br><span class="line">    volumes:</span><br><span class="line">      - /home/ubuntu/rocketmq/data/broker/logs:/home/rocketmq/logs</span><br><span class="line">      - /home/ubuntu/rocketmq/data/broker/store:/home/rocketmq/store</span><br><span class="line">      - /home/ubuntu/rocketmq/etc/broker/broker.conf:/home/rocketmq/conf/broker.conf</span><br><span class="line">    command: sh mqbroker -n 192.168.43.128:9876 -c /home/rocketmq/conf/broker.conf</span><br><span class="line"></span><br><span class="line">  #Service for rocketmq-dashboard</span><br><span class="line">  dashboard:</span><br><span class="line">    image: apacherocketmq/rocketmq-dashboard</span><br><span class="line">    container_name: rocketmq-dashboard</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    links:</span><br><span class="line">      - namesrv</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=192.168.43.128:9876</span><br><span class="line">      - JAVA_OPTS=-Xms128m -Xmx128m -Xmn128m</span><br></pre></td></tr></table></figure><h3 id="运行docker-compose命令"><a href="#运行docker-compose命令" class="headerlink" title="运行docker-compose命令"></a>运行<code>docker-compose</code>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up</span><br></pre></td></tr></table></figure><h3 id="增加启动多个Broker"><a href="#增加启动多个Broker" class="headerlink" title="增加启动多个Broker"></a>增加启动多个<code>Broker</code></h3><ul><li><p>创建挂载文件夹,检查文件夹权限是否放开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/ubuntu/rocketmq/data/broker1/logs</span><br><span class="line">mkdir -p /home/ubuntu/rocketmq/data/broker1/store</span><br></pre></td></tr></table></figure></li><li><p>创建挂载配置文件,内容参考<a href="#4.2.2">上面描述的配置内容</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /home/ubuntu/rocketmq/etc/broker1/broker.conf</span><br></pre></td></tr></table></figure></li><li><p>运行<code>docker</code>命令,<code>映射的宿主端口号别重复</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 10921:10911 -p 10919:10909 -p 10922:10912 -v  /home/ubuntu/rocketmq/data/broker1/logs:/root/logs -v  /home/ubuntu/rocketmq/data/broker1/store:/root/store -v  /home/ubuntu/rocketmq/etc/broker1/broker.conf:/opt/rocketmq/conf/broker.conf --name rmqbroker  -e &quot;NAMESRV_ADDR=82.157.210.101:9876&quot; -e &quot;MAX_POSSIBLE_HEAP=200000000&quot; -e &quot;JAVA_OPT_EXT=-server -Xms128m -Xmx128m -Xmn128m&quot; -e apache/rocketmq sh mqbroker -n 82.157.210.101:9876 -c /opt/rocketmq/conf/broker.conf</span><br></pre></td></tr></table></figure></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><code>docker-compose</code>命令启动时可能会出现<code>rocketmq-broker exited with code 253</code>,是因为broker需要写入磁盘没有操作挂载目录的权限</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://rocketmq.apache.org/docs">Apache RocketMQ官方文档</a><br><a href="https://juejin.cn/post/7045944869642043422">RocketMQ Docker部署</a><br><a href="https://segmentfault.com/a/1190000039367254">手把手教你搭建 RocketMQ 高可用集群！</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置笔记</title>
      <link href="/posts/9629173e/"/>
      <url>/posts/9629173e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="配置规范"><a href="#配置规范" class="headerlink" title="配置规范"></a>配置规范</h1><p><code>Nginx</code>配置多为<code>http server</code>、<code>stream server</code>、<code>https ssl</code>及基础配置,主要围绕文件<code>nginx/nginx.conf</code><br>（有些）默认安装的<code>Nginx</code>会在文件<code>nginx.conf</code>的<code>http</code>模块设置<code>include /etc/nginx/conf.d/*.conf</code></p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    ......</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>conf.d</code>目录增加<code>conf</code>文件配置<code>http server</code>,<code>conf</code>文件命名规范<code>域名.conf</code>,例如:<code>dogn.top.conf</code></p><h1 id="http-server配置"><a href="#http-server配置" class="headerlink" title="http server配置"></a><code>http server</code>配置</h1><h2 id="location匹配优先级"><a href="#location匹配优先级" class="headerlink" title="location匹配优先级"></a><code>location</code>匹配优先级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123;…&#125;</span><br></pre></td></tr></table></figure><p><img src="/files/post_img/URL%E5%9B%BE%E8%A7%A3.png" alt="URL图解.png"></p><p>网址链接依次包括:协议(http:&#x2F;&#x2F;)、机器IP或域名(127.0.0.1&#x2F;hexo.dogn.top)、端口号(80)以及<code>uri</code>(&#x2F;bridge&#x2F;index.html)。<code>location</code>匹配的则是<code>uri</code></p><table><thead><tr><th>类型</th><th>匹配语法</th><th>含义</th><th>优先级(数字越小优先级越高)</th></tr></thead><tbody><tr><td>精确匹配</td><td><code>location = /bridge</code></td><td>精确匹配,只有匹配上才生效</td><td>0</td></tr><tr><td>路径匹配</td><td><code>location ^~ /bridge</code></td><td>前缀匹配</td><td>1</td></tr><tr><td>正则匹配</td><td><code>location ～ bridge</code></td><td>区分大小写的正则匹配</td><td>2</td></tr><tr><td>正则匹配</td><td><code>location ～* bridge</code></td><td>不区分大小写的正则匹配</td><td>3</td></tr><tr><td>字符串匹配</td><td><code>location /bridge</code></td><td>不带任何开头的也表示前缀匹配，但是优先级在正则匹配之后</td><td>4</td></tr><tr><td>默认匹配</td><td><code>location /</code></td><td>通配匹配，任何未匹配到其他location的请求都会匹配到</td><td>5</td></tr></tbody></table><p>补充:</p><ul><li>普通location之间的匹配顺序：按最大前缀匹配<br>如<code>location /a/&#123;&#125;</code>，<code>location /a/b/ &#123;&#125;</code>,请求 <code>http://test/a/b/c.html</code> 匹配的是 &#96;location &#x2F;a&#x2F;b&#x2F; {}&#96;&#96;</li><li>正则location之间的匹配顺序：按配置文件中的物理顺序匹配，只要匹配到一条正则，就不再考虑后面的</li><li>不带任何开头的前缀匹配, 如:<code>location /bridge</code>,比正则匹配优先参与匹配,但是只有正则匹配不到后才会被选择</li></ul><h2 id="rewrite配置"><a href="#rewrite配置" class="headerlink" title="rewrite配置"></a><code>rewrite</code>配置</h2><p><code>rewrite &lt;正则&gt; &lt;替换&gt; &lt;标志位&gt;</code></p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name  hexo.dogn.top;</span><br><span class="line">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rewrite指令的最后一项参数为flag标记，flag标记有：</p><table><thead><tr><th>flag标记</th><th>含义</th></tr></thead><tbody><tr><td>last</td><td>继续向下匹配新的location URI规则;终止当前location的rewrite检测,但会继续重试location匹配并处理区块中的rewrite规则。</td></tr><tr><td>break</td><td>不再匹配后面的任何规则;终止当前location的rewrite检测,而且不再进行location匹配。</td></tr><tr><td>redirect</td><td>返回302临时重定向，浏览器地址会显示跳转后的URL地址;返回302临时重定向，浏览器地址会显示跳转后的URL地址。</td></tr><tr><td>permanent</td><td>返回301永久重定向，浏览器地址栏会显示跳转后的URL地址;返回301永久重定向，浏览器地址会显示跳转后的URL地址。</td></tr></tbody></table><h2 id="proxy-pass配置"><a href="#proxy-pass配置" class="headerlink" title="proxy_pass配置"></a><code>proxy_pass</code>配置</h2><ul><li><p>正则匹配不能以<code>/</code>结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    ......</span><br><span class="line">    location ~ ^/(bri|nex)/ &#123;</span><br><span class="line">        proxy_pass http://106.185.48.229;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径匹配(前缀匹配)、字符传匹配(不带任何开头的前缀匹配)是否以<code>/</code>结束决定是不带上匹配的路径<br>如果以<code>/</code>结尾表示不带匹配前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /bridge/ &#123;</span><br><span class="line">    proxy_pass http://106.185.48.229/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format main &#x27;$time_iso8601|$remote_addr|$remote_user|$request_method|$uri|&#x27;</span><br><span class="line">          &#x27;$status|$request_time|$request_length|$body_bytes_sent|$bytes_sent|&#x27;</span><br><span class="line">          &#x27;$connection|$http_x_forwarded_for|$upstream_addr|$upstream_status|&#x27;</span><br><span class="line">          &#x27;$upstream_response_time|$args|$http_referer|$http_user_agent&#x27;;</span><br><span class="line">access_log  logs/access.log  main;</span><br></pre></td></tr></table></figure><h1 id="常用的Nginx全局变量"><a href="#常用的Nginx全局变量" class="headerlink" title="常用的Nginx全局变量"></a>常用的Nginx全局变量</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$args #这个变量等于请求行中的参数。</span><br><span class="line">$content_length #请求头中的Content-length字段。</span><br><span class="line">$content_type #请求头中的Content-Type字段。</span><br><span class="line">$document_root #当前请求在root指令中指定的值。</span><br><span class="line">$host #请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent #客户端agent信息</span><br><span class="line">$http_cookie #客户端cookie信息</span><br><span class="line">$limit_rate #这个变量可以限制连接速率。</span><br><span class="line">$request_body_file #客户端请求主体信息的临时文件名。</span><br><span class="line">$request_method #客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr #客户端的IP地址。</span><br><span class="line">$remote_port #客户端的端口。</span><br><span class="line">$remote_user #已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$query_string #与$args相同。</span><br><span class="line">$scheme #HTTP方法（如http，https）。</span><br><span class="line">$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name #服务器名称。</span><br><span class="line">$server_port #请求到达服务器的端口号。</span><br><span class="line">$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri #不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri #与$uri相同。</span><br></pre></td></tr></table></figure><h1 id="Ubuntu使用nginx设置用户名密码访问"><a href="#Ubuntu使用nginx设置用户名密码访问" class="headerlink" title="Ubuntu使用nginx设置用户名密码访问"></a>Ubuntu使用nginx设置用户名密码访问</h1><ul><li><p>下载<code>htpasswd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2-utils</span><br></pre></td></tr></table></figure></li><li><p>添加用户名密码到文件<code>hexopwd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /etc/nginx/hexopwd dogn</span><br></pre></td></tr></table></figure></li><li><p>添加配置到NGINX配置文件<code>http.server.location模块</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#登录时提示信息</span><br><span class="line">auth_basic &quot;Restricted&quot;;</span><br><span class="line">#用户名密码配置文件</span><br><span class="line">auth_basic_user_file /etc/nginx/hexopwd;</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/jurioo/articles/15818562.html">Nginx应用-Location路由反向代理及重写策略 </a><br><a href="https://segmentfault.com/a/1190000023478720">Ubuntu 下 使用nginx设置用户名密码访问</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux创建用户</title>
      <link href="/posts/33b29eef/"/>
      <url>/posts/33b29eef/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><p>创建用户<code>ttest</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser ttest</span><br></pre></td></tr></table></figure></li><li><p>输入密码 <code>pwdttest</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-8-13-ubuntu:~$ sudo adduser ttest</span><br><span class="line">Adding user `ttest&#x27; ...</span><br><span class="line">Adding new group `ttest&#x27; (1003) ...</span><br><span class="line">Adding new user `ttest&#x27; (1003) with group `ttest&#x27; ...</span><br><span class="line">Creating home directory `/home/ttest&#x27; ...</span><br><span class="line">Copying files from `/etc/skel&#x27; ...</span><br><span class="line">New password: </span><br></pre></td></tr></table></figure></li><li><p>确认密码 <code>pwdttest</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Retype new password:</span><br></pre></td></tr></table></figure></li><li><p>Full Name(不需要设置回车)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information for ttest</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">Full Name []:</span><br></pre></td></tr></table></figure></li><li><p>Room Number（不需要设置回车）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Room Number []:</span><br></pre></td></tr></table></figure></li><li><p>Work Phone（不需要设置回车）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Work Phone []:</span><br></pre></td></tr></table></figure></li><li><p>Home Phone（不需要设置回车）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Home Phone []:</span><br></pre></td></tr></table></figure></li><li><p>Other（不需要设置回车）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Other []:</span><br></pre></td></tr></table></figure></li><li><p>确认信息是否正确,输入<code>y</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is the information correct? [Y/n] </span><br></pre></td></tr></table></figure></li><li><p>创建成功</p></li></ul><p>需要注意的是还有一个命令<code>useradd</code>,这个命令建议不要使用,只会创建一个用户,并不会创建用户目录<code>/homt/xxx</code></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件(夹)归属及权限修改</title>
      <link href="/posts/e8fb5456/"/>
      <url>/posts/e8fb5456/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="文件权限介绍"><a href="#文件权限介绍" class="headerlink" title="文件权限介绍"></a>文件权限介绍</h1><p>在Linux中，创建一个文件时，该文件的拥有者都是创建该文件的用户。该文件用户可以修改该文件的拥有者及用户组，当然root用户可以修改任何文件的拥有者及用户组。在Linux中,对于文件的权限（rwx），分为三部分，一部分是该文件的拥有者所拥有的权限，一部分是该文件所在用户组的用户所拥有的权限，另一部分是其他用户所拥有的权限。对于文件的权限请参考<a href="http://hubingforever.blog.163.com/blog/static/171040579201041432333648/">《Linux的chmod命令》</a></p><p>文件（含文件夹，下同）的权限，在shell中可以通过chmod命令来完成，关于此请参考<a href="http://hubingforever.blog.163.com/blog/static/171040579201041432333648/">《Linux的chmod命令》</a>。在 shell 中，可以使用chown命令来改变文件所有者及用户组，chgrp命令来改变文件所在用户组。在Linux的C程序中，可以使用chown函数来改变文件所有者，及所在用户组。</p><p>另外，在shell中，要修改文件当前的用户必须具有管理员root的权限。可以通过su命令切换到root用户，也可以通过sudo获得root的权限。</p><p><img src="/files/post_img/Linux%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E5%90%AB%E4%B9%89.png" alt="Linux文件信息含义.png"></p><h1 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h1><p>可直接赋予所有权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 xx.xx</span><br></pre></td></tr></table></figure><p>如果想把某个文件夹下所有文件全部赋权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 xxx</span><br></pre></td></tr></table></figure><p>单独添加可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -x xxx</span><br></pre></td></tr></table></figure><h1 id="修改归属"><a href="#修改归属" class="headerlink" title="修改归属"></a>修改归属</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 账号名称 文件或目录</span><br><span class="line">chown [-R] 账号名称:用户组名称 文件或目录</span><br><span class="line">chgrp [-R] 用户组名称 文件或目录 </span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/hudashi/article/details/7797393">如何更改linux文件的拥有者及用户组(chown和chgrp)</a><br><a href="https://blog.csdn.net/yuqinzyy/article/details/80848899">Linux命令详解——ls的用法及详细信息</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs环境及Npm应用</title>
      <link href="/posts/e79e71a5/"/>
      <url>/posts/e79e71a5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Nodejs安装环境"><a href="#Nodejs安装环境" class="headerlink" title="Nodejs安装环境"></a>Nodejs安装环境</h1><h2 id="下载-Node-js-Linux-64位二进制安装包。"><a href="#下载-Node-js-Linux-64位二进制安装包。" class="headerlink" title="下载 Node.js Linux 64位二进制安装包。"></a>下载 <code>Node.js Linux 64</code>位二进制安装包。</h2><p>如果需要其他版本去<a href="https://nodejs.org/dist/">官网仓库</a>自己查找并修改为对应版本地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v14.18.1/node-v14.18.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf node-v14.18.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><h2 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h2><p>成功创建软链接后，即可在云服务器任意目录下使用 <code>node</code> 及 <code>npm</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/ubuntu/node-v14.18.1-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /home/ubuntu/node-v14.18.1-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><h2 id="看-Node-js-及-npm-版本信息"><a href="#看-Node-js-及-npm-版本信息" class="headerlink" title="看 Node.js 及 npm 版本信息"></a>看 <code>Node.js</code> 及 <code>npm</code> 版本信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/files/post_img/Post-Nodejs&Npm.png" alt="Node.js和npm关系"></p><h1 id="Npm镜像源设置"><a href="#Npm镜像源设置" class="headerlink" title="Npm镜像源设置"></a>Npm镜像源设置</h1><h2 id="查看当前镜像源"><a href="#查看当前镜像源" class="headerlink" title="查看当前镜像源"></a>查看当前镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="或查询所有配置"><a href="#或查询所有配置" class="headerlink" title="或查询所有配置"></a>或查询所有配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure><h2 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://mirrors.cloud.tencent.com/npm/</span><br></pre></td></tr></table></figure><h2 id="常用镜像地址"><a href="#常用镜像地址" class="headerlink" title="常用镜像地址"></a>常用镜像地址</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#淘宝 </span><br><span class="line">https://registry.npm.taobao.org/</span><br><span class="line">https://registry.npmmirror.com</span><br><span class="line">#腾讯</span><br><span class="line">http://mirrors.cloud.tencent.com/npm/</span><br><span class="line">#华为云</span><br><span class="line">https://mirrors.huaweicloud.com/repository/npm/</span><br><span class="line">#官方</span><br><span class="line">https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config rm registry</span><br></pre></td></tr></table></figure><p>查看npm配置文件,删除镜像配置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure><h1 id="cnpm使用"><a href="#cnpm使用" class="headerlink" title="cnpm使用"></a><code>cnpm</code>使用</h1><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>使用,用法和<code>npm</code>大同小异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install xxx</span><br></pre></td></tr></table></figure><h1 id="npm环境参数"><a href="#npm环境参数" class="headerlink" title="npm环境参数"></a><code>npm</code>环境参数</h1><h2 id="save-dev"><a href="#save-dev" class="headerlink" title="--save-dev"></a><code>--save-dev</code></h2><p>安装包到<code>devDependencies</code>标签下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i packageName --save-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-S dependencies 生产环境下依赖安装(--save)，默认安装</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-D devDependencies 开发环境下依赖安装(--save-dev)</span></span><br><span class="line">npm update packageName [-D | -S]</span><br></pre></td></tr></table></figure><h2 id="production"><a href="#production" class="headerlink" title="--production"></a><code>--production</code></h2><p>只有<code>dependencies</code>标签下的依赖包会被安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --production</span><br></pre></td></tr></table></figure><h2 id="only-dev"><a href="#only-dev" class="headerlink" title="--only=dev"></a><code>--only=dev</code></h2><p>只有<code>devDependencies</code>标签下的依赖包会被安装<br>另外：<code>--dev，它的效果与--only=dev相同，但已经被废弃，请使用--only=dev代替</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --only=dev</span><br></pre></td></tr></table></figure><h1 id="npm-i-与npm-update之间的区别"><a href="#npm-i-与npm-update之间的区别" class="headerlink" title="npm i 与npm update之间的区别"></a><code>npm i</code> 与<code>npm update</code>之间的区别</h1><h1 id="package-lock-json-文件存在"><a href="#package-lock-json-文件存在" class="headerlink" title="package-lock.json 文件存在"></a><code>package-lock.json</code> 文件存在</h1><p><code>npm i</code> 会按照 <code>package-lock.json</code> 对应包版本进行安装，不会自动升级<br><code>npm update</code> 会按照 <code>package.json</code> 对应包版本前缀升级规范安装到最新到版</p><h1 id="package-lock-json-文件不存在"><a href="#package-lock-json-文件不存在" class="headerlink" title="package-lock.json 文件不存在"></a><code>package-lock.json</code> 文件不存在</h1><p><code>npm i</code> 会按照 <code>package.json</code> 对应包版本前缀升级规范安装到最新到版本<br><code>npm update</code>会忽略 devDependencies 下的对应包更新安装,添加了 -D 才会在安装更新 <code>devDependencies</code> 下对应的依赖包</p><h1 id="npm安装固定版本依赖"><a href="#npm安装固定版本依赖" class="headerlink" title="npm安装固定版本依赖"></a><code>npm</code>安装固定版本依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx@x.x.x  --save</span><br></pre></td></tr></table></figure><h1 id="npm安装github仓库代码"><a href="#npm安装github仓库代码" class="headerlink" title="npm安装github仓库代码"></a><code>npm</code>安装github仓库代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;git remote url&gt;</span><br></pre></td></tr></table></figure><p>支持的协议有 git、git+ssh、git+https…… <code>如果使用ssh协议需要配置ssh协议密钥</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;protocol&gt;://[&lt;user&gt;[:&lt;password&gt;]@]&lt;hostname&gt;[:&lt;port&gt;][:][/]&lt;path&gt;[#&lt;commit-ish&gt;]</span><br><span class="line">&lt;protocol&gt; is one of git, git+ssh, git+http, git+https, or git+file. If no &lt;commit-ish&gt; is specified, then master is used</span><br></pre></td></tr></table></figure><p>示例:<br><code>#branch</code>:表示需要安装的分支号<br><code>#branch</code>:表示需要安装的tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install git+ssh://git@github.com:dongyulongnet/hexo-bridge.git#main --unsafe-perm --save-dev </span><br></pre></td></tr></table></figure><h1 id="npm-install常见问题解决办法"><a href="#npm-install常见问题解决办法" class="headerlink" title="npm install常见问题解决办法"></a><code>npm install</code>常见问题解决办法</h1><ul><li>1.删除<code>node_modules</code>文件夹重新执行可以解决大多数问题</li><li>2.某个包的问题可以使用<code>npm rebuild xxx</code></li><li>3.没有权限,可以增加<code>--unsafe-perm</code>。<code>npm</code> 出于安全考虑不支持以 <code>root</code> 用户运行，即使你用 <code>root</code> 用户身份运行了，<code>npm</code> 会自动转成一个叫 <code>nobody</code> 的用户来运行，而这个用户几乎没有任何权限。这样的话如果你脚本里有一些需要权限的操作，比如写文件（尤其是写 <code>/root/.node-gyp</code>），就会崩掉了。<br>为了避免这种情况，要么按照 <code>npm</code> 的规矩来，专门建一个用于运行 <code>npm</code> 的高权限用户；要么加 <code>--unsafe-perm</code> 参数，这样就不会切换到 <code>nobody</code> 上，运行时是哪个用户就是哪个用户，即使是 <code>root</code>。如:<code>...permission to access the dev dir...</code> <a href="https://docs.npmjs.com/cli/v8/using-npm/config">官网文档</a></li><li>4.不要提交<code>package-lock.json</code>,环境、系统等一个或多个因素不同都可能会出现使用不同的版本</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zoepriselife316/article/details/103178021">npm 镜像源的设置和删除</a><br><a href="https://cloud.tencent.com/developer/article/1372949">npm使用国内镜像加速的几种方法</a><br><a href="https://npmmirror.com/">npmmirror 中国镜像站</a><br><a href="https://cloud.tencent.com/document/product/213/38237">手动搭建 Node.js 环境</a><br><a href="https://juejin.cn/post/6913833065647341581">npm 更新依赖包</a><br><a href="https://ghrhome.gitbooks.io/node_express_react/content/shi-yongnpm-an-zhuang-github-cang-ku-zhong-de-dai-ma.html">使用npm安装github仓库中的代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> cnpm </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程(后台)启动及终止</title>
      <link href="/posts/174e52/"/>
      <url>/posts/174e52/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h1><p><code>&amp;</code>放在命令最后,作用是可以把这个命令放在后台执行，比如我们服务会打印日志，如果我们加上&amp;后，就不会显示了<br><code>nohup</code>命令可以不挂断的运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup  hexo server  &gt;fiename 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="编写shell脚本启动"><a href="#编写shell脚本启动" class="headerlink" title="编写shell脚本启动"></a>编写shell脚本启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=&quot;`lsof -i:4000 |grep -v PID| awk &#x27;&#123;print $2&#125;&#x27;`&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动前判断端口是否被占用,如果占用删除占用端口的进程</span></span><br><span class="line">if [ -n &quot;$a&quot; ]; then</span><br><span class="line">  kill -9 &quot;$a&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd /opt/hexo-server</span><br><span class="line"></span><br><span class="line">nohup hexo server &gt;filename 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>查看端口占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8090</span><br></pre></td></tr></table></figure><p>也可以使用<code>netstat</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -nap|grep 4000</span><br></pre></td></tr></table></figure><h1 id="查看、删除进程"><a href="#查看、删除进程" class="headerlink" title="查看、删除进程"></a>查看、删除进程</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>查询进程(第二列即为<code>PID</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux| grep hexo| grep -v grep</span><br></pre></td></tr></table></figure><p>可以使用awk打印出所有进程的<code>PID</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux| grep hexo| grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><p>可以使用<code>kill</code>命令批量删除进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 `ps -aux| grep hexo| grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br></pre></td></tr></table></figure><p>或<code>xargs</code>是从标准输出获取参数并执行命令的程序，即从前面的命令获取输出作为参数来执行下一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux| grep hexo| grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>另外<code>kill</code>命令除了可以根据<code>PID</code>删除进程,还可以通过<code>jobnum</code></p><p>查看<code>jobs</code>后台进程(第一列为<code>jobnum</code>,第二列即为<code>PID</code>)<br>jobs和ps区别是jobs用于查看当前终端后台运行的任务，换了终端就看不到了。而ps命令用于查看瞬间进程的动态，可以看到别的终端运行的后台进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></table></figure><p>可以使用<code>fg</code>和<code>bg</code>命令执行后台和终端相互切换<br><code>fg %jobnum </code>将后台中的命令调至前台继续运行<br><code>bg</code>将一个在后台暂停的命令，变成在后台继续执行</p><p>根据<code>jobnun</code>删除进程语法为<code>kill %[jobnum]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill %1</span><br></pre></td></tr></table></figure><h1 id="Linux-systemctl-service-文件执行shell脚本"><a href="#Linux-systemctl-service-文件执行shell脚本" class="headerlink" title="Linux systemctl.service 文件执行shell脚本"></a>Linux <code>systemctl.service</code> 文件执行<code>shell</code>脚本</h1><p>需要显示执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/bin/bash /home/ubuntu/spring-start.sh</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/sky_zhe/article/details/9419665">linux 批量删除进程的命令</a><br><a href="https://blog.csdn.net/y601500359/article/details/105821236">怎么在Linux中后台启动服务，查看和关闭后台运行程序</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven清理下载失败的文件</title>
      <link href="/posts/aaac8ab3/"/>
      <url>/posts/aaac8ab3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>讲下面代码修改编辑到.bat文件下</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=D:\repo\maven</span><br><span class="line"><span class="comment">rem 正在搜索...</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem 搜索完毕</span></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mac-x2F-Linux"><a href="#Mac-x2F-Linux" class="headerlink" title="Mac&#x2F;Linux"></a>Mac&#x2F;Linux</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo 正在搜索...</span><br><span class="line">find . -name &quot;*lastUpdated&quot; | xargs rm -fr</span><br><span class="line">echo 搜索完毕</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用软件安装</title>
      <link href="/posts/3629b7f4/"/>
      <url>/posts/3629b7f4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Nginx发音为engine x，是开源的高性能HTTP和反向代理服务器，负责处理Internet上一些最大站点的负载。<br>它可用作HTTP和非HTTP服务器的独立Web服务器，负载均衡器，内容缓存和反向代理。与Apache相比，Nginx可以处理大量并发连接，并且每个连接的内存占用量更小。<br>在继续之前，请确保您以具有sudo权限的用户登录，并且端口<code>80</code>或<code>443</code>上没有运行Apache或其它监听<code>80</code>或者<code>443</code>端口的进程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Nginx在默认的Ubuntu存储库中可用。要安装它，请使用apt命令运行以下命令，这将会更新软件包索引并且安装Nginx。</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装完成后，Nginx服务将自动启动。您可以通过运行systemctl命令查看服务的状态，从而确定Nginx服务是否正常启动。</span></span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>参考:<a href="https://www.myfreax.com/how-to-install-nginx-on-ubuntu-20-04/">如何在Ubuntu 20.04安装Nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用组件Docker安装</title>
      <link href="/posts/fc01f233/"/>
      <url>/posts/fc01f233/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker安装MariaDB"><a href="#Docker安装MariaDB" class="headerlink" title="Docker安装MariaDB"></a>Docker安装MariaDB</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载docker镜像</span></span><br><span class="line">docker pull mariadb </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建一个目录作为和容器的映射目录</span></span><br><span class="line">mkdir -p /data/mariadb/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--name启动容器设置容器名称为mariadb</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-p设置容器的3306端口映射到主机3306端口</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-e MYSQL_ROOT_PASSWORD设置环境变量数据库root用户密码为输入数据库root用户的密码</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-v设置容器目录/var/lib/mysql映射到本地目录/data/mariadb/data</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-d后台运行容器mariadb并返回容器<span class="built_in">id</span></span></span><br><span class="line">docker run --name mariadb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root123 -v /data/mariadb/data:/var/lib/mysql -d mariadb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看运行容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改容器为自启动</span></span><br><span class="line">docker container update --restart=always &lt;容器id&gt; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it  &lt;容器id&gt;  bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在容器内登录数据库</span></span><br><span class="line">mysql -uroot -proot123</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>参考:</code><a href="https://www.cnblogs.com/WaterGe/p/11067387.html">Docker安装MariaDB</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker浅应用</title>
      <link href="/posts/369e9c0e/"/>
      <url>/posts/369e9c0e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="获取最新版本的docker安装包"><a href="#获取最新版本的docker安装包" class="headerlink" title="获取最新版本的docker安装包"></a>获取最新版本的docker安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>也可以使用国内<code>daocloud</code>一键安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h2 id="授权当前用户docker执行权限"><a href="#授权当前用户docker执行权限" class="headerlink" title="授权当前用户docker执行权限"></a>授权当前用户docker执行权限</h2><ul><li>当要以非root用户可以直接运行docker时，需要执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $(whoami) </span><br></pre></td></tr></table></figure><ul><li>然后重新登陆</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - $&#123;USER&#125;</span><br></pre></td></tr></table></figure><ul><li>检查当前用户docker执行权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id -nG</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker 安装</a><br>1.<a href="https://blog.csdn.net/woaiwojiaweihao150/article/details/117221020">ubuntu 安装docker</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven私服Nexus浅应用</title>
      <link href="/posts/7700ccef/"/>
      <url>/posts/7700ccef/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Maven私服"><a href="#Maven私服" class="headerlink" title="Maven私服"></a>Maven私服</h1><p>Maven私服是一种特殊的远程仓库,它是架设在局域网内的仓库服务,用来代理位于外部的远程仓库(中央仓库、其他远程公共仓库)。</p><h2 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h2><p>建立了Maven私服后,当局域网内的用户需要某个构件时,会按照如下顺序进行请求和下载。</p><ul><li>请求本地仓库，若本地仓库不存在所需构件，则跳转到第 2 步；</li><li>请求 Maven 私服，将所需构件下载到本地仓库，若私服中不存在所需构件，则跳转到第 3 步。</li><li>请求外部的远程仓库，将所需构件下载并缓存到 Maven 私服，若外部远程仓库不存在所需构件，则 Maven 直接报错。</li></ul><p><img src="/files/post_img/Maven%E7%A7%81%E6%9C%8D%E7%9A%84%E7%94%A8%E9%80%94.png" alt="Maven私服的用途"></p><h2 id="私服优势"><a href="#私服优势" class="headerlink" title="私服优势"></a>私服优势</h2><ul><li>节省外网带宽</li><li>下载速度更快</li><li>便于部署第三方构件</li><li>提高项目的稳定性,增强对项目的控制</li><li>降低中央仓库得负荷压力</li><li>自有项目隐私保护</li></ul><h2 id="私服产品"><a href="#私服产品" class="headerlink" title="私服产品"></a>私服产品</h2><p>能够帮助我们建立Maven私服的软件被称为Maven仓库管理器(Repository Manager),主要有以下3种：</p><ul><li>Apache Archiva</li><li>JFrog Artifactory</li><li>Sonatype Nexus</li></ul><h1 id="Nexus简介"><a href="#Nexus简介" class="headerlink" title="Nexus简介"></a>Nexus简介</h1><p>Nexus的全称是Nexus Repository Manager(Nexus仓库管理器),是Sonatype公司的一个产品。Nexus是一个强大的仓库管理器,极大地简化了内部仓库的维护和外部仓库的访问。Nexus分为开源版和专业版,其中开源版足以满足大部分Maven、Gradle、Go等用户的需求。<br>Nexus开源版之所以成为最流行的Maven仓库管理器,主要具有以下优点：</p><ul><li>占用内存小（28 M 左右）</li><li>具有基于 ExtJs 得操作界面，用户体验较好</li><li>使用基于 Restlet 的完全 REST API</li><li>支持代理仓库、宿主仓库和仓库组</li><li>基于文件系统，不需要依赖数据库</li><li>支持仓库管理</li><li>支持构件搜索</li><li>支持在界面上上传构件<br>Nexus专业版需要付费购买,它主要包含一些企业级的高级特性,详情请参考 <a href="https://help.sonatype.com/repomanager3">Sonatype Nexus</a>官方文档。</li></ul><h1 id="Nexus搭建"><a href="#Nexus搭建" class="headerlink" title="Nexus搭建"></a>Nexus搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>服务器配置: CPU 2,内存 2G,磁盘 40G</li><li>Nexus版本: 3.40.1</li><li>Nexus启动环境:Open JDK 8</li><li>非商用搭建提示<br>先试用了Docker快速启动,启动失败,以为是Nexus配置需要太高,后来选用传统方式安装成功启动,后经过研究发现默认配置参数太高(至少是2G以上)。<br>亲测最低400M(测试256起不来),具体配置可参考后续配置环节</li></ul><h2 id="Docker-Nexus快速启动"><a href="#Docker-Nexus快速启动" class="headerlink" title="Docker Nexus快速启动"></a>Docker Nexus快速启动</h2><p>使用docker安装简单粗暴,记得修改配置即可,暂不介绍</p><p><a href="https://blog.csdn.net/woaiwojiaweihao150/article/details/117221020">ubuntu 安装docker</a><br><a href="https://blog.csdn.net/tjcyjd/article/details/105742086">Docker拉取镜像失败报错Error response from daemon</a></p><h2 id="Ubuntu传统安装Nexus3"><a href="#Ubuntu传统安装Nexus3" class="headerlink" title="Ubuntu传统安装Nexus3"></a>Ubuntu传统安装Nexus3</h2><h3 id="需要配置JDK环境"><a href="#需要配置JDK环境" class="headerlink" title="需要配置JDK环境"></a>需要配置JDK环境</h3><p>Nexus3需要依赖JDK 8(<code>如果安装过可跳过</code>),需要<a href="https://developer.aliyun.com/article/704959">安装JDK</a></p><h3 id="创建nexus3安装目录"><a href="#创建nexus3安装目录" class="headerlink" title="创建nexus3安装目录"></a>创建nexus3安装目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/nexus3 &amp;&amp; cd /opt/nexus3</span><br></pre></td></tr></table></figure><h3 id="下载Nexus3包"><a href="#下载Nexus3包" class="headerlink" title="下载Nexus3包"></a>下载Nexus3包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://download.sonatype.com/nexus/3/nexus-3.40.1-01-unix.tar.gz</span><br></pre></td></tr></table></figure><p>如果下载不下来,可以本地下载然后上传到服务器上</p><p><code>scp 本地文件地址 轻量应用服务器帐号@轻量应用服务器实例公网 IP/域名:轻量应用服务器文件地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp nexus-3.40.1-01-unix.tar.gz root@dogn.ip-03</span><br></pre></td></tr></table></figure><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf latest-unix.tar.gz </span><br></pre></td></tr></table></figure><h3 id="使用nexus用户启动"><a href="#使用nexus用户启动" class="headerlink" title="使用nexus用户启动"></a>使用nexus用户启动</h3><p>向nexus用户授予对nexus文件和nexus3目录的权限,<code>如果使用root启动可以忽略</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R nexus:nexus /opt/nexus &amp;&amp; sudo chown -R nexus:nexus /opt/sonatype-work</span><br></pre></td></tr></table></figure><h3 id="修改启动用户"><a href="#修改启动用户" class="headerlink" title="修改启动用户"></a>修改启动用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/nexus3/bin/nexus.rc </span><br></pre></td></tr></table></figure><p>添加或修改以下内容这里,使用<code>root</code>用户启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run_as_user=&quot;root&quot;</span><br></pre></td></tr></table></figure><h3 id="内存设置"><a href="#内存设置" class="headerlink" title="内存设置"></a>内存设置</h3><p>编辑nexus.vmoptions配置文件并定义最大内存大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/nexus3/bin/nexus.vmoptions </span><br></pre></td></tr></table></figure><p><code>添加或修改以下内容</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx400m</span><br><span class="line">-XX:MaxDirectMemorySize=1024m</span><br><span class="line">-XX:LogFile=./sonatype-work/nexus3/log/jvm.log</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-Dkaraf.home=.</span><br><span class="line">-Dkaraf.base=.</span><br><span class="line">-Dkaraf.etc=etc/karaf</span><br><span class="line">-Djava.util.logging.config.file=/etc/karaf/java.util.logging.properties</span><br><span class="line">-Dkaraf.data=./sonatype-work/nexus3</span><br><span class="line">-Dkaraf.log=./sonatype-work/nexus3/log</span><br><span class="line">-Djava.io.tmpdir=./sonatype-work/nexus3/tmp</span><br></pre></td></tr></table></figure><h3 id="创建Systemd服务文件"><a href="#创建Systemd服务文件" class="headerlink" title="创建Systemd服务文件"></a>创建Systemd服务文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/nexus.service</span><br></pre></td></tr></table></figure><p><code>添加以下内容</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/opt/nexus3/bin/nexus start</span><br><span class="line">ExecStop=/opt/nexus3/bin/nexus stop</span><br><span class="line">#如果非root用户启动,修改为指定启动用户</span><br><span class="line">User=root</span><br><span class="line">Restart=on-abort</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="修改Nexus端口"><a href="#修改Nexus端口" class="headerlink" title="修改Nexus端口"></a>修改Nexus端口</h3><p>Nexus默认端口为8081,如果使用默认端口号则跳过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/nexus3/etc/nexus-default.properties </span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>重新加载Systemd服务文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>系统自启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nexus</span><br></pre></td></tr></table></figure><ul><li>启动Nexus服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nexus</span><br></pre></td></tr></table></figure><ul><li>查看启动信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nexus</span><br></pre></td></tr></table></figure><h1 id="Nexus后续配置"><a href="#Nexus后续配置" class="headerlink" title="Nexus后续配置"></a>Nexus后续配置</h1><h2 id="访问管理端"><a href="#访问管理端" class="headerlink" title="访问管理端"></a>访问管理端</h2><p>Nexus第一次登录需要使用默认密码,默认<code>admin</code>用户,登录成功后需要修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/sonatype-work/nexus3/admin.password</span><br></pre></td></tr></table></figure><h2 id="创建并设置代理仓库"><a href="#创建并设置代理仓库" class="headerlink" title="创建并设置代理仓库"></a>创建并设置代理仓库</h2><p>Nexus仓库按照类型(Type)区分,主要分为以下3个类型：</p><ul><li>代理仓库(proxy):用来代理远程公共仓库,如Maven中央仓库、JBoss远程仓库、阿里云仓库;<code>代理仓库会从远程仓库下载并缓存构件</code>。</li><li>宿主仓库(hosted):又称 Nexus 本地仓库,该仓库通常用来部署本地项目所产生的构件。</li><li>仓库组(group):用来聚合代理仓库和宿主仓库，为这些仓库提供统一的服务地址,以便 Maven 可以更加方便地获得这些仓库中的构件。</li></ul><p><img src="/files/post_img/Nexus%E4%BB%93%E5%BA%93%E5%88%86%E7%B1%BB.png" alt="Nexus仓库分类.png"></p><p>Nexus默认设置了release宿主仓库(maven-releases)、snapshots宿主仓库(maven-snapshots)、public仓库组(maven-public)、代理Maven中央仓库(maven-central)<br><img src="/files/post_img/Nexus%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93.png" alt="Nexus默认仓库"></p><p>可以增加多个代理仓库来增加项目构建速度,如代理<a href="http://maven.aliyun.com/nexus/content/groups/public/">阿里云仓库</a></p><h2 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><p><a href="https://blog.csdn.net/weixin_42170236/article/details/116225277">nginx反向代理nexus3</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="http://c.biancheng.net/nexus/">Nexus（Maven私服搭建）教程</a><br>2.<a href="http://c.biancheng.net/maven2/private-server.html">Maven私服</a><br>3.<a href="https://bynss.com/linux/548281.html">怎样在 Ubuntu 20.04 LTS 上安装 Nexus 存储库</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA常用插件汇总</title>
      <link href="/posts/bb0bf95a/"/>
      <url>/posts/bb0bf95a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" title="Alibaba Java Coding Guidelines" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Alibaba Java Coding Guidelines" />              </div>              <div class="flink-item-name">Alibaba Java Coding Guidelines</div>               <div class="flink-item-desc" title="说明：code规范化">说明：code规范化</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/7160-camelcase" title="CamelCase" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="CamelCase" />              </div>              <div class="flink-item-name">CamelCase</div>               <div class="flink-item-desc" title="命名规则(驼峰、蛇形等)相互转化插件">命名规则(驼峰、蛇形等)相互转化插件</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/10119-mybatisx" title="MyBatis X" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="MyBatis X" />              </div>              <div class="flink-item-name">MyBatis X</div>               <div class="flink-item-desc" title="Mybatis插件">Mybatis插件</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration" title="PlantUML Integration" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="PlantUML Integration" />              </div>              <div class="flink-item-name">PlantUML Integration</div>               <div class="flink-item-desc" title="PlantUML 制作时序图、类图、流程图等插件">PlantUML 制作时序图、类图、流程图等插件</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/8579-translation" title="Translation" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Translation" />              </div>              <div class="flink-item-name">Translation</div>               <div class="flink-item-desc" title="翻译插件">翻译插件</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://plugins.jetbrains.com/plugin/8045-idea-mind-map" title="IDEA Mind Map" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="IDEA Mind Map" />              </div>              <div class="flink-item-name">IDEA Mind Map</div>               <div class="flink-item-desc" title="思维导图插件">思维导图插件</div>            </a>          </div></div></div><p>！！！还用过其他好用的IDEA插件吗</p>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open Feign独立应用</title>
      <link href="/posts/c7242d5c/"/>
      <url>/posts/c7242d5c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Only-single-inheritance-supported-…"><a href="#1-Only-single-inheritance-supported-…" class="headerlink" title="1.Only single inheritance supported: …"></a>1.Only single inheritance supported: …</h3><p>openFeign（v10.12-） 不支持接口继承,所有接口模板需要定义在一个接口类中</p><h3 id="2-GET请求url参数-如果使用注解-QueryMap标注对象，无法使用各种Jison重命别名"><a href="#2-GET请求url参数-如果使用注解-QueryMap标注对象，无法使用各种Jison重命别名" class="headerlink" title="2.GET请求url参数,如果使用注解@QueryMap标注对象，无法使用各种Jison重命别名"></a>2.GET请求url参数,如果使用注解<code>@QueryMap</code>标注对象，无法使用各种Jison重命别名</h3><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line">     * 退款查询</span><br><span class="line">     *</span><br><span class="line">     * @param paymentRefundNo 商户退款单号</span><br><span class="line">     * @param subMchId -</span><br><span class="line">     * @return 查询结果</span><br><span class="line">     */</span><br><span class="line">    @RequestLine(&quot;GET /v3/refund/domestic/refunds/&#123;out_refund_no&#125;&quot;)</span><br><span class="line">    @Headers(&#123;&quot;Content-Type:&quot; + MediaType.APPLICATION_JSON_UTF8_VALUE&#125;)</span><br><span class="line">    Map&lt;String, Object&gt; queryRefund(@Param(&quot;out_refund_no&quot;) String paymentRefundNo,@QueryMap RefundQueryRequestDTO subMchId);</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 构建feign client</span><br><span class="line">     *</span><br><span class="line">     * @param options    -</span><br><span class="line">     * @param httpClient -</span><br><span class="line">     * @return -</span><br><span class="line">     */</span><br><span class="line">    static IWechatPayFeignClient build(Request.Options options, HttpClient httpClient) &#123;</span><br><span class="line">        return Feign.builder()</span><br><span class="line">                .logger(new Slf4jLogger(&quot;FeignLogger&quot;))</span><br><span class="line">                .logLevel(feign.Logger.Level.FULL)</span><br><span class="line">                .client(new ApacheHttpClient(httpClient))</span><br><span class="line">                .errorDecoder((methodKey, response) -&gt; &#123;</span><br><span class="line">                    log.error(&quot;wechatPayHandler.&#123;&#125; fail&quot;, methodKey);</span><br><span class="line">                    String message;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        message = Util.toString(response.body().asReader(StandardCharsets.UTF_8));</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        return FeignException.errorStatus(methodKey, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return new FeignException.FeignServerException(response.status(),message,response.request(),message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                &#125;)</span><br><span class="line">                .encoder(new JacksonEncoder())</span><br><span class="line">                .decoder(new JacksonDecoder())</span><br><span class="line">                .options(options)</span><br><span class="line">                .exceptionPropagationPolicy(ExceptionPropagationPolicy.UNWRAP)</span><br><span class="line">                .retryer(Retryer.NEVER_RETRY)</span><br><span class="line">                .target(IWechatPayFeignClient.class, ApiDomain.WEIXIN.getType());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">/**</span><br><span class="line"> * @author dongy</span><br><span class="line"> * @date 11:54 2022/4/19</span><br><span class="line"> **/</span><br><span class="line">@Data</span><br><span class="line">public class RefundQueryRequestDTO &#123;</span><br><span class="line"></span><br><span class="line">    @JsonProperty(&quot;sub_mchid&quot;)</span><br><span class="line">    private String subMchId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql字符集</title>
      <link href="/posts/8d839de1/"/>
      <url>/posts/8d839de1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>执行某个sql查询时偶遇如下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM p_merchant_info m WHERE m.mch_unique_no  IN (SELECT p.mch_unique_no FROM p_cashier_merchant_rel p )</span><br><span class="line"></span><br><span class="line">Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8mb4_unicode_ci,IMPLICIT) for operation &#x27;=&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后检查数据库的字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES WHERE Variable_name LIKE &#x27;character\_set\_%&#x27; OR Variable_name LIKE &#x27;collation%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">character_set_clientutf8mb4</span><br><span class="line">character_set_connectionutf8mb4</span><br><span class="line">character_set_databaseutf8mb4</span><br><span class="line">character_set_filesystembinary</span><br><span class="line">character_set_resultsutf8mb4</span><br><span class="line">character_set_serverutf8mb4</span><br><span class="line">character_set_systemutf8</span><br><span class="line">collation_connectionutf8mb4_general_ci</span><br><span class="line">collation_databaseutf8mb4_unicode_ci</span><br><span class="line">collation_serverutf8mb4_unicode_ci</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现<code>collation_connection</code>字符集排序为<code>utf8mb4_general_ci</code>,且也是当前表设置的字符集排序</p><p>解决方法有两个</p><h3 id="1-修改表字符集为-utf8mb4-general-ci"><a href="#1-修改表字符集为-utf8mb4-general-ci" class="headerlink" title="1.修改表字符集为:utf8mb4_general_ci"></a>1.修改表字符集为:<code>utf8mb4_general_ci</code></h3><h3 id="2-修改sql如下"><a href="#2-修改sql如下" class="headerlink" title="2.修改sql如下:"></a>2.修改sql如下:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM p_merchant_info m WHERE binary m.mch_unique_no  IN (SELECT binary p.mch_unique_no FROM p_cashier_merchant_rel p )</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Ioc浅应用</title>
      <link href="/posts/d78e3085/"/>
      <url>/posts/d78e3085/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如下定义了切面后，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dongy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 10:44 2022/2/11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(2)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">MethodLogAroundHandler</span> <span class="variable">methodLogAroundHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodLogAroundHandler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志打印</span></span><br><span class="line"><span class="comment">     * 标记注解LogOpen会执行当前切面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> logOpen 注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp     -</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> -</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;@annotation(logOpen)&quot;)</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint pjp, LogOpen logOpen)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodLogAroundHandler.around(pjp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>委托给spring的对象可以约定编程，走到当前切面，但是自己new的对象(如下)如果也想通过切面记录日志，改怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinPayHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractPayHandler</span>&lt;WexinConfig&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@LogOpen(&quot;微信统一下单&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UnifiedOrderResponseDO <span class="title function_">unifiedOrder</span><span class="params">(UnifiedOrderRequestDO request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeixinUnifiedOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WeixinPayHandler</span>().unifiedOrder(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分析spring-AOP原理"><a href="#分析spring-AOP原理" class="headerlink" title="分析spring AOP原理"></a>分析spring AOP原理</h1><p>通过分析spring AOP原理，可以看到spring主要是通过类org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator（继承了类org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator）执行方法postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)来创建代理bean，</p><p>用生成的代理bean去执行被标记为切点的业务方法，才会执行约定编程，即AOP切面逻辑</p><h1 id="改编上述代码"><a href="#改编上述代码" class="headerlink" title="改编上述代码"></a>改编上述代码</h1><p>既然已经指定原理，那就可以吧自己创建的对象改造成代理对象，这里可以借用下spring的org.springframework.beans.factory.support.DefaultListableBeanFactory类进行bean改造，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinPayHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractPayHandler</span>&lt;WexinConfig&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@LogOpen(&quot;微信统一下单&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UnifiedOrderResponseDO <span class="title function_">unifiedOrder</span><span class="params">(UnifiedOrderRequestDO request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> DefaultListableBeanFactory defaultListableBeanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeixinUnifiedOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//其他地方不变，生成对象的地方改为代理对象执行即可</span></span><br><span class="line">        <span class="type">WeixinPayHandler</span> <span class="variable">weixinPayHandler</span> <span class="operator">=</span> defaultListableBeanFactory.applyBeanPostProcessorsAfterInitialization(<span class="keyword">new</span> <span class="title class_">WeixinPayHandler</span>(), <span class="string">&quot;weixinPayHandler&quot;</span>);</span><br><span class="line">        <span class="comment">//将代理bean注册到spring容器中（当前过程看需要）</span></span><br><span class="line">        defaultListableBeanFactory.registerSingleton(<span class="string">&quot;weixinPayHandler&quot;</span>, weixinPayHandler);</span><br><span class="line">        defaultListableBeanFactory.autowireBean(weixinPayHandler);</span><br><span class="line">        weixinPayHandler.unifiedOrder(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后可以看到确实成功执行当前日志打印的约定编程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">09:54:42.150 [main] INFO  WeixinPayHandler - 微信统一下单开始.request:...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">09:54:42.466 [main] INFO  WeixinPayHandler - 微信统一下单结束,params:...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson序列化异常</title>
      <link href="/posts/967a6e6e/"/>
      <url>/posts/967a6e6e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如下代码片段使用fastjson的JSON.toJSONString(result)序列化result，发生异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomerMonitorInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Invoker invoker, Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> invocation.getServiceName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> invocation.getMethodName();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = invoker.invoke(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">err</span> <span class="operator">=</span> t.getCause() == <span class="literal">null</span> ? t.getClass().getSimpleName() : t.getCause().getClass().getSimpleName();</span><br><span class="line">                ZEUS_CLIENT_GAUGE.labels(err, target, method).inc();</span><br><span class="line">                <span class="keyword">throw</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Map</span> <span class="variable">retMap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                retMap = JSON.parseObject(JSON.toJSONString(result));</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                <span class="comment">// ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(retMap == <span class="literal">null</span> || retMap.get(<span class="string">&quot;code&quot;</span>) == <span class="literal">null</span>)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;Unrecognized return value &#123;&#125;.&#123;&#125; return:&#123;&#125;&quot;</span>, target, method, JSON.toJSONString(result));</span><br><span class="line">                ZEUS_CLIENT_GAUGE.labels(<span class="string">&quot;N/A&quot;</span>, target, method).inc();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ZEUS_CLIENT_GAUGE.labels(String.valueOf(retMap.get(<span class="string">&quot;code&quot;</span>)), target, method).inc();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异常堆栈日志如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.reflect.UndeclaredThrowableException: null</span><br><span class="line">at com.sun.proxy.$Proxy159.checkCouponPay(Unknown Source)</span><br><span class="line">at com.didapinche.rs.carpoolpayment.service.BaseService.checkCoupon(BaseService.java:136)</span><br><span class="line">at com.didapinche.rs.carpoolpayment.service.CarpoolPayNewService.carpoolPay(CarpoolPayNewService.java:471)</span><br><span class="line">at com.didapinche.rs.carpoolpayment.controller.CarpoolPayController.doCarpoolPay(CarpoolPayController.java:59)</span><br><span class="line">at com.didapinche.rs.carpoolpayment.controller.CarpoolPayController$$FastClassBySpringCGLIB$$b87c17c7.invoke(&#123;generated&#125;)</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:97)</span><br><span class="line">at com.didapinche.server.commons.common.aop.AroundHandler.around(AroundHandler.java:65)</span><br><span class="line">at com.didapinche.server.commons.autoconfigure.common.LogAop.around1(LogAop.java:61)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor249.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)</span><br><span class="line">at com.didapinche.rs.carpoolpayment.controller.CarpoolPayController$$EnhancerBySpringCGLIB$$98a6a53c.doCarpoolPay(&#123;generated&#125;)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor256.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at com.didapinche.server.commons.common.ddc.DdcFilter.doFilter(DdcFilter.java:67)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)</span><br><span class="line">at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)</span><br><span class="line">at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at io.micrometer.spring.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at io.opentracing.contrib.web.servlet.filter.TracingFilter.doFilter(TracingFilter.java:174)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)</span><br><span class="line">at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:650)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1457)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.reflect.InvocationTargetException: null</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor310.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at com.didapinche.payment.common.thrift.ThriftServiceInvocationHandler.invoke(ThriftServiceInvocationHandler.java:30)</span><br><span class="line">... 131 common frames omitted</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Comparison method violates its general contract!</span><br><span class="line">at java.util.TimSort.mergeLo(TimSort.java:777)</span><br><span class="line">at java.util.TimSort.mergeAt(TimSort.java:514)</span><br><span class="line">at java.util.TimSort.mergeCollapse(TimSort.java:441)</span><br><span class="line">at java.util.TimSort.sort(TimSort.java:245)</span><br><span class="line">at java.util.Arrays.sort(Arrays.java:1438)</span><br><span class="line">at com.alibaba.fastjson.util.TypeUtils.computeGetters(TypeUtils.java:1880)</span><br><span class="line">at com.alibaba.fastjson.util.TypeUtils.buildBeanInfo(TypeUtils.java:1820)</span><br><span class="line">at com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer(SerializeConfig.java:113)</span><br><span class="line">at com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter(SerializeConfig.java:821)</span><br><span class="line">at com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter(SerializeConfig.java:440)</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.getObjectWriter(JSONSerializer.java:448)</span><br><span class="line">at com.alibaba.fastjson.serializer.ASMSerializer_15_CouponInfo.write(Unknown Source)</span><br><span class="line">at com.alibaba.fastjson.serializer.ASMSerializer_14_CouponResult.write(Unknown Source)</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:312)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONString(JSON.java:793)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONString(JSON.java:731)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONString(JSON.java:688)</span><br><span class="line">at com.didapinche.server.commons.autoconfigure.zeus.ZeusClientConfiguration$CustomerMonitorInterceptor.invoke(ZeusClientConfiguration.java:1845)</span><br><span class="line">at com.didapinche.zeus.interceptor.Interceptors$1.invoke(Interceptors.java:34)</span><br><span class="line">at com.didapinche.zeus.client.interceptor.ClientSentinelInterceptor.invoke(ClientSentinelInterceptor.java:37)</span><br><span class="line">at com.didapinche.zeus.interceptor.Interceptors$1.invoke(Interceptors.java:34)</span><br><span class="line">at com.didapinche.zeus.client.interceptor.ClientMonitorInterceptor.invoke(ClientMonitorInterceptor.java:21)</span><br><span class="line">at com.didapinche.zeus.interceptor.Interceptors$1.invoke(Interceptors.java:34)</span><br><span class="line">at com.didapinche.zeus.client.proxy.ZeusSyncInvocationHandler.invoke(ZeusSyncInvocationHandler.java:82)</span><br><span class="line">at com.sun.proxy.$Proxy159.checkCouponPay(Unknown Source)</span><br><span class="line">... 135 common frames omitted</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启当前出错的服务可以解决</p><p>出现这个问题的原因待补充。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SimpleDateFormat日期格式校验</title>
      <link href="/posts/92fe07bf/"/>
      <url>/posts/92fe07bf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SimpleDateFormat做强格式校验需要设置lenient为false,否则SimpleDateFormat会比较宽松地验证日期，比如2007&#x2F;02&#x2F;29会被接受，并转换成2007&#x2F;03&#x2F;01</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateStr 时间，yyyyMMddHHmmss</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 格式正确返回false，否则返回true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DateUtil#string2Date(java.lang.String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">ckYyyyMMddHHmmss</span><span class="params">(String dateStr)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">        simpleDateFormat.setLenient(<span class="literal">false</span>);</span><br><span class="line">        simpleDateFormat.parse(dateStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        CAREFREE_LOGGER.error(<span class="string">&quot;时间格式错误 要求必须为[yyyyMMddHHmmss] dateStr:&#123;&#125;&quot;</span>, dateStr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SimpleDateFormat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ学习笔记</title>
      <link href="/posts/6982816f/"/>
      <url>/posts/6982816f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java调用cmd命令</title>
      <link href="/posts/c33386fe/"/>
      <url>/posts/c33386fe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用的是Process的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行cmd命令</span></span><br><span class="line"><span class="comment"> * 获取证书序列号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> certFilePath 证书本地绝对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回证书序列号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">genSerialNo</span><span class="params">(String certFilePath)</span> &#123;</span><br><span class="line">    String[] cmd = &#123;</span><br><span class="line">            <span class="string">&quot;openssl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;x509&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-in&quot;</span>,</span><br><span class="line">            certFilePath,</span><br><span class="line">            <span class="string">&quot;-noout&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-serial&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">windows</span> <span class="operator">=</span> FileUtil.isWindows();</span><br><span class="line">    <span class="keyword">if</span> (windows) &#123;</span><br><span class="line">        cmd = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;D:\\soft\\Ruby30\\msys32\\usr\\bin\\openssl.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x509&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-in&quot;</span>,</span><br><span class="line">                certFilePath,</span><br><span class="line">                <span class="string">&quot;-noout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-serial&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> process.waitFor();</span><br><span class="line">        <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Failed to call shell&#x27;s command and the return status&#x27;s is&#123;&#125; &quot;</span>, status);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[inputStream.available()];</span><br><span class="line">            <span class="keyword">while</span> (inputStream.read(bytes) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;继续读取文件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;InterruptedException is fail&quot;</span>);</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> windows ? <span class="string">&quot;windows系统指定安装目录为:D:\\soft\\Ruby30\\msys32\\usr\\bin\\openssl.exe&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        log.error(<span class="string">&quot;exec cmd:&#123;&#125; fail,请安装openssl &#123;&#125;&quot;</span>, JsonMapper.toJson(cmd), content, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cmd </tag>
            
            <tag> Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java里的JSON API</title>
      <link href="/posts/b8999201/"/>
      <url>/posts/b8999201/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><h1 id="常用JSON对比"><a href="#常用JSON对比" class="headerlink" title="常用JSON对比"></a>常用JSON对比</h1><p>Java常用JSON工具类有:fastjson(阿里巴巴自研)、Jackson(Spring框架自带)、Gson(Google自研),另外还有json-lib,出现较早，目前maven仓库已经停更10多年</p><table><thead><tr><th>常用JSON</th><th>特点</th><th>缺点</th></tr></thead><tbody><tr><td>开源的Jackson</td><td>1.Jackson所依赖的jar包较少，简单易用并且性能也要相对高些<br />2.Jackson社区相对比较活跃，更新速度也比较快</td><td>1.Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题<br />2.对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式</td></tr><tr><td>阿里巴巴的FastJson</td><td>1.Fastjson是一个Java语言编写的高性能的JSON处理器<br />2.无依赖，不需要例外额外的jar，能够直接跑在JDK上<br />3.FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库</td><td>FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要指定引用</td></tr><tr><td>Google的Gson</td><td>1.Gson完全可以将复杂类型的json到bean或bean到json的转换，功能较全，是JSON解析的神器<br />2.Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上</td><td>Gson在功能上面无可挑剔，但是性能上面比FastJson有所差距</td></tr></tbody></table><p>4种Json技术的比较，在项目选型的时候可以使用Google的Gson和阿里巴巴的FastJson两种并行使用，</p><p>如果只是功能要求，没有性能要求，可以使用google的Gson，</p><p>如果有性能上面的要求可以使用Gson将bean转换json确保数据的正确，使用FastJson将Json转换Bean</p><p>参考:<a href="https://blog.csdn.net/nich002/article/details/77933221">各个JSON技术的比较（Jackson，Gson，Fastjson）的对比</a></p><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h2><h3 id="JsonProperty是位于jackson包里面-注解属性value用来指定别名"><a href="#JsonProperty是位于jackson包里面-注解属性value用来指定别名" class="headerlink" title="JsonProperty是位于jackson包里面,注解属性value用来指定别名"></a>JsonProperty是位于jackson包里面,注解属性<code>value</code>用来指定别名</h3><p>搭配ObjectMapper.writeValueAsString(Object value)方法使用，将实体类转换成字符串。</p><p>搭配ObjectMapper.readValue(String content, Class<T> valueType)方法使用，将字符串转换成实体类。</p><h2 id="JSONField"><a href="#JSONField" class="headerlink" title="@JSONField"></a>@JSONField</h2><h3 id="JSONField是位于fastjson包里面-注解属性name用来指定别名"><a href="#JSONField是位于fastjson包里面-注解属性name用来指定别名" class="headerlink" title="JSONField是位于fastjson包里面,注解属性name用来指定别名"></a>JSONField是位于fastjson包里面,注解属性<code>name</code>用来指定别名</h3><p>搭配JSON.toJSONString(Object object)方法使用，将实体类转换成json字符串。</p><p>搭配JSON.parseObject(String json, Type type)方法使用，将字符串转换成实体类。</p><h3 id="属性serialzeFeatures用来指定序列化和反序列化方式"><a href="#属性serialzeFeatures用来指定序列化和反序列化方式" class="headerlink" title="属性serialzeFeatures用来指定序列化和反序列化方式"></a>属性<code>serialzeFeatures</code>用来指定序列化和反序列化方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField(name = &quot;openUUID&quot;, serialzeFeatures = SerializerFeature.WriteNullStringAsEmpty)</span></span><br><span class="line"><span class="keyword">private</span> String openUuid;</span><br></pre></td></tr></table></figure><p>上面属性openUuid在序列化是如果没有给定值会默认空字符串</p><h3 id="serialize转Json字符串时，忽略指定属性"><a href="#serialize转Json字符串时，忽略指定属性" class="headerlink" title="serialize转Json字符串时，忽略指定属性"></a><code>serialize</code>转Json字符串时，忽略指定属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="keyword">private</span> String contractImage;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h2><p>JackSon忽略字段，或者@JsonIgnoreProperties在类上表明字段名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;contractTemplateId&quot;, &quot;contractImage&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JackSonInputBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 合同模板ID</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String contractTemplateId;</span><br><span class="line">    <span class="comment">// 合同号</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String contractId;</span><br><span class="line">    <span class="comment">// Base64编码的合同</span></span><br><span class="line">    <span class="keyword">private</span> String contractImage;</span><br><span class="line">    <span class="keyword">private</span> String contractVersion;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Illegal key size</title>
      <link href="/posts/465cd5c9/"/>
      <url>/posts/465cd5c9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>您正在使用Java加密扩展开发漂亮的应用程序，并且使用长度超过128位的密钥时，您会遇到以下错误：</p><p><strong>java.lang.IllegalArgumentException: java.security.InvalidKeyException: Illegal key size</strong></p><p>您所做的一切都是正确的:JDK在默认情况下有一个专门的密钥大小限制，因此您不能使用密钥超过128位的加密。</p><p>Java官方文档：<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html">Oracle’s documentation</a>。</p><h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>其实，Java几乎各种常用加密算法都能找到对应的实现。但是因为美国的出口限制，Sun通过权限文件（local_policy.jar、US_export_policy.jar）做了相应限制。因此存在一些问题：</p><ul><li>密钥长度上不能满足需求（如：java.security.InvalidKeyException: Illegal key size or default parameters）；</li><li>部分算法未能支持，如MD4、SHA-224等算法；</li><li>API使用起来还不是很方便；一些常用的进制转换辅助工具未能提供，如Base64编码转换、十六进制编码转换等工具。</li></ul><p>  Oracle在其官方网站上提供了无政策限制权限文件（Unlimited Strength Jurisdiction Policy Files），我们只需要将其部署在JRE环境中，就可以解决限制问题。</p><p>由于一些国家政府的进口控制限制，Sun Microsystems提供的JDK 5.0附带的管辖政策文件指定可以使用“强”但有限的加密。</p><p>有些国家对加密算法使用的允许密钥强度有限制:</p><p>这些文件的“无限强度”版本表明对密码强度没有限制，适用于居住在合格国家(即大多数国家)的人。<br>但只有“强大”的版本才能被输入那些政府强制限制的国家。JCE框架将强制执行已安装的管辖权策略文件中指定的限制。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><em><strong>最最最有效的方法就是升级JDK到v1.8.0_2xx以上</strong></em></p><p>还有其他方法可以参考:<a href="https://blog.csdn.net/weixin_44299027/article/details/105540764">【Java用法】加密异常</a></p>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目Sonar异常bug汇总</title>
      <link href="/posts/8965658a/"/>
      <url>/posts/8965658a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-DateFormat线程不安全"><a href="#1-DateFormat线程不安全" class="headerlink" title="1.DateFormat线程不安全"></a>1.DateFormat线程不安全</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data problems or exceptions at runtime.</span><br><span class="line">This rule raises an issue when an instance of Calendar, DateFormat, javax.xml.xpath.XPath, or javax.xml.validation.SchemaFactory is marked static.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>error eq:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">dayFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">minFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Date createTime)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> minFormat.format(createTime);</span><br><span class="line"><span class="type">String</span> <span class="variable">today</span> <span class="operator">=</span> dayFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="keyword">if</span> (date.substring(<span class="number">0</span>, <span class="number">10</span>).equals(today)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;今天 &quot;</span> + date.substring(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-Raw-byte-values-should-not-be-used-in-bitwise-operations-in-combination-with-shifts-不太明白"><a href="#2-Raw-byte-values-should-not-be-used-in-bitwise-operations-in-combination-with-shifts-不太明白" class="headerlink" title="2.Raw byte values should not be used in bitwise operations in combination with shifts (不太明白)"></a>2.Raw byte values should not be used in bitwise operations in combination with shifts (不太明白)</h1><p>When reading bytes in order to build other primitive values such as ints or longs, the byte values are automatically promoted, but that promotion can have unexpected results.<br>For instance, the binary representation of the integer 640 is 0b0000_0010_1000_0000, which can also be written with the array of (unsigned) bytes [2, 128]. However, since Java uses two’s complement, the representation of the integer in signed bytes will be [2, -128] (because the byte 0b1000_0000 is promoted to the int 0b1111_1111_1111_1111_1111_1111_1000_0000). Consequently, trying to reconstruct the initial integer by shifting and adding the values of the bytes without taking care of the sign will not produce the expected result.<br>To prevent such accidental value conversion, use bitwise and (&amp;) to combine the byte value with 0xff (255) and turn all the higher bits back off.<br>This rule raises an issue any time a byte value is used as an operand without &amp; 0xff, when combined with shifts.</p><p>error eq</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">b3 = base64Alphabet[d3];</span><br><span class="line">b4 = base64Alphabet[d4];</span><br><span class="line">decodedData[encodedIndex++] = (<span class="type">byte</span>) (b1 &lt;&lt; <span class="number">2</span> | b2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">decodedData[encodedIndex++] = (<span class="type">byte</span>) (((b2 &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | ((b3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xf</span>));</span><br><span class="line">decodedData[encodedIndex++] = (<span class="type">byte</span>) (b3 &lt;&lt; <span class="number">6</span> | b4);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="/files/code/Base64.java">完整代码Base64.java</a></p><h1 id="3-”compareTo”-results-should-not-be-checked-for-specific-values"><a href="#3-”compareTo”-results-should-not-be-checked-for-specific-values" class="headerlink" title="3.”compareTo” results should not be checked for specific values"></a>3.”compareTo” results should not be checked for specific values</h1><p>While most compareTo methods return -1, 0, or 1, some do not, and testing the result of a compareTo against a specific value other than 0 could result in false negatives.</p><h1 id="4-java-util-Stream-peek-“exists-mainly-to-support-debugging”-purposes"><a href="#4-java-util-Stream-peek-“exists-mainly-to-support-debugging”-purposes" class="headerlink" title="4.java.util.Stream.peek() “exists mainly to support debugging” purposes."></a>4.java.util.Stream.peek() “exists mainly to support debugging” purposes.</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">According to its JavaDocs, the intermediate Stream operation java.util.Stream.peek() “exists mainly to support debugging” purposes.</span><br><span class="line">A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to peek() for optimization purpose. This can lead to peek() being unexpectedly called only for some or none of the elements in the Stream.</span><br><span class="line">As a consequence, relying on peek() without careful consideration can lead to error-prone code.</span><br><span class="line">This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production debugging/logging purposes.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：尽量不要选用peek函数</p>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sonar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows批处理文件如何固定到开始菜单</title>
      <link href="/posts/3ed753b8/"/>
      <url>/posts/3ed753b8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.正常右键去创建快捷方式</p><p>2.修改”快捷方式-目标”内容,在最前面加上<code>cmd /c</code></p><p>3.再次右键快捷方式就会显示添加到开始菜单或任务栏</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> bat快捷方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统批处理文件如何后台执行</title>
      <link href="/posts/aa087c4b/"/>
      <url>/posts/aa087c4b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="修改bat文件"><a href="#修改bat文件" class="headerlink" title="修改bat文件"></a>修改bat文件</h2><p>在bat文件最开头添加如下内容即可</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;%<span class="number">1</span>&quot;==&quot;hide&quot; <span class="keyword">goto</span> CmdBegin</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~fs0 hide %<span class="number">1</span>&quot;,<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">:CmdBegin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="vbs的Run方法"><a href="#vbs的Run方法" class="headerlink" title="vbs的Run方法"></a>vbs的Run方法</h2><p>run()方法一共有三个参数,Run(strCommand, [intWindowStyle], [bWaitOnReturn])</p><h3 id="strCommand"><a href="#strCommand" class="headerlink" title="strCommand"></a>strCommand</h3><p>第一个参数strCommand,表示要运行的命令行的字符串值。包括要传递到可执行文件的所有参数。 </p><pre><code>* %~fs0 表示批处理命令本身    * f代表一个合格的路径全名    * s代表短名，即超过8为字符的将缩写为8个字符    * 0代表自身。* hide 为了满足```if &quot;%1&quot;==&quot;hide&quot; goto CmdBegin```这个条件* %1 hide后面的```%1```表示在调用这个批处理命令传递进来的第二个参数(Windows系统批处理命令取命令行参数的方式跟shell命令表示不同，shell命令是```$1```)</code></pre><h3 id="intWindowStyle"><a href="#intWindowStyle" class="headerlink" title="intWindowStyle"></a>intWindowStyle</h3><p>第二个参数intWindowStyle,表示程序窗口外观的整数值,可选</p><pre><code>* 0 隐藏一个窗口并激活另一个窗口。 * 1 激活并显示窗口。如果窗口处于最小化或最大化状态，则系统将其还原到原始大小和位置。第一次显示该窗口时，应用程序应指定此标志。 * 2 激活窗口并将其显示为最小化窗口。 * 3 激活窗口并将其显示为最大化窗口。 * 4 按最近的窗口大小和位置显示窗口。活动窗口保持活动状态。 * 5 激活窗口并按当前的大小和位置显示它。 * 6 最小化指定的窗口，并按照 Z 顺序激活下一个顶部窗口。 * 7 将窗口显示为最小化窗口。活动窗口保持活动状态。 * 8 将窗口显示为当前状态。活动窗口保持活动状态。 * 9 激活并显示窗口。如果窗口处于最小化或最大化状态，则系统将其还原到原始大小和位置。还原最小化窗口时，应用程序应指定此标志。 * 10 根据启动应用程序的程序状态来设置显示状态。</code></pre><h3 id="bWaitOnReturn"><a href="#bWaitOnReturn" class="headerlink" title="bWaitOnReturn"></a>bWaitOnReturn</h3><p>第三个参数bWaitOnReturn,可选。布尔值，表示在继续执行脚本中的下一条语句之前，脚本是否等待执行完程序。</p><pre><code>* 如果设为 true，则在执行完程序后才执行脚本，Run 方法返回由程序返回的任何错误代码。* 如果设为 false（默认值），则 Run 方法将自动在启动程序后立即返回 0（不是错误代码）。</code></pre><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.csdn.net/diyu122222/article/details/77871585">批处理文件 bat 后台运行</a><br><a href="https://blog.csdn.net/guyue35/article/details/46658883">vbs的Run方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.4美化</title>
      <link href="/posts/fc472961/"/>
      <url>/posts/fc472961/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><h3 id="一、引导、开机及登陆界面优化"><a href="#一、引导、开机及登陆界面优化" class="headerlink" title="一、引导、开机及登陆界面优化"></a>一、引导、开机及登陆界面优化</h3><ul><li><p>引导（Grup）界面美化</p><p><a href="http://www.ahutcloud.cn/458/">Ubuntu 20.04添加grub主题，美化启动界面</a></p></li><li><p>开机（Plymouth）界面美化</p><ol><li>美化文件<a href="https://www.gnome-look.org/p/1009320/">下载</a> （注：这里给出的范例是mac os的开机界面）</li><li>将文件解压后放在 <code>/usr/share/plymouth/themes/</code>下</li><li>创建文件<code>/usr/share/plymouth/themes/darwin/darwin.plymouth</code>内容如下</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Plymouth Theme]</span><br><span class="line">Name=Darwin OS X Plymouth</span><br><span class="line">Description=A Plymouth of OS X Yosemite</span><br><span class="line">ModuleName=script</span><br><span class="line"></span><br><span class="line">[script]</span><br><span class="line">ImageDir=/usr/share/plymouth/themes/darwin</span><br><span class="line">ScriptFile=/usr/share/plymouth/themes/darwin/darwin.script</span><br></pre></td></tr></table></figure><p>​4.安装，键入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/darwin/darwin.plymouth 100</span><br></pre></td></tr></table></figure><p>​5.选择新主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config default.plymouth</span><br></pre></td></tr></table></figure><p>​6.更新设置，最后重新就可以看到效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><ul><li>登陆界面美化</li></ul><p>参考：<a href="https://www.cnblogs.com/IntelligencePointer/p/13080662.html">ubuntu18.04开机grub引导界面、登录界面美化</a> （Ubuntu20 grup美化除外）</p><p><em><strong>注意</strong></em>：如果修改错误导致无法成功登陆到系统，可以在选择引导后直接<code>alt + ctrl + F1 ~ F5</code>进入tty，通过相应的命令还原回去</p><hr><h3 id="二、主题、图标及浏览器优化"><a href="#二、主题、图标及浏览器优化" class="headerlink" title="二、主题、图标及浏览器优化"></a>二、主题、图标及浏览器优化</h3><p>1.美化前的准备工作,资源文件下载：</p><ul><li>主题包：<a href="https://www.gnome-look.org/p/1403328/">WhiteSur Gtk Theme</a></li><li>Icons 图标：<a href="https://www.pling.com/p/1405756/">WhiteSur icon theme</a></li><li>鼠标图标：<a href="https://www.pling.com/p/1355701/">McMojave cursors</a></li><li>壁纸：<a href="https://www.pling.com/p/1398833/">WhiteSur Wallpaper</a></li><li>Firefox 浏览器美化: <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme">WhiteSur-gtk-theme</a></li></ul><p>2.具体介绍</p><ul><li>主题（Themes）美化</li><li>图标（Cursors）美化</li><li>光标（Cursors）美化</li><li>Dock栏美化</li><li>其他Gnome插件</li><li>FireFox美化</li></ul><p>参考：</p><p><a href="http://blog.yixao.net/soft/11250.html">Ubuntu20.04桌面美化</a></p><p><a href="https://zhuanlan.zhihu.com/p/139305626">写给工程师的 Ubuntu 20.04 最佳配置指南</a></p><hr><h3 id="三、其他设置"><a href="#三、其他设置" class="headerlink" title="三、其他设置"></a>三、其他设置</h3><ul><li><p>Ubuntu加Windows10时间不同步</p><p>依次键入如下命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ntpdate</span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line">sudo hwclock --localtime --systohc</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><ul><li><p>常用软件&#x2F;插件</p><p>plank 不错的dock栏，还有剪切板小工具，可以查看多次粘贴内容</p><p>Simple Screen Recorder 录屏工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加源：</span></span><br><span class="line">sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新源：</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装：</span></span><br><span class="line">sudo apt-get install simplescreenrecorder</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/keatonlao/p/13252483.html">Ubuntu 上五款搜索工具：Albert、Synapse、Utools、Ulauncher、FSearch</a></p><p><a href="https://itdashu.com/tool/ubuntu20-04-install.html">Ubuntu20.04安装：美化与必备软件 (Coverflow alt-tab、Dash to dock、Hide top bar、Drop down terminal x)</a></p></li></ul><hr><p>美化常用网站：</p><p><a href="https://www.gnome-look.org/browse/cat/108/ord/rating/">GONME-LOOK官网</a></p><p><a href="https://extensions.gnome.org/">GONME插件</a></p><p>拓展：</p><p><a href="https://linux265.com/distro/">linux发行版</a></p><p><a href="https://linux265.com/news/6612.html">教你如何将 Manjaro xfce 美化的像 MacOS</a></p><h3 id="四、常用工具汇总"><a href="#四、常用工具汇总" class="headerlink" title="四、常用工具汇总"></a>四、常用工具汇总</h3><h5 id="4-1-截图工具-flameshot"><a href="#4-1-截图工具-flameshot" class="headerlink" title="4.1 截图工具(flameshot)"></a>4.1 截图工具(flameshot)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">sudo apt-get install flameshot</span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">flameshot gui</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/u011017694/article/details/105042378">Ubuntu下截图工具推荐</a></p><h5 id="4-2-IDEA"><a href="#4-2-IDEA" class="headerlink" title="4.2 IDEA"></a>4.2 IDEA</h5><p>ubuntu最好使用root权限启动</p><h5 id="4-3粘贴板-qlipper"><a href="#4-3粘贴板-qlipper" class="headerlink" title="4.3粘贴板(qlipper)"></a>4.3粘贴板(qlipper)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qlipper</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/e00c5afdf8c5">Ubuntu20支持历史剪切板快捷键配置</a></p><h5 id="4-4输入法"><a href="#4-4输入法" class="headerlink" title="4.4输入法"></a>4.4输入法</h5><p>百度输入法</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/143115656">Ubuntu 20.04中文输入法</a></p><h5 id="4-5数据库可视化-navicat"><a href="#4-5数据库可视化-navicat" class="headerlink" title="4.5数据库可视化(navicat)"></a>4.5<a href="https://my.oschina.net/u/3955849/blog/2979215">数据库可视化(navicat)</a></h5><p>参考:·<a href="http://www.xuganggo.cn/?p=249">Navicat 15 premium AppImage格式激活</a></p><h3 id="五、-常用设置"><a href="#五、-常用设置" class="headerlink" title="五、 常用设置"></a>五、 常用设置</h3><h5 id="5-1-sudo不再输入密码"><a href="#5-1-sudo不再输入密码" class="headerlink" title="5.1 sudo不再输入密码"></a>5.1 sudo不再输入密码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑/etc/sudoers</span></span><br><span class="line">sudo vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在最后加入内容</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">includedir /etc/sudoers.d</span></span><br><span class="line"></span><br><span class="line">dongyulong(替换成自己的用户) ALL=(ALL) NOPASSWD : ALL</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见面试题</title>
      <link href="/posts/bf7bdd05/"/>
      <url>/posts/bf7bdd05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Redis过期策略及内存淘汰策略"><a href="#1-Redis过期策略及内存淘汰策略" class="headerlink" title="1.Redis过期策略及内存淘汰策略"></a>1.Redis过期策略及内存淘汰策略</h3><ul><li>过期策略</li></ul><p>1）定时过期</p><p><strong>每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除</strong>。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p><p>2）惰性过期</p><p><strong>只有当访问一个key时，才会判断该key是否已过期，过期则清除</strong>。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p><p>3）定期过期</p><p><strong>每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key</strong>。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p><p>expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。</p><p>4）Redis中同时使用了惰性过期和定期过期两种过期策略。</p><ul><li>内存淘汰策略</li></ul><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><p>1）<strong>noeviction（默认使用）</strong>：当内存不足以容纳新写入数据时，新写入操作会报错。</p><p>2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</p><p>3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</p><p>4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</p><p>5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</p><p>6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p><p>参考:<a href="https://www.jianshu.com/p/8aa619933ebb">Redis的过期策略和内存淘汰策略</a></p><h3 id="2-Redis集群及数据一致性"><a href="#2-Redis集群及数据一致性" class="headerlink" title="2.Redis集群及数据一致性"></a>2.Redis集群及数据一致性</h3><p>集群-主从复制：一主多从，读写分离，</p><p>Redis 集群无法保证强一致性，只能保证最终一致性，即意味着在某些情况下可能会失去写操作。Redis集群是使用异步的方式复制到从节点。Redis另一种命令丢失的情况是网络出现分区。</p><h3 id="3-spring操作redis的三种方式："><a href="#3-spring操作redis的三种方式：" class="headerlink" title="3.spring操作redis的三种方式："></a>3.spring操作redis的三种方式：</h3><p>①spring-data-redis</p><p>②spring-cache</p><p>③回归到原始：使用jedis或其他客户端来操作redis</p><h3 id="4-缓存的分类"><a href="#4-缓存的分类" class="headerlink" title="4.缓存的分类"></a>4.缓存的分类</h3><p><img src="/files/image/post/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200509125432642.png" alt="image-20200509125432642"></p><h3 id="5-Redis哨兵机制"><a href="#5-Redis哨兵机制" class="headerlink" title="5.Redis哨兵机制"></a>5.Redis哨兵机制</h3><p><img src="/files/image/post/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/Nkbi5uZXQveXN3S25pZ2h0.png" alt="img"></p><ul><li>1、<strong>Sentinel</strong>的作用：</li></ul><p>A、Master 状态监测</p><p>B、如果Master 异常，则会进行Master-slave 转换，将其中一个Slave作为Master，将之前的Master作为Slave </p><p>C、Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换 </p><ul><li>2、<strong>Sentinel</strong>的工作方式:</li></ul><p>1)：每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他 Sentinel 实例发送一个 PING 命令。</p><p>2)：如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel 标记为主观下线。 </p><p>3)：如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。 </p><p>4)：当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线 。</p><p>5)：在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有Master，Slave发送 INFO 命令 。</p><p>6)：当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次 。</p><p>7)：若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会被移除。 若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。</p><p>参考：<a href="https://blog.csdn.net/yswKnight/article/details/78158540">《Redis的哨兵机制》 模式 原理详解，其实很简单</a></p><h3 id="6-Redis集群设计原理"><a href="#6-Redis集群设计原理" class="headerlink" title="6.Redis集群设计原理"></a>6.Redis集群设计原理</h3><ul><li>主从复制</li></ul><p><img src="/files/image/post/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVqaW5ndGFvNzAz.png" alt="主从复制"></p><p>1）只有<em>1</em>个<em>Master</em>，可以有<em>N</em>个<em>slaver</em>，而且<em>Slaver</em>也可以有自己的<em>Slaver</em>，由于这种主从的关系决定他们是在<strong>配置阶段就要指定他们的上下级关系</strong>，而不是<em>Zookeeper</em>那种平行关系是自主推优出来的。</p><p>2） 读写分离，<em>Master</em>只负责写和同步数据给<em>Slaver</em>，<em>Slaver</em>承担了被读的任务，所以<em>Slaver</em>的扩容只能提高读效率不能提高写效率。</p><p>3）<em>Slaver</em>先将<em>Master</em>那边获取到的信息压入磁盘，再<em>load</em>进内存，<em>client</em>端是从内存中读取信息的，所以<em>Redis</em>是内存数据库。</p><p>4）当一个新的<em>Slaver</em>加入到这个集群时，会主动找<em>Master</em>来拜码头，<em>Master</em>发现新的小弟后将全量数据发送给新的<em>Slaver</em>，数据量越大性能消耗也就越大，所以尽量避免在运行时做<em>Slaver</em>的扩容。</p><p>5）主从模式的特点</p><p>优点：读写分离，通过增加<em>Slaver</em>可以提高并发读的能力。</p><p>缺点：<em>Master</em>写能力是瓶颈。</p><p>​     虽然理论上对<em>Slaver</em>没有限制但是维护<em>Slaver</em>开销总将会变成瓶颈。</p><p>​     <em>Master</em>的<em>Disk</em>大小也将会成为整个<em>Redis</em>集群存储容量的瓶颈。</p><ul><li>哈希<em>Slot</em>：</li></ul><p><img src="/files/image/post/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/20171113151049211.png" alt="img"></p><p>1） 对象保存到<em>Redis</em>之前先经过<em>CRC16</em>哈希到一个指定的<em>Node</em>上，例如<em>Object4</em>最终<em>Hash</em>到了<em>Node1</em>上。</p><p>2）每个<em>Node</em>被平均分配了一个<em>Slot</em>段，<strong>对应着<em>0-16384</em></strong>，<em>Slot</em>不能重复也不能缺失，否则会导致对象重复存储或无法存储。</p><p>3）Node之间也互相监听，一旦有Node退出或者加入，会按照Slot为单位做数据的迁移。例如Node1如果掉线了，0-5640这些Slot将会平均分摊到Node2和Node3上,由于Node2和Node3本身维护的Slot还会在自己身上不会被重新分配，所以迁移过程中不会影响到5641-16384Slot段的使用。</p><p>4）哈希<em>Slot</em>的优缺点</p><p>缺点：每个<em>Node</em>承担着互相监听、高并发数据写入、高并发数据读出，工作任务繁重</p><p>优点：将<em>Redis</em>的写操作分摊到了多个节点上，提高写的并发能力，扩容简单。</p><ul><li>最后</li></ul><p>主从和哈希的设计优缺点正好是相互弥补的，将图一每一套主从对应到图二中的每一个<em>Node</em>，就是<em>Redis</em>集群的终极形态，先<em>Hash</em>分逻辑节点，然后每个逻辑节点内部是主从</p><p><img src="/files/image/post/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/20171113151113823.png" alt="img"></p><p>想扩展并发读就添加<em>Slaver</em>，想扩展并发写就添加<em>Master</em>，想扩容也就是添加<em>Master</em>，任何一个<em>Slaver</em>或者几个<em>Master</em>挂了都不会是灾难性的故障。</p><h3 id="7-数据倾斜"><a href="#7-数据倾斜" class="headerlink" title="7.数据倾斜"></a>7.数据倾斜</h3><p>通过 Twemproxy 对 redis key 进行分片计算，将 redis key 进行分片计算，分配到多个 redis 实例中的其中一个.由于 <strong>Twemproxy 背后的多个 redis 实例在内存配置和 cpu 配置上都是一致的，所以一旦出现访问量倾斜或者数据量倾斜，则可能会导致某个 redis 实例达到性能瓶颈，从而使整个集群达到性能瓶颈</strong>。</p><p>数据倾斜分为访问量倾斜和数据量倾斜</p><ul><li>hot key导致访问量倾斜</li></ul><p><em>Hot key</em>，即热点 key，<strong>指的是在一段时间内，该 key 的访问量远远高于其他的 redis key</strong>， 导致大部分的访问流量在经过 proxy 分片之后，都集中访问到某一个 redis 实例上。hot key 通常在不同业务中，存储着不同的热点信息。比如</p><ol><li>新闻应用中的热点新闻内容；</li><li>活动系统中某个用户疯狂参与的活动的活动配置；</li><li>商城秒杀系统中，最吸引用户眼球，性价比最高的商品信息；</li></ol><p>解决方案：利用分片算法的特性，对key进行打散处理</p><p>我们知道 hot key 之所以是 hot key，是因为它只有一个key，落地到一个实例上。所以我们可以给hot key加上前缀或者后缀，把一个hotkey 的数量变成 redis 实例个数N的倍数M，从而由访问一个 redis key 变成访问 N * M 个redis key。N*M 个 redis key 经过分片分布到不同的实例上，将访问量均摊到所有实例。</p><p><strong>加上后缀的key可以称之为tmp_key(后缀可以使用固定区间的随机数),程序会优先访问tmp key,在得不到数据的情况下，再访问原来的 hot key，并将 hot key的内容写回 tmp key。</strong></p><p><strong>tmp key的过期时间是 hot key 的过期时间加上一个较小的随机正整数，保证在 hot key 过期时，所有 tmp key 不会同时过期而造成缓存雪崩</strong>。这是一种通过<code>坡度过期</code>的方式来避免雪崩的思路，同时也可以利用原子锁来写入数据就更加的完美，减小db的压力。</p><p>Twemproxy 的分片算法在计算过程中，<strong>越靠前的字符权重越大，考后的字符权重则越小</strong>。也就是说对于key名，前面的字符差异越大，算出来的分片值差异也越大，更有可能分配到不同的实例。比如：可以改为放在最后的命名空间的前缀。</p><ul><li>bigkey导致的数据量倾斜</li></ul><p><strong><em>big key</em> ，即数据量大的 key ，由于其数据大小远大于其他key，导致经过分片之后，某个具体存储这个 big key 的实例内存使用量远大于其他实例，造成，内存不足，拖累整个集群的使用。</strong>big key 在不同业务上，通常体现为不同的数据，比如：</p><ol><li>论坛中的大型持久盖楼活动；</li><li>聊天室系统中热门聊天室的消息列表；</li></ol><p>解决方案：对bigkey进行拆分</p><p>如果是较大的json可以使用multiset&#x2F;multiget的方式,将这个key的内容打散到各个实例。</p><p>如果是List，可以拆成list_1、list_2……list_n</p><ul><li><p>即是hot_key也是bigkey</p></li><li><p>hot_key和bigkey的判定</p></li></ul><p>1）事先预判</p><p>在业务开发阶段，就要对可能变成 hot key ，big key 的数据进行判断，提前处理，这需要的是对产品业务的理解，对运营节奏的把握，对数据设计的经验。</p><p>2）事中-监控和自动处理</p><p>在proxy层，对每一个 redis 请求进行收集上报;（推荐，改动涉及少且好维护）；</p><p>在应用程序端，对每次请求 redis 的操作进行收集上报;不推荐，但是在运维资源缺少的场景下可以考虑。开发可以绕过运维搞定）；</p><p>摘自：<a href="https://segmentfault.com/a/1190000017387491">开发如何避免redis集群访问倾斜和数据倾斜</a></p><h3 id="8-CAP、BASE及ACID"><a href="#8-CAP、BASE及ACID" class="headerlink" title="8.CAP、BASE及ACID"></a>8.CAP、BASE及ACID</h3><h6 id="8-1-CAP"><a href="#8-1-CAP" class="headerlink" title="8.1 CAP"></a>8.1 CAP</h6><ul><li>一致性 (Consistency)（等同于所有节点访问同一份最新的数据副本）</li><li>可用性（Availability）（对数据更新具备高可用性）</li><li><strong>网络分区容忍性（Partition tolerance）</strong>（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。）</li></ul><p><strong>对于分布式数据系统，分区容忍性是基本要求</strong>，所以就会在一致性和可用性之间做出取舍。</p><h6 id="8-2-BASE"><a href="#8-2-BASE" class="headerlink" title="8.2 BASE"></a>8.2 BASE</h6><p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p><h6 id="8-3-ACID"><a href="#8-3-ACID" class="headerlink" title="8.3 ACID"></a>8.3 ACID</h6><ul><li>Atomicity 原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li><li>Consistency 一致性. 在事务开始或结束时，数据库应该在一致状态。</li><li>Isolation 隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li><li>Durability. 持久性，一旦事务完成，就不能返回。</li></ul><h3 id="9-五大常用算法"><a href="#9-五大常用算法" class="headerlink" title="9.五大常用算法"></a>9.五大常用算法</h3><p>参考:<a href="https://blog.csdn.net/u011956147/article/details/68066304">五大常用算法：分治、动态规划、贪心、回溯和分支界定</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM实战故障排查</title>
      <link href="/posts/4612c954/"/>
      <url>/posts/4612c954/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-Oracle官网给出的故障排查步骤"><a href="#1-Oracle官网给出的故障排查步骤" class="headerlink" title="1.Oracle官网给出的故障排查步骤"></a>1.Oracle官网给出的故障排查步骤</h1><p>Troubleshoot with jcmd Utility<br>The jcmd utility provides the following troubleshooting options:</p><ul><li>1.Start a recording</li></ul><p>For example, to start a 2-minute recording on the running Java process with the identifier 7060 and save it to myrecording.jfr in the current directory, use the following:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 JFR.start name=MyRecording settings=profile delay=20s duration=2m filename=C:\TEMP\myrecording.jfr</span><br></pre></td></tr></table></figure><ul><li>2.Check a recording</li></ul><p>The JFR.check diagnostic command checks a running recording. For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 JFR.check</span><br></pre></td></tr></table></figure><ul><li>3.Stop a recording</li></ul><p>The JFR.stop diagnostic command stops a running recording and has the option to discard the recording data. For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 JFR.stop</span><br></pre></td></tr></table></figure><ul><li>4.Dump a recording</li></ul><p>The JFR.dump diagnostic command stops a running recording and has the option to dump recordings to a file. For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 JFR.dump name=MyRecording filename=C:\TEMP\myrecording.jfr</span><br></pre></td></tr></table></figure><ul><li>5.Create a heap dump</li></ul><p>The preferred way to create a heap dump is</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 GC.heap_dump filename=Myheapdump</span><br></pre></td></tr></table></figure><ul><li>6.Create a heap histogram</li></ul><p>The preferred way to create a heap histogram is</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd 7060 GC.class_histogram filename=Myheaphistogram</span><br></pre></td></tr></table></figure><h1 id="2-内存泄漏OOM分析"><a href="#2-内存泄漏OOM分析" class="headerlink" title="2.内存泄漏OOM分析"></a>2.内存泄漏OOM分析</h1><ul><li>首先配置JVM启动参数，让JVM在遇到OutOfMemoryError时自动生成Dump文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path</span><br></pre></td></tr></table></figure><ul><li>然后使用命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap  -dump:live,format=b,file=/path/heap.hprof 23808  </span><br></pre></td></tr></table></figure><ul><li><p>然后使用MAT分析工具，如jhat命令，eclipse的mat插件</p></li><li><p>总结：</p></li></ul><p>如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。</p><p>要制作堆Dump可以直接使用jvm自带的jmap命令</p><p>可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。</p><p>使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。</p><p>也可以使用 jmap -dump:format&#x3D;b,file&#x3D;命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容</p><p>在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p><p>在用cms gc的情况下，执行jmap -heap有些时候会导致进程变T，因此强烈建议别执行这个命令，如果想获取内存目前每个区域的使用状况，可通过jstat -gc或jstat -gccapacity来拿到</p><p>参考：</p><p><a href="https://juejin.im/post/5e41a4675188254902765614">6.2 jmap命令详解</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/">Java Platform, Standard Edition Tools Reference</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM故障排查 </tag>
            
            <tag> jcmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Java工具</title>
      <link href="/posts/f5fbf762/"/>
      <url>/posts/f5fbf762/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><h1 id="一、JDK工具分类"><a href="#一、JDK工具分类" class="headerlink" title="一、JDK工具分类"></a>一、JDK工具分类</h1><ul><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref19"><em><strong>Create and Build Applications（创建和构建应用程序）</strong></em></a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref20"><em><strong>Security</strong></em></a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref21">Internationalization（国际化）</a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref22">Remote Method Invocation (RMI)</a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref23">Java IDL and RMI-IIOP</a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref24">Deploy Applications and Applets</a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref25">Java Web Start</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref26"><strong>Monitor Java Applications（监控Java程序）</strong></a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref27"><strong>Monitor the Java Virtual Machine（监控JVM）</strong></a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref28">Web Services</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref29"><strong>Troubleshooting（故障排查）</strong></a></li><li><input disabled="" type="checkbox"> <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref30">Scripting（脚本编写）</a></li></ul><h1 id="二、常用工具详解"><a href="#二、常用工具详解" class="headerlink" title="二、常用工具详解"></a>二、常用工具详解</h1><h3 id="2-1-监控Java程序工具（GUI工具）"><a href="#2-1-监控Java程序工具（GUI工具）" class="headerlink" title="2.1 监控Java程序工具（GUI工具）"></a>2.1 监控Java程序工具（GUI工具）</h3><table><thead><tr><th align="center">工具</th><th>描述</th></tr></thead><tbody><tr><td align="center"><a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jconsole.html">jconsole</a></td><td>jconsole命令启动一个图形控制台工具，使您可以监视和管理本地或远程计算机上的Java应用程序和虚拟机。</td></tr><tr><td align="center"><a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jvisualvm.html">jvisualvm</a></td><td>Java VisualVM是一个直观的图形用户界面，当基于Java技术的应用程序（Java应用程序）在指定的Java虚拟机（JVM）上运行时，可提供有关它们的详细信息。 Java VisualVM之所以命名，是因为Java VisualVM可视地提供了有关JVM软件的信息。<br/><br/>Java VisualVM将多个监视，故障排除和性能分析实用程序组合到一个工具中。 例如，<strong>独立工具jmap，jinfo，jstat和jstack提供的大多数功能已集成到Java VisualVM中</strong>。 可以将其他功能（例如jconsole命令提供的功能）添加为可选插件。<br/><br/>Java VisualVM对Java应用程序开发人员进行应用程序故障排除以及监视和改善应用程序的性能很有用。 Java VisualVM使开发人员能够生成和分析堆转储，跟踪内存泄漏，执行和监视垃圾回收以及执行轻量级内存和CPU性能分析。 您可以使用插件扩展Java VisualVM功能。 例如，可通过MBeans选项卡和JConsole插件包装器插件来使用jconsole命令的大多数功能。 您可以从标准Java VisualVM插件的目录中选择，方法是依次选择“工具”和“ Java VisualVM”菜单中的“插件”。<br/><strong>在jVv的插件库中，可以安装btrace插件。安装后，可以在程序运行的过程中，直接进行代码更改。</strong></td></tr></tbody></table><hr><h3 id="2-2-监控JVM的工具"><a href="#2-2-监控JVM的工具" class="headerlink" title="2.2 监控JVM的工具"></a>2.2 监控JVM的工具</h3><h5 id="2-2-1-jps"><a href="#2-2-1-jps" class="headerlink" title="2.2.1 jps**"></a>2.2.1 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html#CHDCGECD">jps**</a></h5><p> <strong>jps是jdk提供的一个查看当前java进程的小工具，</strong> 可以看做是JavaVirtual Machine Process Status Tool的缩写。非常简单实用。</p><ul><li>命令的使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usage: jps [-help]</span><br><span class="line">       jps [options] [hostid]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br></pre></td></tr></table></figure><ul><li>options参数解析</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-q #仅输出VM标识符，不包括classname,jar name,arguments in main method </span><br><span class="line">-m #输出main method的参数 </span><br><span class="line">-l #输出完全的包名，应用主类名，jar的完全路径名 </span><br><span class="line">-v #输出jvm参数 </span><br><span class="line">-V #输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 </span><br><span class="line">-Joption #传递参数到vm,例如:-J-Xms512m</span><br></pre></td></tr></table></figure><ul><li>命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"></span><br><span class="line">13264 RemoteMavenServer</span><br><span class="line">23808 LiveApplication</span><br><span class="line">24552 Jps</span><br><span class="line">2552</span><br><span class="line">23852 Launcher</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps -l</span><br><span class="line"></span><br><span class="line">13264 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line">23808 com.guwukeji.live.LiveApplication</span><br><span class="line">22740 sun.tools.jps.Jps</span><br><span class="line">2552</span><br><span class="line">23852 org.jetbrains.jps.cmdline.Launcher</span><br></pre></td></tr></table></figure><h5 id="2-2-2-jstat"><a href="#2-2-2-jstat" class="headerlink" title="2.2.2 jstat***"></a>2.2.2 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html#BEHHGFAE">jstat***</a></h5><p>Jstat是JDK自带的一个轻量级小工具。主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对<strong>Heap size</strong>和<strong>垃圾回收状况</strong>的监控。可见，Jstat是轻量级的、专门针对JVM的工具，非常适用</p><ul><li>命令的使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lines：标题行之间的样本数；interval：统计间隔时长单位，默认毫秒；count：统计总行数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t:表示将时间戳（系统启动之后到现在的时间差）显示在第一列</span></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the local vm identifier for the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number for the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation for a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]</span><br><span class="line">                Where &lt;n&gt; is an integer and the suffix specifies the units as</span><br><span class="line">                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br></pre></td></tr></table></figure><ul><li>options参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-class #显示有关类加载器行为的统计信息。</span><br><span class="line">-compiler #显示有关Java HotSpot VM即时编译器行为的统计信息。</span><br><span class="line">-gc #显示有关垃圾收集堆的行为的统计信息。</span><br><span class="line">-gccapacity #堆内存统计</span><br><span class="line">-gccause #显示关于垃圾收集统计信息的摘要(与-gcutil相同)，以及最后一次垃圾收集事件和当前(如果适用)垃圾收集事件的原因。</span><br><span class="line">-gcmetacapacity #元数据空间统计</span><br><span class="line">-gcnew #新生代垃圾回收统计</span><br><span class="line">-gcnewcapacity #新生代内存空间统计</span><br><span class="line">-gcold #老年代垃圾回收统计</span><br><span class="line">-gcoldcapacity #老年代内存空间统计</span><br><span class="line">-gcutil #总结垃圾回收统计</span><br><span class="line">-printcompilation #显示Java HotSpot VM编译方法的统计信息</span><br></pre></td></tr></table></figure><ul><li>命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc -t -h3 23808 1s -1 </span><br><span class="line"></span><br><span class="line">Timestamp        S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">        93199.5 10752.0 512.0   0.0   160.0  126976.0 85702.0   146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">        93200.5 10752.0 512.0   0.0   160.0  126976.0 85702.0   146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">        93201.5 10752.0 512.0   0.0   160.0  126976.0 85702.0   146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">Timestamp        S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">        93202.5 10752.0 512.0   0.0   160.0  126976.0 85702.0   146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">        93203.5 10752.0 512.0   0.0   160.0  126976.0 85702.0   146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 23808 1s 3</span><br><span class="line"></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">10752.0 512.0   0.0   160.0  126976.0 103758.3  146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">10752.0 512.0   0.0   160.0  126976.0 103758.3  146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br><span class="line">10752.0 512.0   0.0   160.0  126976.0 103758.3  146944.0   38935.9   57216.0 54180.4 7808.0 7264.1     39    0.207   2      0.069    0.276</span><br></pre></td></tr></table></figure><ul><li>显示结果解析</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- <span class="variable constant_">S0C</span>：第一个幸存区的大小</span><br><span class="line">- <span class="variable constant_">S1C</span>：第二个幸存区的大小</span><br><span class="line">- <span class="variable constant_">S0U</span>：第一个幸存区的使用大小</span><br><span class="line">- <span class="variable constant_">S1U</span>：第二个幸存区的使用大小</span><br><span class="line">- <span class="variable constant_">EC</span>：伊甸园区的大小</span><br><span class="line">- <span class="variable constant_">EU</span>：伊甸园区的使用大小</span><br><span class="line">- <span class="variable constant_">OC</span>：老年代大小</span><br><span class="line">- <span class="variable constant_">OU</span>：老年代使用大小</span><br><span class="line">- <span class="variable constant_">MC</span>：方法区大小</span><br><span class="line">- <span class="variable constant_">MU</span>：方法区使用大小</span><br><span class="line">- <span class="attr">CCSC</span>:压缩类空间大小</span><br><span class="line">- <span class="attr">CCSU</span>:压缩类空间使用大小</span><br><span class="line">- <span class="variable constant_">YGC</span>：年轻代垃圾回收次数</span><br><span class="line">- <span class="variable constant_">YGCT</span>：年轻代垃圾回收消耗时间</span><br><span class="line">- <span class="variable constant_">FGC</span>：老年代垃圾回收次数</span><br><span class="line">- <span class="variable constant_">FGCT</span>：老年代垃圾回收消耗时间</span><br><span class="line">- <span class="variable constant_">GCT</span>：垃圾回收消耗总时间</span><br><span class="line">- <span class="variable constant_">NGCMN</span>：新生代最小容量</span><br><span class="line">- <span class="variable constant_">NGCMX</span>：新生代最大容量</span><br><span class="line">- <span class="variable constant_">NGC</span>：当前新生代容量</span><br></pre></td></tr></table></figure><h5 id="2-2-3-jstatd"><a href="#2-2-3-jstatd" class="headerlink" title="2.2.3 jstatd"></a>2.2.3 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstatd.html#BABEHFHF">jstatd</a></h5><p>jstatd是一个基于RMI（Remove Method Invocation）的服务程序，<strong>它用于监控基于HotSpot的JVM中资源的创建及销毁，并且提供了一个远程接口允许远程的监控工具连接到本地的JVM执行命令。</strong></p><p>jstatd是基于RMI的，所以在运行jstatd的服务器上必须存在RMI注册中心，如果没有通过选项”-p port”指定要连接的端口，jstatd会尝试连接RMI注册中心的默认端口。后面会谈到如何连接到一个默认的RMI内部注册中心，如何禁止默认的RMI内部注册中心的创建，以及如何启动一个外部注册中心</p><ul><li>options</li></ul><p>jstatd 命令行参数可以是任何顺序的，如果出现冗余或相互冲突的参数，最后一个参数优先。</p><p>-nr: 当没找到rmi registry服务，在jstatd内部不会试图创建rim registry.</p><p>-p:指定注册的rmi registry服务器端口，如果没有找到在此端口监听的registry服务，并且没有指定参数-nr，将会在jstatd内部以指定的端口创建registry.</p><p>-n rminame :指定绑定到rim registry中远程服务对象的名称，默认为JStatRemoteHost；如果同一台主机上同时运行了多个jstatd服务，rminame可以用于唯一确定一个jstatd服务；这里需要注意一下，如果开启了这个选项，那么监控客户端远程连接时，必须同时指定hostid及vmid，才可以唯一确定要连接的服务</p><p> -Joption: 用于传递jvm选项到由javac调用的java加载器中，例如，“-J-Xms48m”将把启动内存设置为48M，使用-J选项可以非常方便的向基于Java的开发的底层虚拟机应用程序传递参数。</p><h5 id="2-2-4-jmc"><a href="#2-2-4-jmc" class="headerlink" title="2.2.4 jmc"></a>2.2.4 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jmc.html#BCGGHHDD">jmc</a></h5><p>Java Mission Control requires a commercial license for use in production。具有商业许可证才能使用。</p><hr><h3 id="2-3-故障排查工具"><a href="#2-3-故障排查工具" class="headerlink" title="2.3 故障排查工具"></a>2.3 故障排查工具</h3><h5 id="2-3-1-jcmd"><a href="#2-3-1-jcmd" class="headerlink" title="2.3.1 jcmd***"></a>2.3.1 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jcmd.html#CIHEEDIB">jcmd***</a></h5><p>在JDK 1.7之后，新增了一个命令行工具jcmd。它是一个多功能工具，<strong>可以用来导出堆，查看java进程，导出线程信息，执行GC</strong>等。</p><p>jcmd实用程序用于将诊断命令请求发送到JVM。 <strong>它必须在运行JVM的同一台计算机上使用</strong>，并且必须具有用于启动JVM的相同有效用户和组标识符。</p><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Usage: jcmd &lt;pid | main class&gt; &lt;command ...|PerfCounter.print|-f file&gt;</span><br><span class="line">   or: jcmd -l</span><br><span class="line">   or: jcmd -h</span><br><span class="line"></span><br><span class="line">  command must be a valid jcmd command for the selected jvm.</span><br><span class="line">  Use the command &quot;help&quot; to see which commands are available.</span><br><span class="line">  If the pid is 0, commands will be sent to all Java processes.</span><br><span class="line">  The main class argument will be used to match (either partially</span><br><span class="line">  or fully) the class used to start Java.</span><br><span class="line">  If no options are given, lists Java processes (same as -p).</span><br><span class="line"></span><br><span class="line">  PerfCounter.print display the counters exposed by this process</span><br><span class="line">  -f  read and execute commands from the file</span><br><span class="line">  -l  list JVM processes on the local machine</span><br><span class="line">  -h  this help</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">jcmd 23808 help</span><br><span class="line"></span><br><span class="line">23808:</span><br><span class="line">The following commands are available:</span><br><span class="line">JFR.stop</span><br><span class="line">JFR.start</span><br><span class="line">JFR.dump</span><br><span class="line">JFR.check</span><br><span class="line">VM.native_memory</span><br><span class="line">VM.check_commercial_features</span><br><span class="line">VM.unlock_commercial_features</span><br><span class="line">ManagementAgent.stop</span><br><span class="line">ManagementAgent.start_local</span><br><span class="line">ManagementAgent.start</span><br><span class="line">GC.rotate_log</span><br><span class="line">Thread.print #打印出堆栈跟踪的线程</span><br><span class="line">GC.class_stats</span><br><span class="line">GC.class_histogram #打印存活对象，数据可能较多，可以将输出重定向到文件，占用最多内存的类在顶部列出，并且类以降序列出。</span><br><span class="line">GC.heap_dump #生成hprof文件，打印出堆内存信息</span><br><span class="line">GC.run_finalization</span><br><span class="line">GC.run</span><br><span class="line">VM.uptime #系统运行时间，单位秒</span><br><span class="line">VM.flags #系统启动参数</span><br><span class="line">VM.system_properties #虚拟机所有系统属性，可能数百行信息</span><br><span class="line">VM.command_line </span><br><span class="line">VM.version #打印完整的HotSpot和JDK版本ID</span><br><span class="line">help</span><br><span class="line"></span><br><span class="line">For more information about a specific command use &#x27;help &lt;command&gt;&#x27;.</span><br></pre></td></tr></table></figure><ul><li>命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Java进程,jps也具有此功能</span></span><br><span class="line">jcmd -l</span><br><span class="line"></span><br><span class="line">13264 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line">23376 sun.tools.jcmd.JCmd -l</span><br><span class="line">23808 com.guwukeji.live.LiveApplication</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看启动参数,jps也具有此功能 jps -lvm</span></span><br><span class="line">jcmd 23808 VM.flags</span><br><span class="line"></span><br><span class="line">23808:</span><br><span class="line">-XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:CICompilerCount=3 -XX:InitialHeapSize=266338304 -XX:+ManagementServer -XX:MaxHeapSize=4250927104 -XX:MaxNewSize=1416626176 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=88604672 -XX:OldSize=177733632 -XX:TieredStopAtLevel=1 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看存活对象,也可以使用jmap命令</span></span><br><span class="line">jcmd 23808 GC.class_histogram</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导出堆内存快照,jmap也可以导出【jmap -dump:live,file=demo.hprof】</span></span><br><span class="line">jcmd 23080 GC.heap_dump demo.hprof</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看线程栈,jstack也可以</span></span><br><span class="line">jcmd 23808 Thread.print</span><br></pre></td></tr></table></figure><h5 id="2-3-2-jinfo"><a href="#2-3-2-jinfo" class="headerlink" title="2.3.2 jinfo"></a>2.3.2 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jinfo.html#BCGEBFDD">jinfo</a></h5><p>jinfo命令显示指定的Java进程或核心文件或远程调试服务器的Java配置信息。 配置信息包括Java系统属性和Java虚拟机（JVM）命令行标志。 如果指定的进程在64位JVM上运行，则可能需要指定-J-d64选项，例如：jinfo -J-d64 -sysprops pid。</p><p>此实用程序不受支持，在以后的JDK版本中可能不可用。 </p><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br></pre></td></tr></table></figure><h5 id="2-3-3-jhat"><a href="#2-3-3-jhat" class="headerlink" title="2.3.3 jhat***"></a>2.3.3 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jhat.html#CIHHJAGE">jhat***</a></h5><p>hat命令解析Java堆转储文件并启动Web服务器。 通过jhat命令，您可以使用自己喜欢的Web浏览器浏览堆转储。 jhat命令支持预先设计的查询，例如显示已知类MyClass的所有实例和对象查询语言（OQL）。 OQL与SQL类似，除了查询堆转储。 可从jhat命令显示的OQL帮助页面获得OQL帮助。 使用默认端口，可以从http：&#x2F;&#x2F; localhost：7000 &#x2F; oqlhelp &#x2F;获得OQL帮助。</p><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Usage:  jhat [-stack &lt;bool&gt;] [-refs &lt;bool&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;int&gt;] [-version] [-h|-help] &lt;file&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">stack:关闭跟踪对象分配调用堆栈,默认开启；refs:关闭对对象引用的跟踪,默认开启；</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-J:如果显示内存不够用，可以自定义JVM堆内存大小</span></span><br><span class="line"></span><br><span class="line">        -J&lt;flag&gt;          Pass &lt;flag&gt; directly to the runtime system. For</span><br><span class="line">                          example, -J-mx512m to use a maximum heap size of 512MB</span><br><span class="line">        -stack false:     Turn off tracking object allocation call stack.</span><br><span class="line">        -refs false:      Turn off tracking of references to objects</span><br><span class="line">        -port &lt;port&gt;:     Set the port for the HTTP server.  Defaults to 7000</span><br><span class="line">        -exclude &lt;file&gt;:  Specify a file that lists data members that should</span><br><span class="line">                          be excluded from the reachableFrom query.</span><br><span class="line">        -baseline &lt;file&gt;: Specify a baseline object dump.  Objects in</span><br><span class="line">                          both heap dumps with the same ID and same class will</span><br><span class="line">                          be marked as not being &quot;new&quot;.</span><br><span class="line">        -debug &lt;int&gt;:     Set debug level.</span><br><span class="line">                            0:  No debug output</span><br><span class="line">                            1:  Debug hprof file parsing</span><br><span class="line">                            2:  Debug hprof file parsing, no server</span><br><span class="line">        -version          Report version number</span><br><span class="line">        -h|-help          Print this help and exit</span><br><span class="line">        &lt;file&gt;            The file to read</span><br></pre></td></tr></table></figure><ul><li>命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jhat -J-Xmx200M demo.hprof</span><br><span class="line"></span><br><span class="line">Reading from demo.hprof...</span><br><span class="line">Dump file created Fri May 08 14:45:09 CST 2020</span><br><span class="line">Snapshot read, resolving...</span><br><span class="line">Resolving 537895 objects...</span><br><span class="line">Chasing references, expect 107 dots...........................................................................................................</span><br><span class="line">Eliminating duplicate references...........................................................................................................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure><h5 id="2-3-4-jmap"><a href="#2-3-4-jmap" class="headerlink" title="2.3.4 jmap**"></a>2.3.4 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jmap.html#CEGCECJB">jmap**</a></h5><p><strong>Note:</strong> This utility is <strong>unsupported</strong> and might not be available in future releases of the JDK. </p><p><strong>jmap命令打印指定进程，核心文件或远程调试服务器的共享对象内存映射或堆内存详细信息。</strong> 如果指定的进程在64位Java虚拟机（JVM）上运行，则可能需要指定-J-d64选项，例如：jmap -J-d64 -heap pid。</p><p>注意：此实用程序不受支持，在以后的JDK版本中可能不可用。</p><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the &quot;live&quot;</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The &quot;live&quot; suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br></pre></td></tr></table></figure><ul><li>options参数说明</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-heap #打印Java堆概要信息，包括使用的GC算法、堆配置参数和各代中堆内存使用情况；</span><br><span class="line">-histo[:live] #打印Java堆中对象直方图，通过该图可以获取每个class的对象数目，占用内存大小和类全名信息，带上:live，则只统计活着的对象；</span><br><span class="line">-permstat #打印永久代统计信息；</span><br><span class="line">-finalizerinfo #打印等待回收的对象信息</span><br><span class="line">-dump:[live,] format=b, file=filename #以hprof二进制格式将Java堆信息输出到文件内，该文件可以用MAT、VisualVM或jhat等工具查看；</span><br></pre></td></tr></table></figure><ul><li>命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=demo2.hprof 23808</span><br><span class="line"></span><br><span class="line">Dumping heap to D:\ide_file\snow\demo2.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><p>注意：jmap -dump:live,format&#x3D;b,file&#x3D;a.log pid 执行这个命令，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用</p><h5 id="2-3-5-jsadebugd"><a href="#2-3-5-jsadebugd" class="headerlink" title="2.3.5 jsadebugd"></a>2.3.5 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jsadebugd.html#BHBCGGGH">jsadebugd</a></h5><h5 id="2-3-6-jstack"><a href="#2-3-6-jstack" class="headerlink" title="2.3.6 jstack**"></a>2.3.6 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstack.html#BABGJDIF">jstack**</a></h5><p><strong>jstack命令为指定的Java进程，核心文件或远程调试服务器打印Java线程的Java堆栈跟踪</strong>。 对于每个Java框架，将打印完整的类名，方法名，字节码索引（BCI）和行号（如果有）。 使用-m选项，jstack命令可使用程序计数器（PC）来打印所有线程的Java和本机帧。 对于每个本机帧，将打印最接近PC的本机符号（如果有）。 C ++杂乱无章的名称不会被删除。 要对C ++名称进行拆散，可以将此命令的输出通过管道传递到c ++ filt。 当指定的进程在64位Java虚拟机上运行时，您可能需要指定-J-d64选项，例如：jstack -J-d64 -m pid。</p><p>如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行的java程序的java stack和native stack的信息, 如果现在运行的java程序呈现hung的状态，jstack是非常有用的。</p><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-F:当’jstack [-l] pid’没有相应的时候强制打印栈信息</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-l:长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-m:打印java和native c/c++框架的所有栈信息.</span></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br></pre></td></tr></table></figure><hr><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/liuxinghao/article/details/70805900">JDK 工具一览</a><br><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/">Java Platform, Standard Edition Tools Reference(Java平台,标准版工具参考)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK工具 </tag>
            
            <tag> jconsole </tag>
            
            <tag> jvisualvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈各种代理</title>
      <link href="/posts/e99d6679/"/>
      <url>/posts/e99d6679/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h3><p>一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术。</p><h5 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1  概念"></a>1.1  概念</h5><p>正向代理是一个位于客户端【用户A】和原始服务器【服务器B】之间的服务器【代理服务器Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标（服务器B），然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别设置才能使用正向代理</p><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15241947274796.jpg" alt="img"></p><h5 id="1-2-主要作用"><a href="#1-2-主要作用" class="headerlink" title="1.2 主要作用"></a>1.2 主要作用</h5><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15241948842651.jpg" alt="img"></p><ul><li><strong>访问本无法访问的服务器 B</strong></li></ul><p>我们抛除复杂的网络路由情节来看上图，假设图中路由器从左到右命名为 R1、R2。假设最初用户 A 要访问服务器 B 需要经过 R1 和 R2 路由器这样一个路由节点，如果路由器 R1 或者路由器 R2 发生故障，那么就无法访问服务器 B 了。但是如果用户 A 让代理服务器 Z 去代替自己访问服务器 B，由于代理服务器 Z 没有在路由器 R1 或 R2 节点中，而是通过其它的路由节点访问服务器 B，那么用户 A 就可以得到服务器 B 的数据了。 现实中的例子就是“翻墙”。不过自从 VPN 技术被广泛应用外，“翻墙”不但使用了传统的正向代理技术，有的还使用了 VPN 技术。</p><ul><li><strong>加速访问服务器 B</strong></li></ul><p>这种说法目前不像以前那么流行了，主要是带宽流量的飞速发展。早期的正向代理中，很多人使用正向代理就是提速。假设用户 A 到服务器 B，经过 R1 路由器和 R2 路由器，而 R1 到 R2 路由器的链路是一个低带宽链路。而用户 A 到代理服务器 Z，从代理服务器 Z 到服务器 B 都是高带宽链路。那么很显然就可以加速访问服务器B了。 </p><ul><li><strong>Cache 作用</strong></li></ul><p>Cache（缓存）技术和代理服务技术是紧密联系的（不光是正向代理，反向代理也使用了Cache（缓存）技术。还如上图所示，如果在用户 A 访问服务器 B 某数据 J 之前，已经有人通过代理服务器 Z 访问过服务器 B 上得数据 J，那么代理服务器 Z 会把数据 J 保存一段时间，如果有人正好取该数据 J，那么代理服务器 Z 不再访问服务器 B，而把缓存的数据 J 直接发给用户 A。这一技术在 Cache 中术语就叫 Cache 命中。如果有更多的像用户 A 的用户来访问代理服务器 Z，那么这些用户都可以直接从代理服务器 Z 中取得数据 J，而不用千里迢迢的去服务器 B 下载数据了。</p><ul><li><strong>客户端访问授权</strong></li></ul><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242000241694.jpg" alt="img"></p><p>这方面的内容现今使用的还是比较多的，例如一些公司采用 ISA SERVER 做为正向代理服务器来授权用户是否有权限访问互联网，如下图：防火墙作为网关，用来过滤外网对其的访问。假设用户 A 和用户 B 都设置了代理服务器，用户 A 允许访问互联网，而用户 B 不允许访问互联网（这个在代理服务器 Z 上做限制）这样用户 A 因为授权，可以通过代理服务器访问到服务器 B，而用户 B 因为没有被代理服务器 Z 授权，所以访问服务器 B 时，数据包会被直接丢弃。</p><ul><li><strong>隐藏访问者的行踪</strong></li></ul><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242000951726.jpg" alt="img"></p><p>我们可以看出服务器 B 并不知道访问自己的实际是用户 A，因为代理服务器 Z 代替用户 A 去直接与服务器 B 进行交互。如果代理服务器 Z 被用户 A 完全控制（或不完全控制），会惯以“肉鸡”术语称呼：</p><p>我们总结一下，正向代理是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的 IP 地址，还有代理程序的端口。</p><h3 id="2-反向代理（reverse-proxy）"><a href="#2-反向代理（reverse-proxy）" class="headerlink" title="2.反向代理（reverse proxy）"></a>2.反向代理（reverse proxy）</h3><h5 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h5><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，接着反向代理将判断向何处（原始服务器）转交请求，并将获得的内容返回给客户端</p><h5 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2.2 作用"></a>2.2 作用</h5><ul><li><strong>保护和隐藏原始资源服务器</strong></li></ul><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242001800235.jpg" alt="img"></p><p>用户 A 始终认为它访问的是原始服务器 B 而不是代理服务器 Z，但实用际上反向代理服务器接受用户 A 的应答，从原始资源服务器 B 中取得用户 A 的需求资源，然后发送给用户 A。由于防火墙的作用，只允许代理服务器 Z 访问原始资源服务器 B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器 B，但用户 A 并不知情。</p><ul><li><strong>负载均衡</strong></li></ul><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242002227687.jpg" alt="img"></p><p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。 当然反向代理服务器像正向代理服务器一样拥有 Cache 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。</p><h3 id="3-正向代理-VS-反向代理"><a href="#3-正向代理-VS-反向代理" class="headerlink" title="3.正向代理 VS 反向代理"></a>3.正向代理 VS 反向代理</h3><p>这里我们并不深入讲解 CDN，所以去掉了 CDN 最关键的核心技术智能 DNS。只是展示 CDN 技术实际上利用的正是反向代理原理这块。 反向代理结论与正向代理正好相反，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，接着反向代理将判断向何处（原始服务器）转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。 基本上，网上做正反向代理的程序很多，能做正向代理的软件大部分也可以做反向代理。开源软件中最流行的就是 Squid，既可以做正向代理，也有很多人用来做反向代理的前端服务器。另外 MS ISA 也可以用来在Windows 平台下做正向代理。反向代理中最主要的实践就是 Web 服务，近些年来最火的就是 Nginx 了。网上有人说 Nginx 不能做正向代理，其实是不对的。Nginx 也可以做正向代理，不过用的人比较少了。 为了更加形象地对比正向代理和反向代理，学院君在<a href="https://www.zhihu.com/question/24723688">知乎</a>上找到一张很形象的图片：</p><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242004236931.jpg" alt="img"></p><ul><li>正向代理中，代理和客户端同属一个 LAN，对服务端透明；</li><li>反向代理中，代理和服务端同属一个 LAN，对客户端透明。</li></ul><p>或者，还有一句精辟的顺口溜：正向代理代理客户端，反向代理代理服务器。</p><h3 id="4-透明代理"><a href="#4-透明代理" class="headerlink" title="4.透明代理"></a>4.透明代理</h3><p>透明代理的意思是客户端根本不需要知道有代理服务器的存在，它改变你的请求报文，并会传送真实IP。透明代理实践的例子就是时下很多公司使用的行为管理软件：</p><p><img src="/files/image/post/%E6%B5%85%E8%B0%88%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/15242006237252.jpg" alt="img"></p><p>用户 A 和用户 B 并不知道行为管理设备充当透明代理行为，当用户 A 或用户 B 向服务器 A 或服务器 B 提交请求的时候，透明代理设备根据自身策略拦截并修改用户 A 或 B 的报文，并作为实际的请求方，向服务器 A 或 B 发送请求，当接收信息回传，透明代理再根据自身的设置把允许的报文发回至用户 A 或 B，如上图，如果透明代理设置不允许访问服务器 B，那么用户 A 或者用户 B 就不会得到服务器 B 的数据。</p><p>摘自：<a href="https://xueyuanjun.com/post/9336.html">图解正向代理、反向代理、透明代理：可能是你见过的讲解最透彻的代理技术教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正向代理 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇第一季</title>
      <link href="/posts/77a71401/"/>
      <url>/posts/77a71401/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1 Java基础"></a>1 Java基础</h3><h4 id="1-1-一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"><a href="#1-1-一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？" class="headerlink" title="1.1 一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"></a>1.1 一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？</h4><p>可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</p><h4 id="1-2-Java有没有goto"><a href="#1-2-Java有没有goto" class="headerlink" title="1.2 Java有没有goto?"></a>1.2 Java有没有goto?</h4><p>java中的保留字，现在没有在java中使用。</p><h4 id="1-3-amp-、-amp-amp"><a href="#1-3-amp-、-amp-amp" class="headerlink" title="1.3 &amp; 、&amp;&amp;"></a>1.3 &amp; 、&amp;&amp;</h4><p>&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式.<br>&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。</p><p>备注：这道题先说两者的共同点，再说出&amp;&amp;和&amp;的特殊之处，并列举一些经典的例子来表明自己理解透彻深入、实际经验丰富。</p><h4 id="1-4-在JAVA中如何跳出当前的多重嵌套循环"><a href="#1-4-在JAVA中如何跳出当前的多重嵌套循环" class="headerlink" title="1.4 在JAVA中如何跳出当前的多重嵌套循环"></a>1.4 在JAVA中如何跳出当前的多重嵌套循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在外面的循环语句前定义一个标号</span></span><br><span class="line"> ok:</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;  <span class="number">100</span>; j++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">break</span> ok;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//让外层的循环条件表达式的结果可以受到里层循环体代码的控制</span></span><br><span class="line"> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span> &amp;&amp; !flag; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (j == <span class="number">1</span>)&#123;</span><br><span class="line">             flag = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-switch"><a href="#1-5-switch" class="headerlink" title="1.5 switch"></a>1.5 switch</h4><p>1、可以接受的类型有char byte short int 及其包装类、String和enum<br>2、如果有多个case字句，当其中一个满足条件后，后面的case字句不再做判断，直到遇见break关键字跳出switch</p><h4 id="1-6-short-s1-x3D-1-s1-x3D-s1-1-有什么错-short-s1-x3D-1-s1-x3D-1-有什么错"><a href="#1-6-short-s1-x3D-1-s1-x3D-s1-1-有什么错-short-s1-x3D-1-s1-x3D-1-有什么错" class="headerlink" title="1.6 short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有什么错? short s1 &#x3D; 1; s1 +&#x3D; 1;有什么错?"></a>1.6 short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有什么错? short s1 &#x3D; 1; s1 +&#x3D; 1;有什么错?</h4><p>对于short s1 &#x3D; 1; s1 &#x3D; s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br>对于short s1 &#x3D; 1; s1 +&#x3D; 1;由于 +&#x3D; 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。</p><h4 id="1-7-char型变量中能不能存贮一个中文汉字-为什么"><a href="#1-7-char型变量中能不能存贮一个中文汉字-为什么" class="headerlink" title="1.7 char型变量中能不能存贮一个中文汉字?为什么?"></a>1.7 char型变量中能不能存贮一个中文汉字?为什么?</h4><p>char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。<br>补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p><p>备注：后面一部分回答虽然不是在正面回答题目，但是，为了展现自己的学识和表现自己对问题理解的透彻深入，可以回答一些相关的知识，做到知无不言，言无不尽。</p><h4 id="1-8-用最有效率的方法算出2乘以8等於几"><a href="#1-8-用最有效率的方法算出2乘以8等於几" class="headerlink" title="1.8 用最有效率的方法算出2乘以8等於几?"></a>1.8 用最有效率的方法算出2乘以8等於几?</h4><p>2 &lt;&lt; 3，<br>因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，2乘以8等於几的最效率的方法是2 &lt;&lt; 3。</p><h4 id="1-9-请设计一个一百亿的计算器"><a href="#1-9-请设计一个一百亿的计算器" class="headerlink" title="1.9 请设计一个一百亿的计算器"></a>1.9 请设计一个一百亿的计算器</h4><p>首先要明白这道题目的考查点是什么，一是大家首先要对计算机原理的底层细节要清楚、要知道加减法的位运算原理和知道计算机中的算术运算会发生越界的情况，二是要具备一定的面向对象的设计思想。<br>首先，计算机中用固定数量的几个字节来存储的数值，所以计算机中能够表示的数值是有一定的范围的，为了便于讲解和理解，我们先以byte类型的整数为例，它用1个字节进行存储，表示的最大数值范围为-128到+127。-1在内存中对应的二进制数据为11111111，如果两个-1相加，不考虑Java运算时的类型提升，运算后会产生进位，二进制结果为1,11111110，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为11111110，也就是-2，这正好利用溢位的方式实现了负数的运算。-128在内存中对应的二进制数据为10000000，如果两个-128相加，不考虑Java运算时的类型提升，运算后会产生进位，二进制结果为1,00000000，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为00000000，也就是0，这样的结果显然不是我们期望的，这说明计算机中的算术运算是会发生越界情况的，两个数值的运算结果不能超过计算机中的该类型的数值范围。由于Java中涉及表达式运算时的类型自动提升，我们无法用byte类型来做演示这种问题和现象的实验，大家可以用下面一个使用整数做实验的例子程序体验一下：<br>          int a &#x3D; Integer.MAX_VALUE;<br>          int b &#x3D; Integer.MAX_VALUE;<br>          int sum &#x3D; a + b;<br>          System.out.println(“a&#x3D;”+a+”,b&#x3D;”+b+”,sum&#x3D;”+sum);</p><p>先不考虑long类型，由于int的正数范围为2的31次方，表示的最大数值约等于2<em>1000</em>1000*1000，也就是20亿的大小，所以，要实现一个一百亿的计算器，我们得自己设计一个类可以用于表示很大的整数，并且提供了与另外一个整数进行加减乘除的功能，大概功能如下：<br>（1）这个类内部有两个成员变量，一个表示符号，另一个用字节数组表示数值的二进制数<br>（2）有一个构造方法，把一个包含有多位数值的字符串转换到内部的符号和字节数组中<br>（3）提供加减乘除的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigInteger</span>&#123;</span><br><span class="line">    <span class="type">int</span> sign;</span><br><span class="line">    <span class="type">byte</span>[] val;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Biginteger</span><span class="params">(String val)</span> &#123;</span><br><span class="line">        sign= ;</span><br><span class="line">        val= ;</span><br><span class="line">    &#125;</span><br><span class="line">    publicBigInteger <span class="title function_">add</span><span class="params">(BigInteger other)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    publicBigInteger <span class="title function_">subtract</span><span class="params">(BigInteger other)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    publicBigInteger <span class="title function_">multiply</span><span class="params">(BigInteger other)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    publicBigInteger <span class="title function_">divide</span><span class="params">(BigInteger other)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：要想写出这个类的完整代码，是非常复杂的，如果有兴趣的话，可以参看jdk中自带的java.math.BigInteger类的源码。面试的人也知道谁都不可能在短时间内写出这个类的完整代码的，他要的是你是否有这方面的概念和意识，他最重要的还是考查你的能力，所以，你不要因为自己无法写出完整的最终结果就放弃答这道题，你要做的就是你比别人写得多，证明你比别人强，你有这方面的思想意识就可以了，毕竟别人可能连题目的意思都看不懂，什么都没写，你要敢于答这道题，即使只答了一部分，那也与那些什么都不懂的人区别出来，拉开了距离，算是矮子中的高个，机会当然就属于你了。另外，答案中的框架代码也很重要，体现了一些面向对象设计的功底，特别是其中的方法命名很专业，用的英文单词很精准，这也是能力、经验、专业性、英语水平等多个方面的体现，会给人留下很好的印象，在编程能力和其他方面条件差不多的情况下，英语好除了可以使你获得更多机会外，薪水可以高出一千元。</p><h4 id="1-10-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"><a href="#1-10-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？" class="headerlink" title="1.10 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"></a>1.10 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用final关键字修饰一个变量时，是指引用变量不能变，</span></span><br><span class="line"><span class="comment">//引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</span></span><br><span class="line"><span class="keyword">final</span> StringBuffer a=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="comment">//执行如下语句将报告编译期错误：</span></span><br><span class="line">a=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//但是，执行如下语句则可以通过编译：</span></span><br><span class="line">a.append(<span class="string">&quot; broken!&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象：</span></span><br><span class="line">publicvoid <span class="title function_">method</span><span class="params">(<span class="keyword">final</span>  StringBuffer  param)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际上，这是办不到的，在该方法内部仍然可以增加如下代码来修改参数对象：</span></span><br><span class="line">param.append(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-11-“-x3D-x3D-”和equals方法究竟有什么区别？"><a href="#1-11-“-x3D-x3D-”和equals方法究竟有什么区别？" class="headerlink" title="1.11 “&#x3D;&#x3D;”和equals方法究竟有什么区别？"></a>1.11 “&#x3D;&#x3D;”和equals方法究竟有什么区别？</h4><p>&#x3D;&#x3D;操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用&#x3D;&#x3D;操作符。<br>如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如Objet obj &#x3D; new Object();变量obj是一个内存，new Object()是另一个内存，此时，变量obj所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用&#x3D;&#x3D;操作符进行比较。</p><p>equals方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。例如，对于下面的代码：<br>String a&#x3D;new String(“foo”);<br>String b&#x3D;new String(“foo”);<br>两条new语句创建了两个对象，然后用a,b这两个变量分别指向了其中一个对象，这是两个不同的对象，它们的首地址是不同的，即a和b中存储的数值是不相同的，所以，表达式a&#x3D;&#x3D;b将返回false，而这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。<br>在实际开发中，我们经常要比较传递进行来的字符串内容是否等，例如，String input &#x3D; …;input.equals(“quit”)，许多人稍不注意就使用&#x3D;&#x3D;进行比较了，这是错误的，随便从网上找几个项目实战的教学视频看看，里面就有大量这样的错误。记住，字符串的比较基本上都是使用equals方法。<br>如果一个类没有自己定义equals方法，那么它将继承Object类的equals方法，Object类的equals方法的实现代码如下：<br>boolean equals(Object o){<br>return this&#x3D;&#x3D;o;<br>}<br>这说明，如果一个类没有自己定义equals方法，它默认的equals方法（从Object 类继承的）就是使用&#x3D;&#x3D;操作符，也是在比较两个变量指向的对象是否是同一对象，这时候使用equals和使用&#x3D;&#x3D;会得到同样的结果，如果比较的是两个独立的对象则总返回false。如果你编写的类希望能够比较该类创建的两个实例对象的内容是否相同，那么你必须覆盖equals方法，由你自己写代码来决定在什么情况即可认为两个对象的内容是相同的。</p><h4 id="1-12-静态变量和实例变量的区别？"><a href="#1-12-静态变量和实例变量的区别？" class="headerlink" title="1.12 静态变量和实例变量的区别？"></a>1.12 静态变量和实例变量的区别？</h4><p>在语法定义上的区别：静态变量前要加static关键字，而实例变量前则不加。<br>在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如，对于下面的程序，无论创建多少个实例对象，永远都只分配了一个staticVar变量，并且每创建一个实例对象，这个staticVar就会加1；但是，每创建一个实例对象，就会分配一个instanceVar，即可能分配多个instanceVar，并且每个instanceVar的值都只自加了1次。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariantTest</span>&#123;</span><br><span class="line">    publicstatic <span class="type">int</span> <span class="variable">staticVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">publicint</span> <span class="variable">instanceVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    publicVariantTest()&#123;</span><br><span class="line">        staticVar++;</span><br><span class="line">        instanceVar++;</span><br><span class="line">        System.out.println(“staticVar=”+ staticVar + ”,instanceVar=” + instanceVar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：这个解答除了说清楚两者的区别外，最后还用一个具体的应用例子来说明两者的差异，体现了自己有很好的解说问题和设计案例的能力，思维敏捷，超过一般程序员，有写作能力！</p><h4 id="1-13-是否可以从一个static方法内部发出对非static方法的调用？"><a href="#1-13-是否可以从一个static方法内部发出对非static方法的调用？" class="headerlink" title="1.13 是否可以从一个static方法内部发出对非static方法的调用？"></a>1.13 是否可以从一个static方法内部发出对非static方法的调用？</h4><p>不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。</p><h4 id="1-14-Integer与int的区别"><a href="#1-14-Integer与int的区别" class="headerlink" title="1.14 Integer与int的区别"></a>1.14 Integer与int的区别</h4><p>int是java提供的8种原始数据类型之一。Java为每个原始类型提供了封装类，Integer是java为int提供的封装类。int的默认值为0，而Integer的默认值为null，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况<br>例如，要想表达出没有参加考试和考试成绩为0的区别，则只能使用Integer。在JSP开发中，Integer的默认为null，所以用el表达式在文本框中显示时，值为空白字符串，而int默认的默认值为0，所以用el表达式在文本框中显示时，结果为0，所以，int不适合作为web层的表单数据的类型。<br>在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。<br>另外，Integer提供了多个与整数相关的操作方法，例如，将一个字符串转换成整数，Integer中还定义了表示整数的最大值和最小值的常量。</p><h4 id="1-15-Math-round-11-5-等於多少-Math-round-11-5-等於多少"><a href="#1-15-Math-round-11-5-等於多少-Math-round-11-5-等於多少" class="headerlink" title="1.15 Math.round(11.5)等於多少? Math.round(-11.5)等於多少?"></a>1.15 Math.round(11.5)等於多少? Math.round(-11.5)等於多少?</h4><p>Math类中提供了三个与取整有关的方法：ceil、floor、round，这些方法的作用与它们的英文名称的含义相对应，例如，ceil的英文意义是天花板，该方法就表示向上取整，Math.ceil(11.3)的结果为12,Math.ceil(-11.3)的结果是-11；<br>floor的英文意义是地板，该方法就表示向下取整，Math.ceil(11.6)的结果为11,Math.ceil(-11.6)的结果是-12；<br>最难掌握的是round方法，它表示“四舍五入”，算法为Math.floor(x+0.5)，即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11。</p><h4 id="1-16-下面的代码有什么不妥之处"><a href="#1-16-下面的代码有什么不妥之处" class="headerlink" title="1.16 下面的代码有什么不妥之处?"></a>1.16 下面的代码有什么不妥之处?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(username.equals(“zxx”)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x==<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="1-17-请说出作用域public，private，protected，以及不写时的区别"><a href="#1-17-请说出作用域public，private，protected，以及不写时的区别" class="headerlink" title="1.17 请说出作用域public，private，protected，以及不写时的区别"></a>1.17 请说出作用域public，private，protected，以及不写时的区别</h4><p>这四个作用域的可见范围如下表所示。<br>说明：如果在修饰的元素上面没有写任何访问修饰符，则表示friendly。</p><table><thead><tr><th>作用域</th><th>当前类</th><th>同一package</th><th>子孙类</th><th>其他package</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注：只要记住了有4种访问权限，4个访问范围，然后将全选和范围在水平和垂直方向上分别按排从小到大或从大到小的顺序排列，就很容易画出上面的图了。</p><h4 id="1-18-Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型"><a href="#1-18-Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型" class="headerlink" title="1.18 Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?"></a>1.18 Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?</h4><p>Overload是重载的意思，Override是覆盖的意思，也就是重写。<br>重载Overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。<br>重写Override表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法是private类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法。<br>至于Overloaded的方法是否可以改变返回值的类型这个问题，要看你倒底想问什么呢？这个题目很模糊。如果几个Overloaded的方法的参数列表不一样，它们的返回者类型当然也可以不一样。但我估计你想问的问题是：如果两个方法的参数列表完全一样，是否可以让它们的返回值不同来实现重载Overload。这是不行的，我们可以用反证法来说明这个问题，因为我们有时候调用一个方法时也可以不定义返回结果变量，即不要关心其返回结果，例如，我们调用map.remove(key)方法时，虽然remove方法有返回值，但是我们通常都不会定义接收返回结果的变量，这时候假设该类中有两个名称和参数列表完全相同的方法，仅仅是返回类型不同，java就无法确定编程者倒底是想调用哪个方法了，因为它无法通过返回结果类型来判断。</p><p>override可以翻译为覆盖，从字面就可以知道，它是覆盖了一个方法并且对其重写，以求达到不同的作用。对我们来说最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。在覆盖要注意以下的几点：<br>1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；<br>2、覆盖的方法的返回值必须和被覆盖的方法的返回一致；<br>3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；<br>4、被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。<br>overload对我们来说可能比较熟悉，可以翻译为重载，它是指我们可以定义一些名称相同的方法，通过定义不同的输入参数来区分这些方法，然后再调用时，VM就会根据不同的参数样式，来选择合适的方法执行。在使用重载要注意以下的几点：<br>1、在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是fun(int,float)，但是不能为fun(int,int)）；<br>2、不能通过访问权限、返回类型、抛出的异常进行重载；<br>3、方法的异常类型和数目不会对重载造成影响；<br>4、对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。</p><p>注意：子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题<br>对于这句话应该应该加一句：子类可以抛出任意免检异常</p><h4 id="1-19-构造器Constructor是否可被override"><a href="#1-19-构造器Constructor是否可被override" class="headerlink" title="1.19 构造器Constructor是否可被override?"></a>1.19 构造器Constructor是否可被override?</h4><p>构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。</p><h4 id="1-20-接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class-抽象类中是否可以有静态的main方法？"><a href="#1-20-接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class-抽象类中是否可以有静态的main方法？" class="headerlink" title="1.20 接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？"></a>1.20 接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？</h4><p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承具体类。抽象类中可以有静态的main方法。<br>备注：只要明白了接口和抽象类的本质和作用，这些问题都很好回答，你想想，如果你是java语言的设计者，你是否会提供这样的支持，如果不提供的话，有什么理由吗？如果你没有道理不提供，那答案就是肯定的了。<br>只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。</p><h4 id="1-21-写clone-方法时，通常都有一行代码，是什么？"><a href="#1-21-写clone-方法时，通常都有一行代码，是什么？" class="headerlink" title="1.21 写clone()方法时，通常都有一行代码，是什么？"></a>1.21 写clone()方法时，通常都有一行代码，是什么？</h4><p>clone 有缺省行为，super.clone();因为首先要把父类中的成员复制到位，然后才是复制自己的成员。</p><h4 id="1-22-面向对象的特征有哪些方面"><a href="#1-22-面向对象的特征有哪些方面" class="headerlink" title="1.22 面向对象的特征有哪些方面"></a>1.22 面向对象的特征有哪些方面</h4><p>计算机软件系统是现实生活中的业务在计算机中的映射，而现实生活中的业务其实就是一个个对象协作的过程。面向对象编程就是按现实业务一样的方式将程序代码按一个个对象进行组织和编写，让计算机系统能够识别和理解用对象方式组织和编写的程序代码，这样就可以把现实生活中的业务对象映射到计算机系统中。<br>面向对象的编程语言有封装、继承、抽象、多态等4个主要的特征。</p><h5 id="1、封装"><a href="#1、封装" class="headerlink" title="1、封装"></a>1、封装</h5><p>封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。面向对象的封装就是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，行为用方法进行定义，方法可以直接访问同一个对象中的属性。通常情况下，只要记住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，只有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。把握一个原则：把对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同一个类中。<br>例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。</p><p>例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。</p><h5 id="2、抽象"><a href="#2、抽象" class="headerlink" title="2、抽象"></a>2、抽象</h5><p>抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象。抽象包括行为抽象和状态抽象两个方面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Person类，如下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>人本来是很复杂的事物，有很多方面，但因为当前系统只需要了解人的姓名和年龄，所以上面定义的类中只包含姓名和年龄这两个属性，这就是一种抽像，使用抽象可以避免考虑一些与目标无关的细节。我对抽象的理解就是不要用显微镜去看一个事物的所有方面，这样涉及的内容就太多了，而是要善于划分问题的边界，当前系统需要什么，就只考虑什么。</p><h5 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h5><p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。</p><h5 id="4、多态"><a href="#4、多态" class="headerlink" title="4、多态"></a>4、多态</h5><p>多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性增强了软件的灵活性和扩展性。</p><p>例如，下面代码中的UserDao是一个接口，它定义引用变量userDao指向的实例对象由daofactory.getDao()在执行的时候返回，有时候指向的是UserJdbcDao这个实现，有时候指向的是UserHibernateDao这个实现，这样，不用修改源代码，就可以改变userDao指向的具体类实现，从而导致userDao.insertUser()方法调用的具体代码也随之改变，即有时候调用的是UserJdbcDao的insertUser方法，有时候调用的是UserHibernateDao的insertUser方法：<br>UserDao userDao &#x3D; daofactory.getDao(); <br>userDao.insertUser(user);</p><h4 id="1-23-java中实现多态的机制是什么？"><a href="#1-23-java中实现多态的机制是什么？" class="headerlink" title="1.23 java中实现多态的机制是什么？"></a>1.23 java中实现多态的机制是什么？</h4><p>靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。</p><h4 id="1-24-abstract-class和interface有什么区别"><a href="#1-24-abstract-class和interface有什么区别" class="headerlink" title="1.24 abstract class和interface有什么区别?"></a>1.24 abstract class和interface有什么区别?</h4><h5 id="1、概念上的区别："><a href="#1、概念上的区别：" class="headerlink" title="1、概念上的区别："></a>1、概念上的区别：</h5><p>含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。<br>接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。</p><h5 id="2、语法上的区别："><a href="#2、语法上的区别：" class="headerlink" title="2、语法上的区别："></a>2、语法上的区别：</h5><p>（1.抽象类可以有构造方法，接口中不能有构造方法。<br>（2.抽象类中可以有普通成员变量，接口中没有普通成员变量<br>（3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。</p><p>（4.抽象类中的抽象方法的访问类型可以是public，protected和默认类型，但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。</p><p>（5.抽象类中可以包含静态方法，接口中不能包含静态方法</p><p>（6.抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。<br>（7.一个类可以实现多个接口，但只能继承一个抽象类。</p><h5 id="3、应用上的区别："><a href="#3、应用上的区别：" class="headerlink" title="3、应用上的区别："></a>3、应用上的区别：</h5><p>接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用，例如，模板方法设计模式是抽象类的一个典型应用，假设某个项目的所有Servlet类都要用相同的方式进行权限判断、记录访问日志和处理异常，那么就可以定义一个抽象的基类，让所有的Servlet都继承这个抽象基类，在抽象基类的service方法中完成权限判断、记录访问日志和处理异常的代码，在各个子类中只是完成各自的业务逻辑代码，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> extendsHttpServlet&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> IOExcetion,ServletException &#123;</span><br><span class="line">        <span class="comment">//记录访问日志</span></span><br><span class="line">        <span class="comment">//进行权限判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAuth</span> <span class="operator">=</span> <span class="comment">//是否具有权限</span></span><br><span class="line">        <span class="keyword">if</span>(isAuth)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//父类方法中间的某段代码不确定，留给子类干，就用模板方法设计模式。</span></span><br><span class="line">                doService(request,response);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Excetpion e) &#123;</span><br><span class="line">                <span class="comment">//记录异常信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//注意访问权限定义成protected，显得既专业，又严谨，因为它是专门给子类用的</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request,HttpServletResponseresponse)</span> <span class="keyword">throws</span> IOExcetion,ServletException; </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet1</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">voiddoService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> throwsIOExcetion,ServletException&#123;</span><br><span class="line">    <span class="comment">//本Servlet只处理的具体业务逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：这道题的思路是先从总体解释抽象类和接口的基本概念，然后再比较两者的语法细节，最后再说两者的应用区别。比较两者语法细节区别的条理是：先从一个类中的构造方法、普通成员变量和方法（包括抽象方法），静态变量和方法，继承性等6个方面逐一去比较回答，接着从第三者继承的角度的回答，特别是最后用了一个典型的例子来展现自己深厚的技术功底。</p><h4 id="1-25-抽象方法是否可同时是static-是否可同时是native，是否可同时是synchronized"><a href="#1-25-抽象方法是否可同时是static-是否可同时是native，是否可同时是synchronized" class="headerlink" title="1.25 抽象方法是否可同时是static,是否可同时是native，是否可同时是synchronized?"></a>1.25 抽象方法是否可同时是static,是否可同时是native，是否可同时是synchronized?</h4><p>abstract的method 不可以是static的，因为抽象的方法是要被子类实现的，而static与子类扯不上关系！</p><p>native方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在着被子类实现的问题，所以，它也不能是抽象的，不能与abstract混用。例如，FileOutputSteam类要硬件打交道，底层的实现用的是操作系统相关的api实现，例如，在windows用c语言实现的，所以，查看jdk 的源代码，可以发现FileOutputStream的open方法的定义如下：<br>private native void open(String name)throws FileNotFoundException;<br>如果我们要用java调用别人写的c语言函数，我们是无法直接调用的，我们需要按照java的要求写一个c语言的函数，又我们的这个c语言函数去调用别人的c语言函数。由于我们的c语言函数是按java的要求来写的，我们这个c语言函数就可以与java对接上，java那边的对接方式就是定义出与我们这个c函数相对应的方法，java中对应的方法不需要写具体的代码，但需要在前面声明native。</p><p>关于synchronized与abstract合用的问题，我觉得也不行，因为在我几年的学习和开发中，从来没见到过这种情况，并且我觉得synchronized应该是作用在一个具体的方法上才有意义。而且，方法上的synchronized同步所使用的同步锁对象是this，而抽象方法上无法确定this是什么。</p><h4 id="1-26-什么是内部类？Static-Nested-Class-和-Inner-Class的不同。"><a href="#1-26-什么是内部类？Static-Nested-Class-和-Inner-Class的不同。" class="headerlink" title="1.26 什么是内部类？Static Nested Class 和 Inner Class的不同。"></a>1.26 什么是内部类？Static Nested Class 和 Inner Class的不同。</h4><p>其一、在一个类（外部类）中直接定义的内部类；<br>其二、在一个方法（外部类的方法）中定义的内部类;<br>其三、匿名内部类。</p><p>内部类就是在一个类的内部定义的类，内部类中不能定义静态成员（静态成员不是对象的特性，只是为了找一个容身之处，所以需要放到一个类中而已，这么一点小事，你还要把它放到类内部的一个类中，过分了啊！提供内部类，不是为让你干这种事情，无聊，不让你干。我想可能是既然静态成员类似c语言的全局变量，而内部类通常是用于创建内部对象用的，所以，把“全局变量”放在内部类中就是毫无意义的事情，既然是毫无意义的事情，就应该被禁止），内部类可以直接访问外部类中的成员变量，内部类可以定义在外部类的方法外面，也可以定义在外部类的方法体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    intout_x  = <span class="number">0</span>;</span><br><span class="line">    publicvoid <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        Inner1inner1 = <span class="keyword">new</span> <span class="title class_">Inner1</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在方法体内部定义的内部类</span></span><br><span class="line">        publicclass Inner2&#123;</span><br><span class="line">            publicmethod()&#123;</span><br><span class="line">                out_x= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner2inner2 = <span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在方法体外面定义的内部类</span></span><br><span class="line">    publicclass Inner1&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法体外面定义的内部类的访问类型可以是public,protecte,默认的，private等4种类型，这就好像类中定义的成员变量有4种访问类型一样，它们决定这个内部类的定义对其他类是否可见；对于这种情况，我们也可以在外面创建内部类的实例对象，创建内部类的实例对象时，一定要先创建外部类的实例对象，然后用这个外部类的实例对象去创建内部类的实例对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.<span class="type">Inner1</span> <span class="variable">inner1</span> <span class="operator">=</span> outer.newInnner1();</span><br></pre></td></tr></table></figure><p>在方法内部定义的内部类前面不能有访问类型修饰符，就好像方法中定义的局部变量一样，但这种内部类的前面可以使用final或abstract修饰符。这种内部类对其他类是不可见的其他类无法引用这种内部类，但是这种内部类创建的实例对象可以传递给其他类访问。这种内部类必须是先定义，后使用，即内部类的定义代码必须出现在使用该类之前，这与方法中的局部变量必须先定义后使用的道理也是一样的。这种内部类可以访问方法体中的局部变量，但是，该局部变量前必须加final修饰符。<br>对于这些细节，只要在eclipse写代码试试，根据开发工具提示的各类错误信息就可以马上了解到。</p><p>其三、匿名内部类<br>在方法体内部还可以采用如下语法来创建一种匿名内部类，即定义某一接口或类的子类的同时，还创建了该子类的实例对象，无需为该子类定义名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    publicvoid <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        newThread(<span class="keyword">new</span> <span class="title class_">Runable</span>()&#123; </span><br><span class="line">            publicvoid <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在方法外部定义的内部类前面可以加上static关键字，从而成为Static Nested Class，它不再具有内部类的特性，所有，从狭义上讲，它不是内部类。Static Nested Class与普通类在运行时的行为和功能上没有什么区别，只是在编程引用时的语法上有一些差别，它可以定义成public、protected、默认的、private等多种类型，而普通类只能定义成public和默认的这两种类型。在外面引用Static Nested Class类的名称为“外部类名.内部类名”。在外面不需要创建外部类的实例对象，就可以直接创建Static Nested Class，例如，假设Inner是定义在Outer类中的Static Nested Class，那么可以使用如下语句创建Inner类：<br>Outer.Inner inner &#x3D; new Outer.Inner();<br>由于static Nested Class不依赖于外部类的实例对象，所以，static Nested Class能访问外部类的非static成员变量。当在外部类中访问Static Nested Class时，可以直接使用Static Nested Class的名字，而不需要加上外部类的名字了，在Static Nested Class中也可以直接引用外部类的static的成员变量，不需要加上外部类的名字。<br>在静态方法中定义的内部类也是Static Nested Class，这时候不能在类前面加static关键字，静态方法中的Static Nested Class与普通方法中的内部类的应用方式很相似，它除了可以直接访问外部类中的static的成员变量，还可以访问静态方法中的局部变量，但是，该局部变量前必须加final修饰符。</p><p>备注：首先根据你的印象说出你对内部类的总体方面的特点：例如，在两个地方可以定义，可以访问外部类的成员变量，不能定义静态成员，这是大的特点。然后再说一些细节方面的知识，例如，几种定义方式的语法区别，静态内部类，以及匿名内部类。</p><h4 id="1-27-内部类可以引用它的包含类的成员吗？有没有什么限制？"><a href="#1-27-内部类可以引用它的包含类的成员吗？有没有什么限制？" class="headerlink" title="1.27 内部类可以引用它的包含类的成员吗？有没有什么限制？"></a>1.27 内部类可以引用它的包含类的成员吗？有没有什么限制？</h4><p>完全可以。如果不是静态内部类，那没有什么限制！<br>如果你把静态嵌套类当作内部类的一种特例，那在这种情况下不可以访问外部类的普通成员变量，而只能访问外部类中的静态成员，例如，下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.prientln(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答题时，也要能察言观色，揣摩提问者的心思，显然人家希望你说的是静态内部类不能访问外部类的成员，但你一上来就顶牛，这不好，要先顺着人家，让人家满意，然后再说特殊情况，让人家吃惊。</p><h4 id="1-28-Anonymous-Inner-Class-匿名内部类-是否可以extends-继承-其它类，是否可以implements-实现-interface-接口"><a href="#1-28-Anonymous-Inner-Class-匿名内部类-是否可以extends-继承-其它类，是否可以implements-实现-interface-接口" class="headerlink" title="1.28 Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?"></a>1.28 Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?</h4><p>可以继承其他类或实现其他接口。不仅是可以，而是必须!</p><p>匿名内部类是没有名字的内部类,不能继承其它类,但一个内部类可以作为一个接口,由另一个内部类实现.<br>1、由于匿名内部类没有名字，所以它没有构造函数。因为没有构造函数，所以它必须完全借用父类的构造函数来实例化，换言之：匿名内部类完全把创建对象的任务交给了父类去完成。<br>2、在匿名内部类里创建新的方法没有太大意义，但它可以通过覆盖父类的方法达到神奇效果，如上例所示。这是多态性的体现。<br>3、因为匿名内部类没有名字，所以无法进行向下的强制类型转换，持有对一个匿名内部类对象引用的变量类型一定是它的直接或间接父类类型。</p><h4 id="1-29-super-getClass-方法调用"><a href="#1-29-super-getClass-方法调用" class="headerlink" title="1.29 super.getClass()方法调用"></a>1.29 super.getClass()方法调用</h4><p>下面程序的输出结果是多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Date</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Test</span>().test();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="built_in">super</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很奇怪，结果是Test<br>这属于脑筋急转弯的题目，在一个qq群有个网友正好问过这个问题，我觉得挺有趣，就研究了一下，没想到今天还被你面到了，哈哈。<br>在test方法中，直接调用getClass().getName()方法，返回的是Test类名.由于getClass()在Object类中定义成了final，子类不能覆盖该方法，所以，在test方法中调用getClass().getName()方法，其实就是在调用从父类继承的getClass()方法，等效于调用super.getClass().getName()方法，所以，super.getClass().getName()方法返回的也应该是Test。<br>如果想得到父类的名称，应该用如下代码：getClass().getSuperClass().getName();</p><h4 id="1-30-String是最基本的数据类型吗"><a href="#1-30-String是最基本的数据类型吗" class="headerlink" title="1.30 String是最基本的数据类型吗?"></a>1.30 String是最基本的数据类型吗?</h4><p>基本数据类型包括byte、short、int、long、float、double、boolean和char。<br>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类</p><h4 id="1-31-String-s-x3D-“Hello”-s-x3D-s-“-world-”-这两行代码执行后，原始的String对象中的内容到底变了没有？"><a href="#1-31-String-s-x3D-“Hello”-s-x3D-s-“-world-”-这两行代码执行后，原始的String对象中的内容到底变了没有？" class="headerlink" title="1.31 String s &#x3D; “Hello”;s &#x3D; s + “ world!”;这两行代码执行后，原始的String对象中的内容到底变了没有？"></a>1.31 String s &#x3D; “Hello”;s &#x3D; s + “ world!”;这两行代码执行后，原始的String对象中的内容到底变了没有？</h4><p>没有。因为String被设计成不可变(immutable)类，所以它的所有对象都是不可变对象。在这段代码中，s原先指向一个String对象，内容是”Hello”，然后我们对s进行了+操作，那么s所指向的那个对象是否发生了改变呢？答案是没有。这时，s不指向原来那个对象了，而指向了另一个String对象，内容为”Hello world!”，原来那个对象还存在于内存之中，只是s这个引用变量不再指向它了。</p><p>拓展：<br>通过上面的说明，我们很容易导出另一个结论，如果经常对字符串进行各种各样的修改，或者说，不可预见的修改，那么使用String来代表字符串的话会引起很大的内存开销。因为String对象建立之后不能再改变，所以对于每一个不同的字符串，都需要一个String对象来表示。这时，应该考虑使用StringBuffer类，它允许修改，而不是每个不同的字符串都要生成一个新的对象。并且，这两种类的对象转换十分容易。<br>同时，我们还可以知道，如果要使用内容相同的字符串，不必每次都new一个String。例如我们要在构造器中对一个名叫s的String引用变量进行初始化，把它设置为初始值，应当这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> Demo &#123;</span><br><span class="line">        s = <span class="string">&quot;Initial Value&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//而非</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> Demo &#123;</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Initial Value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后者每次都会调用构造器，生成新对象，性能低下且内存开销大，并且没有意义，因为String对象不可改变，所以对于内容相同的字符串，只要一个String对象来表示就可以了。也就说，多次调用上面的构造器创建多个对象，他们的String类型属性s都指向同一个对象。<br>上面的结论还基于这样一个事实：对于字符串常量，如果内容相同，Java认为它们代表同一个String对象。而用关键字new调用构造器，总是会创建一个新的对象，无论内容是否相同。<br>至于为什么要把String类设计成不可变类，是它的用途决定的。其实不只String，很多Java标准类库中的类都是不可变的。在开发一个系统的时候，我们有时候也需要设计不可变类，来传递一组相关的值，这也是面向对象思想的体现。不可变类有一些优点，比如因为它的对象是只读的，所以多线程并发访问也不会有任何问题。当然也有一些缺点，比如每个不同的状态都要一个对象来代表，可能会造成性能上的问题。所以Java标准类库还提供了一个可变版本，即StringBuffer。</p><h4 id="1-32-是否可以继承String类"><a href="#1-32-是否可以继承String类" class="headerlink" title="1.32 是否可以继承String类?"></a>1.32 是否可以继承String类?</h4><p>String类是final类故不可以继承。</p><h4 id="1-33-String-s-x3D-new-String-“xyz”-创建了几个String-Object-二者之间有什么区别？"><a href="#1-33-String-s-x3D-new-String-“xyz”-创建了几个String-Object-二者之间有什么区别？" class="headerlink" title="1.33 String s &#x3D; new String(“xyz”);创建了几个String Object? 二者之间有什么区别？"></a>1.33 String s &#x3D; new String(“xyz”);创建了几个String Object? 二者之间有什么区别？</h4><p>两个或一个，”xyz”对应一个对象，这个对象放在字符串常量缓冲区，常量”xyz”不管出现多少遍，都是缓冲区中的那一个。New String每写一遍，就创建一个新的对象，它一句那个常量”xyz”对象的内容来创建出一个新String对象。如果以前就用过’xyz’，这句代表就不会创建”xyz”自己了，直接从缓冲区拿。</p><h4 id="1-34-String-和StringBuffer的区别"><a href="#1-34-String-和StringBuffer的区别" class="headerlink" title="1.34 String 和StringBuffer的区别"></a>1.34 String 和StringBuffer的区别</h4><p>JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。</p><p>这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers来动态构造字符数据。</p><p>String实现了equals方法，new String(“abc”).equals(newString(“abc”)的结果为true,而StringBuffer没有实现equals方法，所以，new StringBuffer(“abc”).equals(new StringBuffer(“abc”)的结果为false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接着要举一个具体的例子来说明，我们要把1到100的所有数字拼起来，组成一个串。</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    sbf.append(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的代码效率很高，因为只创建了一个StringBuffer对象，而下面的代码效率很低，因为创建了101个对象。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> newString(); </span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    str = str + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在讲两者区别时，应把循环的次数搞成10000，然后用endTime-beginTime来比较两者执行的时间差异，最后还要讲讲StringBuilder与StringBuffer的区别。<br>String覆盖了equals方法和hashCode方法，而StringBuffer没有覆盖equals方法和hashCode方法，所以，将StringBuffer对象存储进Java集合类中时会出现问题。</p><h4 id="1-35-如何把一段逗号分割的字符串转换成一个数组"><a href="#1-35-如何把一段逗号分割的字符串转换成一个数组" class="headerlink" title="1.35 如何把一段逗号分割的字符串转换成一个数组?"></a>1.35 如何把一段逗号分割的字符串转换成一个数组?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">orgStr</span> <span class="operator">=</span> <span class="string">&quot;a,2,3,5,s,rs&quot;</span>;</span><br><span class="line"><span class="comment">//1、用正则表达式，代码大概为：</span></span><br><span class="line">String[] result1 = orgStr.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">//2、用StingTokenizer ,代码为：</span></span><br><span class="line"><span class="type">StringTokenizer</span> <span class="variable">tokener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(orgStr, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">String[] result = <span class="keyword">new</span> <span class="title class_">String</span>[tokener.countTokens()];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (tokener.hasMoreTokens()) &#123;</span><br><span class="line">    result[i++] = tokener.nextToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-36-数组有没有length-这个方法-String有没有length-这个方法？"><a href="#1-36-数组有没有length-这个方法-String有没有length-这个方法？" class="headerlink" title="1.36 数组有没有length()这个方法? String有没有length()这个方法？"></a>1.36 数组有没有length()这个方法? String有没有length()这个方法？</h4><p>数组没有length()这个方法，有length的属性。String有有length()这个方法。</p><h4 id="1-37-下面这条语句一共创建了多少个对象：String-s-x3D-”a”-”b”-”c”-”d”"><a href="#1-37-下面这条语句一共创建了多少个对象：String-s-x3D-”a”-”b”-”c”-”d”" class="headerlink" title="1.37 下面这条语句一共创建了多少个对象：String s&#x3D;”a”+”b”+”c”+”d”;"></a><strong>1.37 下面这条语句一共创建了多少个对象：String s&#x3D;”a”+”b”+”c”+”d”;</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下代码</span></span><br><span class="line">String s1= <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String s2= s1 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String s3= <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">System.out.println(s2 == <span class="string">&quot;ab&quot;</span>);</span><br><span class="line">System.out.println(s3 == <span class="string">&quot;ab&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一条语句打印的结果为false，第二条语句打印的结果为true.<br>这说明javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉其中的加号，直接将其编译成一个这些常量相连的结果。<br>题目中的第一行代码被编译器在编译时优化后，相当于直接定义了一个”abcd”的字符串，所以，上面的代码应该只创建了一个String对象。写如下两行代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> +<span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;d&quot;</span>;</span><br><span class="line">System.out.println(s ==<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="comment">//最终打印的结果应该为true。</span></span><br></pre></td></tr></table></figure><h4 id="1-38-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后"><a href="#1-38-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后" class="headerlink" title="1.38 try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?"></a>1.38 try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先看第一个例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args addby zxx ,Dec 9, 2008</span></span><br><span class="line"><span class="comment">     *      </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ++x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果是1，为什么呢？</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接着再看一个例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTryCatch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">TestTryCatch</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestTryCatch</span>();</span><br><span class="line">        System.out.println(test.fun());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StringBuilder <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//doing something</span></span><br><span class="line">            s.append(<span class="string">&quot;Word&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            s.append(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果是：HelloWordFinally</span></span><br></pre></td></tr></table></figure><p>首先需要明确：在声明方法时，我们声明了返回值类型。那么编译器就会在代码的最前端预留一段返回值类型的内存。执行return的时候，就会把返回的内容写入到这段内存中。</p><p>第一个例子中：在执行了return之后，返回的值已经被写入到那段内存中了，finally再修改x的值，只是修改了后面代码段的x值，对返回段内存没有影响。</p><p>而第二个例子中：当返回值不是基本数据类型的时候，其是指向一段内存的，return将返回段指向一段内存，但是代码段的s依然是指向的同一段内存地址，所以当s修改它指向内存中的值的时候，其实也就修改了返回段指向内存中的值，所以最终的值改变了。</p><p>总结：其实return与finally并没有明显的谁强谁弱。在执行时，是return语句先把返回值写入内存中，然后停下来等待finally语句块执行完，return再执行后面的一段。</p><h4 id="1-39-下面的程序代码输出的结果是多少？"><a href="#1-39-下面的程序代码输出的结果是多少？" class="headerlink" title="1.39 下面的程序代码输出的结果是多少？"></a><strong>1.39 下面的程序代码输出的结果是多少？</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallT</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">SmallT</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmallT</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> t.get();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上述结果是2，我们可以用下面的代码进行分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args addby zxx ,Dec 9, 2008</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//TODOAuto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Test</span>().test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> func1();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> func2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">func2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>———–执行结果—————–<br>func1<br>func2<br>2</p><p>在关于try-return-finally语句阐述时，return会先执行，并将结果写入内存中，再等待finally中，最后return再去执行后面的一段。由于，finally中只是执行了一段代码，如果前面return的时值，那finally不对对结果有任何影响，如果return的是引用，finally可能会对结果造成影响，比如第二个demo中的示例代码。而如果将finally中的结果return出去，最后的结果必然以此次return执行的结果为准。</p><h4 id="1-40-final-finally-finalize的区别"><a href="#1-40-final-finally-finalize的区别" class="headerlink" title="1.40 final, finally, finalize的区别"></a>1.40 final, finally, finalize的区别</h4><p>final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。内部类要访问局部变量，局部变量必须定义成final类型，jdk8之后可以忽略此设置，但底层还是帮加了final（即此时的局部变量是不能进行修改的）例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Readable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(CharBuffer cb)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer.toString();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finally是异常处理语句结构的一部分，表示总是执行。<br>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用</p><h4 id="1-41-思考：为什么匿名内部类再使用局部变量时必须将局部变量通过final修改"><a href="#1-41-思考：为什么匿名内部类再使用局部变量时必须将局部变量通过final修改" class="headerlink" title="1.41 思考：为什么匿名内部类再使用局部变量时必须将局部变量通过final修改"></a>1.41 思考：为什么匿名内部类再使用局部变量时必须将局部变量通过final修改</h4><p><a href="https://blog.csdn.net/tianjindong0804/article/details/81710268">参考链接</a></p><h4 id="1-42-运行时异常与一般异常有何异同？"><a href="#1-42-运行时异常与一般异常有何异同？" class="headerlink" title="1.42 运行时异常与一般异常有何异同？"></a>1.42 运行时异常与一般异常有何异同？</h4><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p><h4 id="1-43-error和exception有什么区别"><a href="#1-43-error和exception有什么区别" class="headerlink" title="1.43 error和exception有什么区别?"></a>1.43 error和exception有什么区别?</h4><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 <br>exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</p><h4 id="1-44-Java中的异常处理机制的简单原理和应用"><a href="#1-44-Java中的异常处理机制的简单原理和应用" class="headerlink" title="1.44 Java中的异常处理机制的简单原理和应用"></a>1.44 Java中的异常处理机制的简单原理和应用</h4><p>异常是指java程序运行时（非编译）所发生的非正常情况或错误，与现实生活中的事件很相似，现实生活中的事件可以包含事件发生的时间、地点、人物、情节等信息，可以用一个对象来表示，Java使用面向对象的方式来处理异常，它把程序中发生的每个异常也都分别封装到一个对象来表示的，该对象中包含有异常的信息。<br>Java对异常进行了分类，不同类型的异常分别用不同的Java类表示，所有异常的根类为java.lang.Throwable，Throwable下面又派生了两个子类：Error和Exception。<br>Error表示应用程序本身无法克服和恢复的一种严重问题，程序只有死的份了，例如，说内存溢出和线程死锁等系统问题。<br>Exception表示程序还能够克服和恢复的问题，其中又分为系统异常和普通异常，系统异常是软件本身缺陷所导致的问题，也就是软件开发人员考虑不周所导致的问题，软件使用者无法克服和恢复这种问题，但在这种问题下还可以让软件系统继续运行或者让软件死掉，例如，数组脚本越界（ArrayIndexOutOfBoundsException），空指针异常（NullPointerException）、类转换异常（ClassCastException）；普通异常是运行环境的变化或异常所导致的问题，是用户能够克服的问题，例如，网络断线，硬盘空间不够，发生这样的异常后，程序不应该死掉。<br>java为系统异常和普通异常提供了不同的解决方案，编译器强制普通异常必须try..catch处理或用throws声明继续抛给上层调用方法处理，所以普通异常也称为checked异常，而系统异常可以处理也可以不处理，所以，编译器不强制用try..catch处理或用throws声明，所以系统异常也称为unchecked异常。</p><p>提示答题者：就按照三个级别去思考：虚拟机必须宕机的错误，程序可以死掉也可以不死掉的错误，程序不应该死掉的错误；</p><h4 id="1-45-请写出你最常见到的5个RunTimeException"><a href="#1-45-请写出你最常见到的5个RunTimeException" class="headerlink" title="1.45 请写出你最常见到的5个RunTimeException"></a>1.45 请写出你最常见到的5个RunTimeException</h4><p>这道题主要考你的代码量到底多大，如果你长期写代码的，应该经常都看到过一些系统方面的异常，你不一定真要回答出5个具体的系统异常，但你要能够说出什么是系统异常，以及几个系统异常就可以了，当然，这些异常完全用其英文名称来写是最好的，如果实在写不出，那就用中文吧，有总比没有强！<br>所谓系统异常，就是…..，它们都是RuntimeException的子类，在jdk doc中查RuntimeException类，就可以看到其所有的子类列表，也就是看到了所有的系统异常。我比较有印象的系统异常有：NullPointerException、ArrayIndexOutOfBoundsException、ClassCastException。</p><h4 id="1-46-JAVA语言如何进行异常处理，关键字：throws-throw-try-catch-finally分别代表什么意义？在try块中可以抛出异常吗？"><a href="#1-46-JAVA语言如何进行异常处理，关键字：throws-throw-try-catch-finally分别代表什么意义？在try块中可以抛出异常吗？" class="headerlink" title="1.46 JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？"></a>1.46 JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？</h4><h4 id="1-47-java中有几种方法可以实现一个线程？用什么关键字修饰同步方法-stop-和suspend-方法为何不推荐使用？"><a href="#1-47-java中有几种方法可以实现一个线程？用什么关键字修饰同步方法-stop-和suspend-方法为何不推荐使用？" class="headerlink" title="1.47 java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？"></a>1.47 java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、实现Runnable接口</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、继承Thread类，然测Thread类本就是实现的Runnable接口</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充：从java5开始，还有如下一些线程池创建多线程的方式</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持Runnable接口</span></span><br><span class="line">executorService.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时还支持带返回参数的Callable接口</span></span><br><span class="line">executorService.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Executors工具类提供了五种线程池</span></span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService4</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService1</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService2</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService1</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService3</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br></pre></td></tr></table></figure><p>1、用synchronized关键字修饰同步方法<br>2、反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。<br>3、suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被”挂起”的线程恢复运行。<br>4、对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。<br>5、所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。</p><h4 id="1-48-sleep-和-wait-有什么区别"><a href="#1-48-sleep-和-wait-有什么区别" class="headerlink" title="1.48 sleep() 和 wait() 有什么区别?"></a><strong>1.48 sleep() 和 wait() 有什么区别?</strong></h4><p>1、sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 <br>2、wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p><p>sleep就是正在执行的线程主动让出cpu，cpu去执行其他线程，在sleep指定的时间过后，cpu才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep方法并不会释放锁，即使当前线程使用sleep方法让出了cpu，但其他被同步锁挡住了的线程也无法得到执行。<br>wait是指在一个已经进入了同步锁的线程内，让自己暂时让出同步锁，以便其他正在等待此锁的线程可以得到同步锁并运行，只有其他线程调用了notify方法（notify并不释放锁，只是告诉调用过wait方法的线程可以去参与获得锁的竞争了，但不是马上得到锁，因为锁还在别人手里，别人还没释放。如果notify方法后面的代码还有很多，需要这些代码执行完后才会释放锁，可以在notfiy方法后增加一个等待和一些代码，看看效果），调用wait方法的线程就会解除wait状态和程序可以再次得到锁后继续向下运行。对于wait的讲解一定要配合例子代码来说明，才显得自己真明白。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Thread1</span>()).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Thread2</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//由于这里的Thread1和下面的Thread2内部run方法要用同一对象作为监视器，</span></span><br><span class="line">            <span class="comment">// 我们这里不能用this，因为在Thread2里面的this和这个Thread1的this不是同一个对象。</span></span><br><span class="line">            <span class="comment">// 我们用MultiThread.class这个字节码对象，当前虚拟机里引用这个变量时，指向的都是同一个对象。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MultiThread.class) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;enter thread1...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;thread1 is waiting&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁有两种方式，第一种方式是程序自然离开监视器的范围，也就是离开了synchronized关键字管辖的代码范围，</span></span><br><span class="line">                    <span class="comment">// 另一种方式就是在synchronized关键字管辖的代码内部调用监视器对象的wait方法。这里，使用wait方法释放锁。</span></span><br><span class="line">                    MultiThread.class.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;thread1 is going on...&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;thread1 is being over!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MultiThread.class) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;enter thread2...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;thread2 notify other thread can release wait status..&quot;</span>);</span><br><span class="line">                <span class="comment">//由于notify方法并不释放锁，即使thread2调用下面的sleep方法休息了10毫秒，</span></span><br><span class="line">                <span class="comment">// 但thread1仍然不会执行，因为thread2没有释放锁，所以Thread1无法得不到锁。</span></span><br><span class="line"></span><br><span class="line">                MultiThread.class.notify();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;thread2 is sleeping ten millisecond...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;thread2 is going on...&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;thread2 is being over!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-49-同步和异步有何异同，在什么情况下分别使用他们？举例说明。"><a href="#1-49-同步和异步有何异同，在什么情况下分别使用他们？举例说明。" class="headerlink" title="1.49 同步和异步有何异同，在什么情况下分别使用他们？举例说明。"></a>1.49 同步和异步有何异同，在什么情况下分别使用他们？举例说明。</h4><p>如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。<br>当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。</p><h4 id="1-50-下面两个方法同步吗？（自己发明）"><a href="#1-50-下面两个方法同步吗？（自己发明）" class="headerlink" title="1.50 下面两个方法同步吗？（自己发明）"></a>1.50 下面两个方法同步吗？（自己发明）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态同步方法用的也是同一把锁——类对象本身</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello3</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态同步方法用的都是同一把锁——实例对象本身</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-51-同步有几种实现方法"><a href="#1-51-同步有几种实现方法" class="headerlink" title="1.51 同步有几种实现方法?"></a>1.51 同步有几种实现方法?</h4><p>同步的实现方面有两种，分别是synchronized,wait与notify,lock<br>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。<br>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。<br>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。<br>notityAll():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</p><h4 id="1-52-启动一个线程是用run-还是start"><a href="#1-52-启动一个线程是用run-还是start" class="headerlink" title="1.52 启动一个线程是用run()还是start()?"></a>1.52 启动一个线程是用run()还是start()?</h4><p>启动一个线程是调用start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。</p><h4 id="1-53-当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法"><a href="#1-53-当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法" class="headerlink" title="1.53 当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?"></a><strong>1.53 当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?</strong></h4><p>1.其他方法前是否加了synchronized关键字，如果没加，则能。<br>2.如果这个方法内部调用了wait，则可以进入其他synchronized方法。<br>3.如果其他个方法都加了synchronized关键字，并且内部没有调用wait，则不能。<br>4.如果其他方法是static，它用的同步锁是当前类的字节码，与非静态的方法不能同步，因为非静态的方法用的是this。</p><h4 id="1-54-线程的基本概念、线程的基本状态以及状态之间的关系"><a href="#1-54-线程的基本概念、线程的基本状态以及状态之间的关系" class="headerlink" title="1.54 线程的基本概念、线程的基本状态以及状态之间的关系"></a>1.54 线程的基本概念、线程的基本状态以及状态之间的关系</h4><h5 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h5><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。</p><h5 id="2、线程的状态-x2F-状态之间的关系"><a href="#2、线程的状态-x2F-状态之间的关系" class="headerlink" title="2、线程的状态&#x2F;状态之间的关系"></a>2、线程的状态&#x2F;状态之间的关系</h5><ul><li>新线程态（New Thread)<ul><li>创建线程</li></ul></li><li>可运行态（Runnable)<ul><li>调用start方法</li></ul></li><li>阻塞&#x2F;非运行态（Not Runnable)<br>  当以下事件发生时，线程进入非运行态。<br>  ①suspend()方法被调用；<br>  ②sleep()方法被调用；<br>  ③线程使用wait()来等待条件变量；<br>  ④线程处于I&#x2F;O请求的等待。</li><li>死亡态（Dead)<br>  当run（）方法返回，或别的线程调用stop（）方法，线程进入死亡态</li></ul><p><img src="/files/image/post/Java%E5%9F%BA%E7%A1%80%E7%AF%87%E7%AC%AC%E4%B8%80%E5%AD%A3/a5c27d1ed21b0ef4a9c88f08ddc451da81cb3e47.jpg" alt="线程的状态">·</p><p><img src="/files/image/post/Java%E5%9F%BA%E7%A1%80%E7%AF%87%E7%AC%AC%E4%B8%80%E5%AD%A3/902397dda144ad3412ca90d1d0a20cf431ad856a.png" alt="线程的生命周期"></p><h4 id="1-55-简述synchronized和java-util-concurrent-locks-Lock的异同？"><a href="#1-55-简述synchronized和java-util-concurrent-locks-Lock的异同？" class="headerlink" title="1.55 简述synchronized和java.util.concurrent.locks.Lock的异同？"></a>1.55 简述synchronized和java.util.concurrent.locks.Lock的异同？</h4><p>主要相同点：Lock能完成synchronized所实现的所有功能</p><p>主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。Lock还有更强大的功能，例如，<strong>它的tryLock方法可以非阻塞方式去拿锁。</strong></p><p>举例说明（对下面的题用lock进行了改写）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadTest</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(tt.<span class="keyword">new</span> <span class="title class_">Adder</span>()).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(tt.<span class="keyword">new</span> <span class="title class_">Subtractor</span>()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Subtractor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//                synchronized (ThreadTest.this) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;j--=&quot; + j--);</span></span><br><span class="line"><span class="comment">//                    //这里抛异常了，锁能释放吗？</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;j--=&quot;</span> + j--);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Adder</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//                synchronized (ThreadTest.this) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;j++=&quot; + j++);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;j++=&quot;</span> + j++);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-56-设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。"><a href="#1-56-设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。" class="headerlink" title="1.56 设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。"></a>1.56 设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadTest</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(tt.<span class="keyword">new</span> <span class="title class_">Adder</span>()).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(tt.<span class="keyword">new</span> <span class="title class_">Subtractor</span>()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Subtractor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> ( j &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        condition.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;j--=&quot;</span> + j--);</span><br><span class="line">                    condition.signalAll();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Adder</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> ( j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        condition.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;j++=&quot;</span> + j++);</span><br><span class="line"></span><br><span class="line">                    condition.signalAll();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-57-子线程循环10次，接着主线程循环5次，接着又回到子线程循环10次，接着再回到主线程又循环5，如此循环50次，请写出程序。"><a href="#1-57-子线程循环10次，接着主线程循环5次，接着又回到子线程循环10次，接着再回到主线程又循环5，如此循环50次，请写出程序。" class="headerlink" title="1.57 子线程循环10次，接着主线程循环5次，接着又回到子线程循环10次，接着再回到主线程又循环5，如此循环50次，请写出程序。"></a>1.57 子线程循环10次，接着主线程循环5次，接着又回到子线程循环10次，接着再回到主线程又循环5，如此循环50次，请写出程序。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Business</span> <span class="variable">business</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Business</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                        business.SubThread(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            business.MainThread(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Business</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bShouldSub</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//这里相当于定义了控制该谁执行的一个信号灯</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">MainThread</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (bShouldSub)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:i=&quot;</span> + i + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line">            bShouldSub = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">SubThread</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!bShouldSub)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:i=&quot;</span> + i + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line">            bShouldSub = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：不可能一上来就写出上面的完整代码，最初写出来的代码如下，问题在于两个线程的代码要参照同一个变量，即这两个线程的代码要共享数据，所以，把这两个线程的执行代码搬到同一个类中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk5 并发包编写的代码</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">subThreadCondition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">bBhouldSubThread</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">while</span> (!bBhouldSubThread)</span><br><span class="line">                            subThreadCondition.await();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">                        &#125;</span><br><span class="line">                        bBhouldSubThread = <span class="literal">false</span>;</span><br><span class="line">                        subThreadCondition.signal();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (bBhouldSubThread)</span><br><span class="line">                    subThreadCondition.await();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">                &#125;</span><br><span class="line">                bBhouldSubThread = <span class="literal">true</span>;</span><br><span class="line">                subThreadCondition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-58-java多线程wait时为什么要用while而不是if"><a href="#1-58-java多线程wait时为什么要用while而不是if" class="headerlink" title="1.58 java多线程wait时为什么要用while而不是if"></a>1.58 java多线程wait时为什么要用while而不是if</h4><p>用if判断的话，唤醒后线程会从wait之后的代码开始运行，但是不会重新判断if条件，直接继续运行if代码块之后的代码</p><p>而如果使用while的话，也会从wait之后的代码运行，但是唤醒后会重新判断循环条件，如果不成立再执行while代码块之后的代码块，成立的话继续wait。</p><h4 id="1-59-介绍Collection框架的结构"><a href="#1-59-介绍Collection框架的结构" class="headerlink" title="1.59 介绍Collection框架的结构"></a>1.59 介绍Collection框架的结构</h4><h4 id="1-60-Collection框架中实现比较要实现什么接口"><a href="#1-60-Collection框架中实现比较要实现什么接口" class="headerlink" title="1.60 Collection框架中实现比较要实现什么接口"></a>1.60 Collection框架中实现比较要实现什么接口</h4><p>comparable&#x2F;comparator</p><h4 id="1-61-ArrayList和Vector的区别"><a href="#1-61-ArrayList和Vector的区别" class="headerlink" title="1.61 ArrayList和Vector的区别"></a>1.61 ArrayList和Vector的区别</h4><h5 id="1、相同点"><a href="#1、相同点" class="headerlink" title="1、相同点"></a>1、相同点</h5><p>这两个类都实现了List接口（List接口继承了Collection接口），他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素，并且其中的数据是允许重复的，这是HashSet之类的集合的最大不同处，HashSet之类的集合不可以按索引号去检索其中的元素，也不允许有重复的元素</p><h5 id="2、ArrayList与Vector的区别"><a href="#2、ArrayList与Vector的区别" class="headerlink" title="2、ArrayList与Vector的区别"></a>2、ArrayList与Vector的区别</h5><p>（1）同步性：</p><p>Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码。</p><p>备注：对于Vector&amp;ArrayList、Hashtable&amp;HashMap，要记住线程安全的问题，记住Vector与Hashtable是旧的，是java一诞生就提供了的，它们是线程安全的，ArrayList与HashMap是java2时才提供的，它们是线程不安全的。所以，我们讲课时先讲老的。</p><p>（2）数据增长：</p><p>ArrayList与Vector都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加ArrayList与Vector的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。Vector默认增长为原来两倍，而ArrayList的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的1.5倍）。ArrayList与Vector都可以设置初始的空间大小，Vector还可以设置增长的空间大小，而ArrayList没有提供设置增长空间的方法。</p><p>总结：即Vector两倍扩容，ArrayList时1.5倍扩容。</p><h4 id="1-62-HashMap和Hashtable的区别"><a href="#1-62-HashMap和Hashtable的区别" class="headerlink" title="1.62 HashMap和Hashtable的区别"></a>1.62 HashMap和Hashtable的区别</h4><p>1、HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口</p><p>2、Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现 </p><p>3、Hashtable是线程安全的，其公用方法时同步调用的，而HashMap是线程不安全的，不是同步的 </p><p>4、只有HashMap可以让你将空值作为一个表的条目的key或value</p><h4 id="1-63-List-和-Map-区别"><a href="#1-63-List-和-Map-区别" class="headerlink" title="1.63 List 和 Map 区别?"></a>1.63 List 和 Map 区别?</h4><p>1、一个是存储单列数据的集合，另一个是存储键和值这样的双列数据的集合</p><p>2、List中存储的数据是有顺序，并且允许重复；Map中存储的数据是没有顺序的，其键是不能重复的，它的值是可以有重复的。</p><h4 id="1-64-List-Set-Map是否继承自Collection接口"><a href="#1-64-List-Set-Map是否继承自Collection接口" class="headerlink" title="1.64 List, Set, Map是否继承自Collection接口?"></a>1.64 List, Set, Map是否继承自Collection接口?</h4><p> List，Set是，Map不是</p><h4 id="1-65-List、Map、Set三个接口，存取元素时，各有什么特点？"><a href="#1-65-List、Map、Set三个接口，存取元素时，各有什么特点？" class="headerlink" title="1.65 List、Map、Set三个接口，存取元素时，各有什么特点？"></a>1.65 List、Map、Set三个接口，存取元素时，各有什么特点？</h4><p>这样的题属于随意发挥题：这样的题比较考水平，两个方面的水平：一是要真正明白这些内容，二是要有较强的总结和表述能力。如果你明白，但表述不清楚，在别人那里则等同于不明白。</p><p>1、List与Set具有相似性，它们都是单列元素的集合，所以，它们有一个功共同的父接口，叫Collection。Set里面不允许有重复的元素，所谓重复，即不能有两个相等（注意，不是仅仅是相同）的对象，即假设Set集合中有了一个A对象，现在我要向Set集合再存入一个B对象，但B对象与A对象equals相等，则B对象存储不进去，所以，Set集合的add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true，当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。Set取元素时，没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。</p><p> List表示有先后顺序的集合，注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(Obj e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用add(int index,Obj e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进List中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个索引指向了这个对象，如图x所示。<strong>List除了可以以Iterator接口取得所有的元素，再逐一遍历各个元素之外，还可以调用get(index i)来明确说明取第几个。</strong></p><p>2、 Map与List和Set不同，它是双列的集合，其中有put方法，定义如下：put(obj key,obj value)，每次存储时，要存储一对key&#x2F;value，不能存储重复的key，这个重复的规则也是按equals比较相等。取则可以根据key获得相应的value，即get(Object key)返回值为key所对应的value。另外，也可以获得所有的key的结合，还可以获得所有的value的结合，还可以获得key和value组合成的Map.Entry对象的集合。</p><h4 id="1-66-说出ArrayList-Vector-LinkedList的存储性能和特性"><a href="#1-66-说出ArrayList-Vector-LinkedList的存储性能和特性" class="headerlink" title="1.66 说出ArrayList,Vector, LinkedList的存储性能和特性"></a>1.66 说出ArrayList,Vector, LinkedList的存储性能和特性</h4><p>ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差</p><p>LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。LinkedList也是线程不安全的，LinkedList提供了一些方法，使得LinkedList可以被当作堆栈和队列来使用。</p><h4 id="1-67-去掉一个Vector集合中重复的元素"><a href="#1-67-去掉一个Vector集合中重复的元素" class="headerlink" title="1.67 去掉一个Vector集合中重复的元素"></a>1.67 去掉一个Vector集合中重复的元素</h4><p>1、使用Vector的contains方法</p><p>2、使用set集合去重</p><h4 id="1-68-Collection-和-Collections的区别"><a href="#1-68-Collection-和-Collections的区别" class="headerlink" title="1.68 Collection 和 Collections的区别"></a>1.68 Collection 和 Collections的区别</h4><p>Collection是集合类的上级接口，继承与他的接口主要有Set和List.</p><p>Collections是针对集合类的一个工具类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作</p><h4 id="1-69-将HashMap替换成线程安全的方式有那些？"><a href="#1-69-将HashMap替换成线程安全的方式有那些？" class="headerlink" title="1.69 将HashMap替换成线程安全的方式有那些？"></a>1.69 <code>将HashMap替换成线程安全的方式有那些？</code></h4><ul><li>换成HashTable</li><li>使用Collections的线程安全的api，如Collections.synchronizedMap(Map map),此操作返回的时一个内部私有类SynchronizedMap，所有公开方法都加上了synchronized代码块，所得对象时this，即当前实例出的SynchronizedMap类</li><li>换成1.5后出现的线程安全的集合类ConcurrentHashMap，ConcurrentHashMap使用的时锁分离的思想（在某些情况下，可以将锁分解技术进一步扩展为对一组独立对象上的锁进行分解，这种情况称为锁分段。锁分段的劣势在于：与采用单个锁来实现独占访问相比，要获取多个锁来实现独占访问将更加困难并且开销更高，比如计算size、重hash。简单而言就是：容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。）</li></ul><h4 id="1-70-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-x3D-x3D-还是equals-它们有何区别"><a href="#1-70-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-x3D-x3D-还是equals-它们有何区别" class="headerlink" title="1.70 Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用&#x3D;&#x3D;还是equals()? 它们有何区别?"></a>1.70 Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用&#x3D;&#x3D;还是equals()? 它们有何区别?</h4><p>Set里的元素是不能重复的，元素重复与否是使用equals()方法进行判断的。equals()和&#x3D;&#x3D;方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。</p><h4 id="1-71-你所知道的集合类都有哪些？主要方法？"><a href="#1-71-你所知道的集合类都有哪些？主要方法？" class="headerlink" title="1.71 你所知道的集合类都有哪些？主要方法？"></a>1.71 你所知道的集合类都有哪些？主要方法？</h4><h4 id="1-72-两个对象值相同-x-equals-y-x3D-x3D-true-，但却可有不同的hash-code，这句话对不对"><a href="#1-72-两个对象值相同-x-equals-y-x3D-x3D-true-，但却可有不同的hash-code，这句话对不对" class="headerlink" title="1.72 两个对象值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对?"></a>1.72 两个对象值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对?</h4><p>如果对象要保存在HashSet或HashMap中，它们的equals相等，那么，它们的hashcode值就必须相等。</p><p>如果不是要保存在HashSet或HashMap，则与hashcode没有什么关系了，这时候hashcode不等是可以的，例如arrayList存储的对象就不用实现hashcode，当然，我们没有理由不实现，通常都会去实现的。</p><h4 id="1-73-TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常！"><a href="#1-73-TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常！" class="headerlink" title="1.73 TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常！"></a>1.73 TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常！</h4><h4 id="1-74-说出一些常用的类，包，接口，请各举5个"><a href="#1-74-说出一些常用的类，包，接口，请各举5个" class="headerlink" title="1.74 说出一些常用的类，包，接口，请各举5个"></a>1.74 说出一些常用的类，包，接口，请各举5个</h4><h4 id="1-75-java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"><a href="#1-75-java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？" class="headerlink" title="1.75 java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"></a>1.75 java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</h4><p>字节流，字符流。字节流继承于InputStream OutputStream，字符流继承于InputStreamReader OutputStreamWriter。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。</p><h4 id="1-76-字节流与字符流的区别"><a href="#1-76-字节流与字符流的区别" class="headerlink" title="1.76  字节流与字符流的区别"></a>1.76  字节流与字符流的区别</h4><p>要把一片二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一片二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。</p><p>在应用中，经常要完全是字符的一段文本输出去或读进来，用字节流可以吗？计算机中的一切最终都是二进制的字节形式存在。对于“中国”这些字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，人家专门提供了字符流的包装类。</p><p>底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设别写入或读取字符串提供了一点点方便。</p><p>字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IOTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;中国人&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        fos.write(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        fw.write(str);</span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        pw.write(str);</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fr.read(buf);</span><br><span class="line">        <span class="type">String</span> <span class="variable">myStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(myStr);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fr1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> fr1.read(buf1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">myStr1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf1, <span class="number">0</span>, len1, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(myStr1);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">myStr2</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        br.close();</span><br><span class="line">        System.out.println(myStr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-77-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用"><a href="#1-77-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用" class="headerlink" title="1.77 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用"></a>1.77 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用</h4><p>我们有时候将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输，但是，jre本身就提供了这种支持，我们可以调用<strong>OutputStream的writeObject</strong>方法来做，如果要让java 帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现的方法，<strong>implements Serializable只是为了标注该对象是可被序列化的</strong>。</p><p>例如，在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。</p><p>如果对象要经过分布式系统进行网络传输或通过rmi等远程调用，这就需要在网络上传输对象，被传输的对象就必须实现Serializable接口。</p><h4 id="1-78-描述一下JVM加载class文件的原理机制"><a href="#1-78-描述一下JVM加载class文件的原理机制" class="headerlink" title="1.78 描述一下JVM加载class文件的原理机制?"></a>1.78 描述一下JVM加载class文件的原理机制?</h4><p>JVM中类的装载是由ClassLoader和它的子类来实现的,Java ClassLoader 是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。</p><h4 id="1-79-heap和stack有什么区别"><a href="#1-79-heap和stack有什么区别" class="headerlink" title="1.79 heap和stack有什么区别"></a>1.79 heap和stack有什么区别</h4><p>java的内存分为两类，一类是栈内存，一类是堆内存。</p><p>栈内存是指程序进入一个方法时，会为这个方法单独分配一块私属存储空间，用于存储这个方法内部的局部变量，当这个方法结束时，分配给这个方法的栈会释放，这个栈中的变量也将随之释放。</p><p>堆是与栈作用不同的内存，一般用于存放不放在当前方法栈中的那些数据，例如，使用new创建的对象都放在堆里，所以，它不会随方法的结束而消失。方法中的局部变量使用final修饰后，放在堆中，而不是栈中。</p><h4 id="1-80-GC是什么-为什么要有GC"><a href="#1-80-GC是什么-为什么要有GC" class="headerlink" title="1.80 GC是什么? 为什么要有GC?"></a>1.80 GC是什么? 为什么要有GC?</h4><p>GC是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。</p><h4 id="1-81-垃圾回收的优点和原理-并说出2种回收机制"><a href="#1-81-垃圾回收的优点和原理-并说出2种回收机制" class="headerlink" title="1.81 垃圾回收的优点和原理,并说出2种回收机制"></a>1.81 垃圾回收的优点和原理,并说出2种回收机制</h4><p>Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。</p><p>由于有个垃圾回收机制，Java中的对象不再有”作用域”的概念，只有对象的引用才有”作用域”。</p><p>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。</p><p>垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。</p><p>回收机制有<strong>分代复制垃圾回收</strong>和<strong>标记垃圾回收</strong>，<strong>增量垃圾回收</strong>。</p><h4 id="1-82-垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"><a href="#1-82-垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？" class="headerlink" title="1.82 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"></a>1.82 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</h4><p>对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定对象是否是”可达的”。</p><p>当GC确定一些对象为”不可达”时，GC就有责任回收这些内存空间。</p><p>程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。</p><h4 id="1-83-什么时候用assert"><a href="#1-83-什么时候用assert" class="headerlink" title="1.83 什么时候用assert"></a>1.83 什么时候用assert</h4><p>assertion(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，assert将给出警告或退出。</p><p>一般来说，assertion用于保证程序最基本、关键的正确性。assertion检查通常在开发和测试时开启。</p><p>为了提高性能，在软件发布后，assertion检查通常是关闭的。</p><p>如果想要开启断言，需要再VM Options加入参数 -enableassertions 或 -ea。</p><h4 id="1-84-java中会存在内存泄漏吗，请简单描述。"><a href="#1-84-java中会存在内存泄漏吗，请简单描述。" class="headerlink" title="1.84 java中会存在内存泄漏吗，请简单描述。"></a>1.84 java中会存在内存泄漏吗，请简单描述。</h4><p>所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。java中有垃圾回收机制，它可以保证一对象不再被引用的时候，对象将自动被垃圾回收器从内存中清除掉。由于Java 使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的，例如下面的代码可以看到这种情况的内存回收：</p><p>java中的内存泄露的情况：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。</p><p>检查java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。</p><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object e)</span> &#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">        <span class="keyword">return</span> elements[--size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size) &#123;</span><br><span class="line">            Object[] oldElements = elements;</span><br><span class="line">            elements = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">2</span> * elements.length + <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(oldElements, <span class="number">0</span>, elements, <span class="number">0</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的原理应该很简单，假如堆栈加了10个元素，然后全部弹出来，虽然堆栈是空的，没有我们要的东西，但是这是个对象是无法回收的，这个才符合了内存泄露的两个条件：无用，无法回收。</p><p>但是就是存在这样的东西也不一定会导致什么样的后果，如果这个堆栈用的比较少，也就浪费了几个K内存而已，反正我们的内存都上G了，哪里会有什么影响，再说这个东西很快就会被回收的，有什么关系。下面看两个例子。</p><h4 id="1-85-能不能自己写个类，也叫java-lang-String？"><a href="#1-85-能不能自己写个类，也叫java-lang-String？" class="headerlink" title="1.85 能不能自己写个类，也叫java.lang.String？"></a>1.85 能不能自己写个类，也叫java.lang.String？</h4><p>可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载jre.jar包中的那个java.lang.String。由于在tomcat的web应用程序中，都是由webapp自己的类加载器先自己加载WEB-INF&#x2F;classess目录中的类，然后才委托上级的类加载器加载，如果我们在tomcat的web应用程序中写一个java.lang.String，这时候Servlet程序加载的就是我们自己写的java.lang.String，但是这么干就会出很多潜在的问题，原来所有用了java.lang.String类的都将出现问题。</p><p>虽然java提供了endorsed技术，可以覆盖jdk中的某些类，具体做法是….。但是，能够被覆盖的类是有限制范围，反正不包括java.lang这样的包中的类。</p><h4 id="1-86-Java代码查错"><a href="#1-86-Java代码查错" class="headerlink" title="1.86 Java代码查错"></a>1.86 Java代码查错</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isStupidName</span><span class="params">(String name)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法不能有方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">doSomething</span> <span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> s.length();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量不能使用访问修饰符修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">abstract</span> String <span class="title function_">doSomething</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法不能使用private修饰，因为抽象方法就是其子类去实现的，同理抽象方法前面也不能加final</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addOne</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ++x;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法传入的参数x使用了final修饰符，因此不能在方法中修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Other</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Other</span>();</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Something</span>().addOne(o);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span> &#123;</span><br><span class="line">       o.i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然方法addOne()的参数也是用了final修饰，但是在方法中并没有修改参数o（ Other）的引用，所以并没错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>instant variable（实例变量或叫成员变量），都是有默认值的，如果没有显示赋值会自动赋予默认值，而基本类型int的默认值是0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>final的instant variable没有default value，必须在constructor (构造器)结束之前被赋予一个明确的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Something</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Something</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;s.doSomething() returns &quot;</span> + doSomething());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Do something ...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static method不能直接call non-staticmethods。可改成”System.out.println(“s.doSomething()returns “ + s.doSomething());”。同理，static method不能访问non-static instant variable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处，Something类的文件名叫OtherThing.java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] something_to_do)</span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;Dosomething ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public class的名字必须和文件名相同,未标注public的类可以不跟文件名同名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>  <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pX</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译时会发生错误(错误描述不同的JVM有不同的信息，意思就是未明确的x调用，两个x都匹配（就象在同时import java.util和java.sql两个包时直接声明Date一样）。对于父类的变量,可以用super.x来明确，而接口的属性默认隐含为 public static final.所以可以通过A.x来明确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Playable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bounceable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rollable</span> <span class="keyword">extends</span> <span class="title class_">Playable</span>, Bounceable &#123;</span><br><span class="line">    <span class="type">Ball</span> <span class="variable">ball</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;PingPang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> <span class="keyword">implements</span> <span class="title class_">Rollable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ball</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        ball = <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;Football&quot;</span>);</span><br><span class="line">        System.out.println(ball.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类的属性默认都是public static final，而在子类重写的play()中，对被final修改时的属性ball重新赋值了</p><h2 id="2-算法和编程"><a href="#2-算法和编程" class="headerlink" title="2.算法和编程"></a>2.算法和编程</h2><h4 id="2-1-编写一个程序，将a-txt文件中的单词与b-txt文件中的单词交替合并到c-txt文件中，a-txt文件中的单词用回车符分隔，b-txt文件中用回车或空格进行分隔。"><a href="#2-1-编写一个程序，将a-txt文件中的单词与b-txt文件中的单词交替合并到c-txt文件中，a-txt文件中的单词用回车符分隔，b-txt文件中用回车或空格进行分隔。" class="headerlink" title="2.1 编写一个程序，将a.txt文件中的单词与b.txt文件中的单词交替合并到c.txt文件中，a.txt文件中的单词用回车符分隔，b.txt文件中用回车或空格进行分隔。"></a>2.1 编写一个程序，将a.txt文件中的单词与b.txt文件中的单词交替合并到c.txt文件中，a.txt文件中的单词用回车符分隔，b.txt文件中用回车或空格进行分隔。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileManager</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;\n&#x27;</span>&#125;);</span><br><span class="line">        <span class="type">FileManager</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="string">&quot;b.txt&quot;</span>, <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>&#125;);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">aWord</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bWord</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((aWord = a.nextWord()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            c.write(aWord + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bWord = b.nextWord();</span><br><span class="line">            <span class="keyword">if</span> (bWord != <span class="literal">null</span>)</span><br><span class="line">                c.write(bWord + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((bWord = b.nextWord()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            c.write(bWord + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    String[] words = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileManager</span><span class="params">(String filename, <span class="type">char</span>[] seperators)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">            <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>) f.length()];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> reader.read(buf);</span><br><span class="line">            <span class="type">String</span> <span class="variable">results</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, len);</span><br><span class="line">            <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (seperators.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                regex = <span class="string">&quot;&quot;</span> + seperators[<span class="number">0</span>] + <span class="string">&quot;|&quot;</span> + seperators[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                regex = <span class="string">&quot;&quot;</span> + seperators[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            words = results.split(regex);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nextWord</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == words.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> words[pos++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-编写一个程序，将d-java目录下的所有-java文件复制到d-jad目录下，并将原来文件的扩展名从-java改为-jad"><a href="#2-2-编写一个程序，将d-java目录下的所有-java文件复制到d-jad目录下，并将原来文件的扩展名从-java改为-jad" class="headerlink" title="2.2 编写一个程序，将d:\java目录下的所有.java文件复制到d:\jad目录下，并将原来文件的扩展名从.java改为.jad"></a>2.2 编写一个程序，将d:\java目录下的所有.java文件复制到d:\jad目录下，并将原来文件的扩展名从.java改为.jad</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DirCopy</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d://java&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(srcDir.exists() &amp;&amp; srcDir.isDirectory()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;目录不存在&quot;</span>);</span><br><span class="line">        File[] files = srcDir.listFiles((dir,name) -&gt; name.endsWith(<span class="string">&quot;.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\jad&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!destDir.exists())</span><br><span class="line">            destDir.mkdir();</span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> f.getName.repleaceAll(<span class="string">&quot;\\.java$&quot;</span>,<span class="string">&quot;.jad&quot;</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(destDir,filename));</span><br><span class="line">            copy(fis,fos);</span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(FileInputStream fis,FileOutputStream fos)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">if</span>((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串，但要保证汉字不被截取半个，如“我ABC”，4，应该截取“我AB”，输入“我ABC汉DEF”，6，应该输出“我ABC”，而不是“我ABC-汉的半个”"><a href="#2-3-编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串，但要保证汉字不被截取半个，如“我ABC”，4，应该截取“我AB”，输入“我ABC汉DEF”，6，应该输出“我ABC”，而不是“我ABC-汉的半个”" class="headerlink" title="2.3 编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串，但要保证汉字不被截取半个，如“我ABC”，4，应该截取“我AB”，输入“我ABC汉DEF”，6，应该输出“我ABC”，而不是“我ABC+汉的半个”"></a>2.3 编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串，但要保证汉字不被截取半个，如“我ABC”，4，应该截取“我AB”，输入“我ABC汉DEF”，6，应该输出“我ABC”，而不是“我ABC+汉的半个”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SplitStr</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我ABC汉DEF&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> trimGBK(str.getBytes(<span class="string">&quot;GBK&quot;</span>),num);</span><br><span class="line">        <span class="type">String</span> <span class="variable">splitStr</span> <span class="operator">=</span> str.split(<span class="number">0</span>,endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">trimGBK</span><span class="params">(<span class="type">byte</span>[] bytes,<span class="type">int</span> num)</span>&#123;     </span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> <span class="number">0</span>;     </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">chineseSplit</span> <span class="operator">=</span> <span class="literal">false</span>;    </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bytes[i] &lt; <span class="number">0</span> &amp;&amp; !chineseSplit)&#123;</span><br><span class="line">                chindesSplit = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                endIndex++;</span><br><span class="line">                chineseSplit = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> endIndex;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数"><a href="#2-4-有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数" class="headerlink" title="2.4 有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数"></a>2.4 有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountCharNum</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;中国aadf的111萨bbb菲的zz萨菲&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">englistCount</span> <span class="operator">=</span> <span class="number">0</span>,numberCount = <span class="number">0</span>,otherCount = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt; str.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.chatAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                englistCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                otherCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-说明生活中遇到的二叉树，用java实现二叉树"><a href="#2-5-说明生活中遇到的二叉树，用java实现二叉树" class="headerlink" title="2.5 说明生活中遇到的二叉树，用java实现二叉树"></a>2.5 说明生活中遇到的二叉树，用java实现二叉树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set... get...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(value &lt; <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left == <span class="literal">null</span>)&#123;</span><br><span class="line">                left = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                left.value(value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left.store(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(right == <span class="literal">null</span>)&#123;</span><br><span class="line">                right = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                right.value = value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right.store(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">find</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &lt; <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> left.find(value);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &gt; <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(right != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> right.find(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preList</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.value+ <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(left != <span class="literal">null</span>) left.preList();</span><br><span class="line">        <span class="keyword">if</span>(right != <span class="literal">null</span>) right.preList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left != <span class="literal">null</span>) left.middleList();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.value+ <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(right != <span class="literal">null</span>) right.middleList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left != <span class="literal">null</span>) left.afterList();</span><br><span class="line">        <span class="keyword">if</span>(right != <span class="literal">null</span>) right.afterList();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.value+ <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-从类似如下的文本文件中读取出所有的姓名，并打印出重复的姓名和重复的次数，并按重复次数排序："><a href="#2-6-从类似如下的文本文件中读取出所有的姓名，并打印出重复的姓名和重复的次数，并按重复次数排序：" class="headerlink" title="2.6 从类似如下的文本文件中读取出所有的姓名，并打印出重复的姓名和重复的次数，并按重复次数排序："></a>2.6 从类似如下的文本文件中读取出所有的姓名，并打印出重复的姓名和重复的次数，并按重复次数排序：</h4><p>1,张三,28</p><p>2,李四,35</p><p>3,张三,28</p><p>4,王五,35</p><p>5,张三,28</p><p>6,李四,35</p><p>7,赵六,28</p><p>8,田七,35</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine) != <span class="literal">null</span>)&#123;</span><br><span class="line">            saveInMap(line,map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;User&gt; set =  sortName(map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(user.getName+<span class="string">&quot;:&quot;</span>+user.getCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveInMap</span><span class="params">(String line,Map map)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(line != <span class="literal">null</span> &amp;&amp; line.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            String[] strArray = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(strArray[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="literal">null</span>)&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(line,++count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;User&gt; <span class="title function_">sortMap</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">        TreeSet&lt;User&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((user1,user2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(user1.getCount() &gt; user2.getCount() )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(user1.getCount() &lt; user2.getCount() )&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> user1.getName().compareTo(user2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> map.keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hashNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(name);</span><br><span class="line">            <span class="keyword">if</span>(count != <span class="literal">null</span> &amp;&amp; count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(name,count);</span><br><span class="line">                treeSet.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> treeSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set... get...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,<span class="type">int</span> count)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-写一个Singleton出来"><a href="#2-7-写一个Singleton出来" class="headerlink" title="2.7 写一个Singleton出来"></a>2.7 写一个Singleton出来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instace</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">ONE();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> sychronized Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> voliate <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstanc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            sychronized(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Singleton模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。</p><p>一般Singleton模式通常有几种种形式:</p><p>第一种形式: 定义一个类，它的构造函数为private的，它有一个static的private的该类变量，在类初始化时实例话，通过一个public的getInstance方法获取对它的引用,继而调用其中的方法。</p><h4 id="2-8-递归算法题"><a href="#2-8-递归算法题" class="headerlink" title="2.8 递归算法题"></a>2.8 递归算法题</h4><h6 id="1、一个整数，大于0，不用循环和本地变量，按照n，2n，4n，8n的顺序递增，当值大于5000时，把值按照指定顺序输出来。"><a href="#1、一个整数，大于0，不用循环和本地变量，按照n，2n，4n，8n的顺序递增，当值大于5000时，把值按照指定顺序输出来。" class="headerlink" title="1、一个整数，大于0，不用循环和本地变量，按照n，2n，4n，8n的顺序递增，当值大于5000时，把值按照指定顺序输出来。"></a>1、一个整数，大于0，不用循环和本地变量，按照n，2n，4n，8n的顺序递增，当值大于5000时，把值按照指定顺序输出来。</h6><p>例：n&#x3D;1237<br>则输出为：<br>1237，<br>2474，<br>4948，<br>9896，<br>9896，<br>4948，<br>2474，<br>1237，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">         </span><br><span class="line">         List&lt;Ingeter&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">         </span><br><span class="line">         sortNum(list,num);</span><br><span class="line">         </span><br><span class="line">         Lis&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(list);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.size -<span class="number">1</span>; n &gt;= <span class="number">0</span>;n--)&#123;</span><br><span class="line">             result.add(list.get(n));</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortNum</span><span class="params">(List list,<span class="type">int</span> num,<span class="type">int</span> count)</span>&#123;</span><br><span class="line">        list.add(num);</span><br><span class="line">        <span class="keyword">if</span>(num &gt; <span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sortNum(list,(count &lt;&lt; <span class="number">1</span> )*num,++count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2、第1个人10，第2个比第1个人大2岁，依次递推，请用递归方式计算出第8个人多大？"><a href="#2、第1个人10，第2个比第1个人大2岁，依次递推，请用递归方式计算出第8个人多大？" class="headerlink" title="2、第1个人10，第2个比第1个人大2岁，依次递推，请用递归方式计算出第8个人多大？"></a>2、第1个人10，第2个比第1个人大2岁，依次递推，请用递归方式计算出第8个人多大？</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">firstAge</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">        alt(firstAge,num,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">alt</span><span class="params">(<span class="type">int</span> age,<span class="type">int</span> num,<span class="type">int</span> count)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count == num)&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        alt(age+=<span class="number">2</span>,num,++count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-排序都有哪几种方法？请列举。用JAVA实现一个快速排序"><a href="#2-9-排序都有哪几种方法？请列举。用JAVA实现一个快速排序" class="headerlink" title="2.9 排序都有哪几种方法？请列举。用JAVA实现一个快速排序"></a>2.9 排序都有哪几种方法？请列举。用JAVA实现一个快速排序</h4><p>冒泡排序、选择排序和快速排序，下面是快速排序的代码：</p><p>比较两个相邻的元素，将值大的元素交换至右端。</p><p>1.如果我们的数据正序，只需要走一趟即可完成排序。所需的比较次数C和记录移动次数M均达到最小值，即：Cmin&#x3D;n-1;Mmin&#x3D;0;所以，冒泡排序最好的时间复杂度为O(n)。</p><p>2.如果很不幸我们的数据是反序的，则需要进行n-1趟排序。每趟排序要进行n-i次比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：</p><p>综上所述：冒泡排序总的平均时间复杂度为：<code>O(N^2) </code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BubbleSort</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Integer[] data = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">55</span>,<span class="number">24</span>,<span class="number">68</span>&#125;;</span><br><span class="line">        bubbleSort(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(Integer[] data)</span>&#123;</span><br><span class="line">        Integer temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt; data.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(data[j] &gt; data[j+ <span class="number">1</span>])&#123;</span><br><span class="line">                   temp = data[j];</span><br><span class="line">                   data[j] = data[j + <span class="number">1</span>];</span><br><span class="line">                   data[j + <span class="number">1</span>] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序原理即是，遍历元素找到一个最小（或最大）的元素，把它放在第一个位置，然后再在剩余元素中找到最小（或最大）的元素，把它放在第二个位置，依次下去，完成排序,其时间复杂度为 <code>O(N^2)</code></p><p>虽然选择排序和冒泡排序的时间复杂度一样，但实际上，选择排序进行的交换操作很少，最多会发生 N - 1次交换。<br>而冒泡排序最坏的情况下要发生<code>N^2 /2</code>交换操作。从这个意义上讲，交换排序的性能略优于冒泡排序。<br>而且，交换排序比冒泡排序的思想更加直观。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectSort</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] data = &#123;<span class="number">1</span>,<span class="number">33</span>,<span class="number">2</span>,<span class="number">44</span>,<span class="number">5</span>,<span class="number">66</span>,<span class="number">7</span>,<span class="number">88</span>,<span class="number">44</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7777777</span>,<span class="number">443</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        selectSort(data);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] data)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j&lt;data.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(data[minIndex] &gt; data[j])&#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> data[i];</span><br><span class="line">            data[i] = data[minIndex];</span><br><span class="line">            data[minIndex] = temp;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一趟排序将要排序的<a href="http://baike.baidu.com/view/4466818.htm">数据分割</a>成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<a href="http://baike.baidu.com/view/96473.htm">递归</a>进行，以此达到整个数据变成有序序列。</p><p>快速排序是在冒泡排序的基础上改进而来的，冒泡排序每次只能交换相邻的两个元素，而快速排序是跳跃式的交换，交换的距离很大，因此总的比较和交换次数少了很多，速度也快了不少。</p><p>但是快速排序在最坏情况下的<a href="http://data.biancheng.net/view/2.html">时间复杂度</a>和冒泡排序一样，是 <code>O(n2)</code>，实际上每次比较都需要交换，但是这种情况并不常见。我们可以思考一下如果每次比较都需要交换，那么数列的平均时间复杂度是 <code>O(nlogn)</code>，事实上在大多数时候，排序的速度要快于这个平均时间复杂度。这种算法实际上是一种分治法思想，也就是分而治之，把问题分为一个个的小部分来分别解决，再把结果组合起来。</p><p>快速排序只是使用数组原本的空间进行排序，所以所占用的空间应该是常量级的，但是由于每次划分之后是递归调用，所以递归调用在运行的过程中会消耗一定的空间，在一般情况下的<a href="http://data.biancheng.net/view/2.html">空间复杂度</a>为 <code>O(logn)</code>，在最差的情况下，若每次只完成了一个元素，那么空间复杂度为 <code>O(n)</code>。所以我们一般认为快速排序的空间复杂度为 <code>O(logn)</code>。</p><p>快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。</p><p>快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuickSort</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Integer[] data = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">55</span>,<span class="number">24</span>,<span class="number">68</span>&#125;;</span><br><span class="line">        quickSort(data,<span class="number">0</span>,data.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(Integer[] data,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left,j = right;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">middle</span> <span class="operator">=</span> data[(i + j) /<span class="number">2</span>],temp;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(data[i] &lt; middle &amp;&amp; i &lt; right)</span><br><span class="line">                i++; <span class="comment">//找出左边比中间值大的数</span></span><br><span class="line">            <span class="keyword">while</span>(data[j] &gt; middle &amp;&amp; j &gt; left)</span><br><span class="line">                j--; <span class="comment">//找出右边比中间值小的数</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt;= j)&#123;</span><br><span class="line">                <span class="comment">//将左边大的数和右边小的数进行替换</span></span><br><span class="line">                temp = data[i];</span><br><span class="line">                data[i++] = data[j];</span><br><span class="line">                data[j--] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>( i &lt;= j); <span class="comment">//当两者交错时停止  </span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; right)&#123;</span><br><span class="line">            quickSort(data,i,right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; left)&#123;</span><br><span class="line">            quickSort(data,left,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-10-有数组a-n-，用java代码将数组元素顺序颠倒"><a href="#2-10-有数组a-n-，用java代码将数组元素顺序颠倒" class="headerlink" title="2.10 有数组a[n]，用java代码将数组元素顺序颠倒"></a>2.10 有数组a[n]，用java代码将数组元素顺序颠倒</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReverseArray</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        reverseArray(array);</span><br><span class="line"></span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span> || array.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i] = array[array.length - i - <span class="number">1</span>];</span><br><span class="line">            array[array.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseArray2</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span> || array.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length -<span class="number">1</span>,j = <span class="number">0</span>;i &gt;=<span class="number">0</span>;i--,j++)&#123;</span><br><span class="line">            newArray[j] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-金额转换，阿拉伯数字的金额转换成中国传统的形式如：（￥1011）－-gt-（一千零一拾一元整）输出"><a href="#2-11-金额转换，阿拉伯数字的金额转换成中国传统的形式如：（￥1011）－-gt-（一千零一拾一元整）输出" class="headerlink" title="2.11 金额转换，阿拉伯数字的金额转换成中国传统的形式如：（￥1011）－&gt;（一千零一拾一元整）输出"></a>2.11 金额转换，阿拉伯数字的金额转换成中国传统的形式如：（￥1011）－&gt;（一千零一拾一元整）输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoneyRMB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] num = &#123;<span class="string">&#x27;零&#x27;</span>, <span class="string">&#x27;壹&#x27;</span>, <span class="string">&#x27;贰&#x27;</span>, <span class="string">&#x27;叁&#x27;</span>, <span class="string">&#x27;肆&#x27;</span>, <span class="string">&#x27;伍&#x27;</span>, <span class="string">&#x27;陆&#x27;</span>, <span class="string">&#x27;柒&#x27;</span>, <span class="string">&#x27;捌&#x27;</span>, <span class="string">&#x27;玖&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] unit = &#123;<span class="string">&#x27;元&#x27;</span>, <span class="string">&#x27;拾&#x27;</span>, <span class="string">&#x27;佰&#x27;</span>, <span class="string">&#x27;仟&#x27;</span>, <span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;拾&#x27;</span>, <span class="string">&#x27;佰&#x27;</span>, <span class="string">&#x27;仟&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> convert(money);</span><br><span class="line"></span><br><span class="line">        System.out.pringtln(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convert</span><span class="params">(<span class="type">int</span> money)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(money == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> num[money]+unit[money];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isZero</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(money &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">                isZero = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!isZero)&#123;</span><br><span class="line">                <span class="keyword">if</span>(count != <span class="number">0</span>)&#123;</span><br><span class="line">                    result.insert(<span class="number">0</span>,unit[count]);</span><br><span class="line">                &#125;</span><br><span class="line">                result.insert(<span class="number">0</span>,num[n]); </span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            money = money/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h2><h4 id="3-1-用两种方式根据部门号从高到低，工资从低到高列出每个员工的信息。"><a href="#3-1-用两种方式根据部门号从高到低，工资从低到高列出每个员工的信息。" class="headerlink" title="3.1 用两种方式根据部门号从高到低，工资从低到高列出每个员工的信息。"></a>3.1 用两种方式根据部门号从高到低，工资从低到高列出每个员工的信息。</h4><h4 id="3-2-列出各个部门中工资高于本部门的平均工资的员工数和部门号，并按部门号排序"><a href="#3-2-列出各个部门中工资高于本部门的平均工资的员工数和部门号，并按部门号排序" class="headerlink" title="3.2 列出各个部门中工资高于本部门的平均工资的员工数和部门号，并按部门号排序"></a>3.2 列出各个部门中工资高于本部门的平均工资的员工数和部门号，并按部门号排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 表关联方式</span><br><span class="line"><span class="keyword">SELECT</span> e.id,e.deptid <span class="keyword">FROM</span> employee921 e,(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary) salary,e.deptid <span class="keyword">FROM</span> employee921 e <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptid ) t</span><br><span class="line"><span class="keyword">WHERE</span> e.deptid <span class="operator">=</span> t.deptid <span class="keyword">AND</span> e.salary <span class="operator">&gt;</span> t.salary</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.deptid</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 条件筛选</span><br><span class="line"><span class="keyword">SELECT</span> e.id,e.deptid <span class="keyword">FROM</span> employee921 e </span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(t.salary) <span class="keyword">FROM</span> employee921 t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.deptid <span class="keyword">HAVING</span> t.deptid <span class="operator">=</span> e.deptid)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.deptid</span><br></pre></td></tr></table></figure><h4 id="3-3-存储过程与触发器必须讲，经常被面试到"><a href="#3-3-存储过程与触发器必须讲，经常被面试到" class="headerlink" title="3.3 存储过程与触发器必须讲，经常被面试到"></a>3.3 存储过程与触发器必须讲，经常被面试到</h4><h4 id="3-4-数据库三范式是什么"><a href="#3-4-数据库三范式是什么" class="headerlink" title="3.4 数据库三范式是什么?"></a>3.4 数据库三范式是什么?</h4><ul><li>第一范式（1NF）：<strong>字段具有原子性,不可再分</strong>。所有关系型数据库系统都满足第一范式）</li></ul><p>数据库表中的字段都是单一属性的，不可再分。例如，姓名字段，其中的姓和名必须作为一个整体，无法区分哪部分是姓，哪部分是名，如果要区分出姓和名，必须设计成两个独立的字段。</p><ul><li>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</li></ul><p>要求数据库表中的每个实例或行必须可以被惟一地区分。通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键。</p><p>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，<strong>第二范式就是非主属性部分依赖于主关键字</strong>。</p><ul><li>第三范式：满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）<strong>要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</strong></li></ul><p>所以第三范式具有如下特征：<br>     <strong>1，每一列只有一个值</strong><br>     <strong>2，每一行都能区分</strong><br>     <strong>3，每一个表都不包含其他表已经包含的非主关键字信息</strong></p><h4 id="3-5-union和union-all有什么不同"><a href="#3-5-union和union-all有什么不同" class="headerlink" title="3.5 union和union all有什么不同?"></a>3.5 union和union all有什么不同?</h4><p>Union和Union All的区别之一在于对重复结果的处理。</p><p>UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表UNION。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> gc_dfys</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ls_jg_dfys</span><br></pre></td></tr></table></figure><p>这个SQL在运行时<strong>先取出两个表的结果</strong>，再<strong>用排序空间进行排序删除重复的记录</strong>，最后返回结果集，<strong>如果表数据量大的话可能会导致用磁盘进行排序</strong>。</p><p>而UNION ALL只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了</p><p>从效率上说，UNION ALL 要比UNION快很多，所以，<strong>如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用UNION ALL</strong></p><h4 id="3-6-分页语句"><a href="#3-6-分页语句" class="headerlink" title="3.6 分页语句"></a>3.6 分页语句</h4><p>1.分页技术1（直接利用sql语句进行分页，效率最高和最推荐的）</p><h4 id="3-7-用一条SQL语句查询出每门课都大于80分的学生姓名"><a href="#3-7-用一条SQL语句查询出每门课都大于80分的学生姓名" class="headerlink" title="3.7 用一条SQL语句查询出每门课都大于80分的学生姓名"></a>3.7 用一条SQL语句查询出每门课都大于80分的学生姓名</h4><p>name   subject mark<br>张三  语文   81<br>张三  数学   75<br>李四  语文   76<br>李四  数学   90<br>王五  语文   81<br>王五  数学   100<br>王五  英语   90</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> tbl_exam_result <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> <span class="built_in">min</span>(mark) <span class="operator">&gt;</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">from</span> tbl_exam_result <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> name <span class="keyword">from</span> tbl_exam_rsult <span class="keyword">where</span> mark <span class="operator">&lt;=</span> <span class="number">80</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> name t1 <span class="keyword">from</span> tbl_exam_result e <span class="keyword">where</span> <span class="number">80</span><span class="operator">&lt;</span> <span class="keyword">ALL</span>(<span class="keyword">select</span> mark <span class="keyword">from</span> tbl_exam_result t <span class="keyword">where</span> t.`name` <span class="operator">=</span> e.`name`)</span><br></pre></td></tr></table></figure><h4 id="3-8-所有部门之间的比赛组合"><a href="#3-8-所有部门之间的比赛组合" class="headerlink" title="3.8 所有部门之间的比赛组合"></a><code>3.8 所有部门之间的比赛组合</code></h4><p>一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> department t1,department t2 <span class="keyword">WHERE</span> t1.`name` <span class="operator">&lt;</span> t2.`name`</span><br></pre></td></tr></table></figure><h4 id="3-9-每个月份的发生额都比101科目多的科目"><a href="#3-9-每个月份的发生额都比101科目多的科目" class="headerlink" title="3.9 每个月份的发生额都比101科目多的科目"></a>3.9 每个月份的发生额都比101科目多的科目</h4><p>请用SQL语句实现：从TestDB数据表中查询出所有月份的发生额都比101科目相应月份的发生额高的科目。请注意：TestDB中有很多科目，都有1－12月份的发生额。<br>AccID：科目代码，Occmonth：发生额月份，DebitOccur：发生额<br>数据库名：JcyAudit，数据集：Select * from TestDB</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> AccID <span class="keyword">from</span> TestDB <span class="keyword">group</span> <span class="keyword">by</span> AccID <span class="keyword">having</span> <span class="built_in">MIN</span>(DebitOccur) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">MAX</span>(DebitOccur) <span class="keyword">from</span> TestDB <span class="keyword">where</span> AccID <span class="operator">=</span> <span class="number">101</span> )</span><br></pre></td></tr></table></figure><p>如果上题改为：查询出那些科目的那些月份的发生额比101科目多的？</p><h4 id="3-10-统计每年每月的信息"><a href="#3-10-统计每年每月的信息" class="headerlink" title="3.10 统计每年每月的信息"></a>3.10 统计每年每月的信息</h4><p>year month amount<br>1991  1   1.1<br>1991  2   1.2<br>1991  3   1.3<br>1991  4   1.4<br>1992  1   2.1<br>1992  2   2.2<br>1992  3   2.3<br>1992  4   2.4<br>查成这样一个结果<br>year m1 m2 m3 m4<br>1991 1.1 1.2 1.3 1.4<br>1992 2.1 2.2 2.3 2.4 </p><p>提示：这个与工资条非常类似，与学生的科目成绩也很相似。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.`<span class="keyword">year</span>` ,</span><br><span class="line">(<span class="keyword">select</span> t.amount <span class="keyword">from</span> sales t <span class="keyword">where</span> t.`<span class="keyword">month</span>`<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> t.`<span class="keyword">year</span>`<span class="operator">=</span> s.`<span class="keyword">year</span>`) <span class="string">&#x27;m1&#x27;</span>,</span><br><span class="line">(<span class="keyword">select</span> t.amount <span class="keyword">from</span> sales t <span class="keyword">where</span> t.`<span class="keyword">month</span>`<span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">and</span> t.`<span class="keyword">year</span>`<span class="operator">=</span> s.`<span class="keyword">year</span>`) <span class="string">&#x27;m2&#x27;</span>,</span><br><span class="line">(<span class="keyword">select</span> t.amount <span class="keyword">from</span> sales t <span class="keyword">where</span> t.`<span class="keyword">month</span>`<span class="operator">=</span><span class="string">&#x27;3&#x27;</span> <span class="keyword">and</span> t.`<span class="keyword">year</span>`<span class="operator">=</span> s.`<span class="keyword">year</span>`) <span class="string">&#x27;m3&#x27;</span>,</span><br><span class="line">(<span class="keyword">select</span> t.amount <span class="keyword">from</span> sales t <span class="keyword">where</span> t.`<span class="keyword">month</span>`<span class="operator">=</span><span class="string">&#x27;4&#x27;</span> <span class="keyword">and</span> t.`<span class="keyword">year</span>`<span class="operator">=</span> s.`<span class="keyword">year</span>`) <span class="string">&#x27;m4&#x27;</span></span><br><span class="line"><span class="keyword">from</span> sales s <span class="keyword">group</span> <span class="keyword">by</span> s.`<span class="keyword">year</span>`</span><br></pre></td></tr></table></figure><h4 id="3-11-显示文章标题，发帖人、最后回复时间"><a href="#3-11-显示文章标题，发帖人、最后回复时间" class="headerlink" title="3.11 显示文章标题，发帖人、最后回复时间"></a>3.11 显示文章标题，发帖人、最后回复时间</h4><p>表：id,title,postuser,postdate,parentid</p><p>准备sql语句：</p><p>drop table if exists articles;</p><p>create table articles(id int auto_increment primary key,titlevarchar(50), postuser varchar(10), postdate datetime,parentid int referencesarticles(id));</p><p>insert into articles values</p><p>(null,’第一条’,’张三’,’1998-10-10 12:32:32’,null),</p><p>(null,’第二条’,’张三’,’1998-10-10 12:34:32’,null),</p><p>(null,’第一条回复1’,’李四’,’1998-10-10 12:35:32’,1),</p><p>(null,’第二条回复1’,’李四’,’1998-10-10 12:36:32’,2),</p><p>(null,’第一条回复2’,’王五’,’1998-10-10 12:37:32’,1),</p><p>(null,’第一条回复3’,’李四’,’1998-10-10 12:38:32’,1),</p><p>(null,’第二条回复2’,’李四’,’1998-10-10 12:39:32’,2),</p><p>(null,’第一条回复4’,’王五’,’1998-10-10 12:39:40’,1);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.title,t.postuser,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(a.postdate) <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser <span class="keyword">HAVING</span> a.postuser <span class="operator">=</span> t.postuser) max_time</span><br><span class="line"><span class="keyword">FROM</span> articles t</span><br></pre></td></tr></table></figure><p>注释：子查询可以用在选择列中，也可用于where的比较条件中，还可以用于from从句中。</p><h4 id="3-12-删除除了id号不同-其他都相同的学生冗余信息"><a href="#3-12-删除除了id号不同-其他都相同的学生冗余信息" class="headerlink" title="3.12  删除除了id号不同,其他都相同的学生冗余信息"></a>3.12  删除除了id号不同,其他都相同的学生冗余信息</h4><p>2.学生表如下:<br>id号  学号  姓名课程编号课程名称分数<br>1    2005001 张三 0001   数学  69<br>2    2005002 李四 0001   数学  89<br>3    2005001 张三 0001   数学  69</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-13-航空网的几个航班查询题："><a href="#3-13-航空网的几个航班查询题：" class="headerlink" title="3.13 航空网的几个航班查询题："></a>3.13 航空网的几个航班查询题：</h4><p>表结构如下：</p><p>flight{flightID,StartCityID,endCityID,StartTime}</p><p>city{cityID,CityName)</p><ul><li>1、查询起飞城市是北京的所有航班，按到达城市的名字排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> f.flightID,f.StartTime,c.CityName startCity,t.CityName endCity <span class="keyword">from</span> flight f,city c,city t <span class="keyword">where</span> c.cityID <span class="operator">=</span> f.StartCityID <span class="keyword">and</span> t.cityID <span class="operator">=</span> f.endCityID <span class="keyword">and</span> c.CityName <span class="operator">=</span> &quot;北京&quot; <span class="keyword">order</span> <span class="keyword">by</span> t.CityName</span><br></pre></td></tr></table></figure><ul><li>查询北京到上海的所有航班纪录（起飞城市，到达城市，起飞时间，航班号）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="string">&#x27;北京&#x27;</span>) startCity, (<span class="keyword">select</span> <span class="string">&#x27;上海&#x27;</span>) endCity,startTime <span class="keyword">from</span> flight f <span class="keyword">where</span> f.startCityID <span class="keyword">in</span> (<span class="keyword">select</span> cityID <span class="keyword">from</span> city <span class="keyword">where</span> cityName <span class="operator">=</span> &quot;北京&quot;) <span class="keyword">and</span> f.endCityID <span class="keyword">in</span> (<span class="keyword">select</span> cityID <span class="keyword">from</span> city <span class="keyword">where</span> cityName <span class="operator">=</span> &quot;上海&quot;)</span><br></pre></td></tr></table></figure><ul><li>查询具体某一天（2005-5-8）的北京到上海的的航班次数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> flight f <span class="keyword">where</span> f.startCityID <span class="keyword">in</span> (<span class="keyword">select</span> cityID <span class="keyword">from</span> city <span class="keyword">where</span> cityName <span class="operator">=</span> &quot;北京&quot;) <span class="keyword">and</span> f.endCityID <span class="keyword">in</span> (<span class="keyword">select</span> cityID <span class="keyword">from</span> city <span class="keyword">where</span> cityName <span class="operator">=</span> &quot;上海&quot;) <span class="keyword">and</span> date_format(f.startTime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="operator">=</span> &quot;2005-05-08&quot;</span><br></pre></td></tr></table></figure><h4 id="3-14-查出比经理薪水还高的员工信息："><a href="#3-14-查出比经理薪水还高的员工信息：" class="headerlink" title="3.14  查出比经理薪水还高的员工信息："></a>3.14  查出比经理薪水还高的员工信息：</h4><p>employees{id,name,salary,manage_id}</p><p>其中经理管理的下属员工是通过id字段关联的manage_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> <span class="keyword">from</span> employees e,employees m <span class="keyword">where</span> e.manage_id <span class="operator">=</span> m.id <span class="keyword">and</span> e.salary <span class="operator">&gt;</span> m.salary</span><br></pre></td></tr></table></figure><h4 id="3-15-求出小于45岁的各个老师所带的大于12岁的学生人数"><a href="#3-15-求出小于45岁的各个老师所带的大于12岁的学生人数" class="headerlink" title="3.15 求出小于45岁的各个老师所带的大于12岁的学生人数"></a>3.15 求出小于45岁的各个老师所带的大于12岁的学生人数</h4><p>数据库中有3个表 teacher 表，student表，tea_stu关系表。<br>teacher 表 teaID name age<br>student 表 stuID name age<br>teacher_student表 teaID stuID<br>要求用一条sql查询出这样的结果<br>1.显示的字段要有老师name, age 每个老师所带的学生人数<br>2 只列出老师age为40以下，学生age为12以上的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tea_stu;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> teacher;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(teaID <span class="type">int</span> <span class="keyword">primary</span> key,name <span class="type">varchar</span>(<span class="number">50</span>),age <span class="type">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(stuID <span class="type">int</span> <span class="keyword">primary</span> key,name <span class="type">varchar</span>(<span class="number">50</span>),age <span class="type">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tea_stu(teaID <span class="type">int</span> <span class="keyword">references</span> teacher(teaID),stuID <span class="type">int</span> <span class="keyword">references</span> student(stuID));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zxx&#x27;</span>,<span class="number">45</span>), (<span class="number">2</span>,<span class="string">&#x27;lhm&#x27;</span>,<span class="number">25</span>) , (<span class="number">3</span>,<span class="string">&#x27;wzg&#x27;</span>,<span class="number">26</span>) , (<span class="number">4</span>,<span class="string">&#x27;tg&#x27;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;wy&#x27;</span>,<span class="number">11</span>), (<span class="number">2</span>,<span class="string">&#x27;dh&#x27;</span>,<span class="number">25</span>) , (<span class="number">3</span>,<span class="string">&#x27;ysq&#x27;</span>,<span class="number">26</span>) , (<span class="number">4</span>,<span class="string">&#x27;mxc&#x27;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tea_stu <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tea_stu <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tea_stu <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>), (<span class="number">3</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tea_stu <span class="keyword">values</span>(<span class="number">4</span>,<span class="number">4</span>), (<span class="number">4</span>,<span class="number">1</span>), (<span class="number">4</span>,<span class="number">2</span>) , (<span class="number">4</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.`name`,t.age,(<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student s,tea_stu ts <span class="keyword">WHERE</span> ts.stuID <span class="operator">=</span> s.stuID <span class="keyword">AND</span> s.age <span class="operator">&gt;</span> <span class="number">12</span> <span class="keyword">AND</span> ts.teaID <span class="operator">=</span> t.teaID) stu_count </span><br><span class="line"><span class="keyword">FROM</span> teacher t </span><br><span class="line"><span class="keyword">WHERE</span> t.age <span class="operator">&lt;</span> <span class="number">40</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.age,t.`name`,total.total </span><br><span class="line"><span class="keyword">FROM</span> teacher t ,(<span class="keyword">SELECT</span> ts.teaID,<span class="built_in">COUNT</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> tea_stu ts,student s <span class="keyword">WHERE</span> ts.stuID <span class="operator">=</span> s.stuID <span class="keyword">and</span> s.age <span class="operator">&gt;</span> <span class="number">12</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.teaID) total</span><br><span class="line"><span class="keyword">WHERE</span> t.teaID <span class="operator">=</span> total.teaID</span><br></pre></td></tr></table></figure><h4 id="3-16-求出发帖最多的人："><a href="#3-16-求出发帖最多的人：" class="headerlink" title="3.16 求出发帖最多的人："></a>3.16 求出发帖最多的人：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这种方式有个缺陷，如果发帖最多的人是多个，就出错了</span><br><span class="line"><span class="keyword">SELECT</span> a.postuser,<span class="built_in">count</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser <span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.postuser,<span class="built_in">count</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser <span class="keyword">HAVING</span> total <span class="operator">&gt;=</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.postuser,<span class="built_in">count</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser <span class="keyword">HAVING</span> total <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(total) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> articles a <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.postuser) t)</span><br></pre></td></tr></table></figure><h4 id="3-17-一个用户表中有一个积分字段，假如数据库中有100多万个用户，若要在每年第一天凌晨将积分清零，你将考虑什么，你将想什么办法解决"><a href="#3-17-一个用户表中有一个积分字段，假如数据库中有100多万个用户，若要在每年第一天凌晨将积分清零，你将考虑什么，你将想什么办法解决" class="headerlink" title="3.17 一个用户表中有一个积分字段，假如数据库中有100多万个用户，若要在每年第一天凌晨将积分清零，你将考虑什么，你将想什么办法解决?"></a>3.17 一个用户表中有一个积分字段，假如数据库中有100多万个用户，若要在每年第一天凌晨将积分清零，你将考虑什么，你将想什么办法解决?</h4><p>只有inert update delete等DML语句才能回滚，</p><p>对于create table,drop table ,alter table等DDL语句是不能回滚。</p><p>方案一:效率会很慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> score<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>方案二:比上述方式快，但是不可回滚</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">column</span> score;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">column</span> score <span class="type">int</span></span><br></pre></td></tr></table></figure><h4 id="3-18-一个用户具有多个角色，请查询出该表中具有该用户的所有角色的其他用户"><a href="#3-18-一个用户具有多个角色，请查询出该表中具有该用户的所有角色的其他用户" class="headerlink" title="3.18 一个用户具有多个角色，请查询出该表中具有该用户的所有角色的其他用户"></a>3.18 <code>一个用户具有多个角色，请查询出该表中具有该用户的所有角色的其他用户</code></h4><p>表数据如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">value</span>` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_age` (`age`),</span><br><span class="line">  KEY `idx_name` (`name`),</span><br><span class="line">  KEY `idx_nickname` (`nickname`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;40&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;zhaoliu&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u1.`name`,<span class="built_in">COUNT</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> `<span class="keyword">user</span>` u1 ,(<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> `<span class="keyword">user</span>` u <span class="keyword">WHERE</span> u.`name` <span class="operator">=</span> <span class="string">&#x27;lisi&#x27;</span>) t <span class="keyword">WHERE</span> t.role_id <span class="operator">=</span> u1.role_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> u1.`name` </span><br><span class="line"><span class="keyword">HAVING</span> total <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>` u2 <span class="keyword">WHERE</span> u2.`name` <span class="operator">=</span> <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-18-xxx公司的sql面试"><a href="#3-18-xxx公司的sql面试" class="headerlink" title="3.18 xxx公司的sql面试"></a>3.18 xxx公司的sql面试</h4><p>employees{id,first_name,last_name,salary,hired_date,department_id}</p><p>departments{id,name}</p><ul><li>基于上述employees表写出查询：写出雇用日期在今年的，或者工资在[1000,2000]之间的，或者员工姓名（last_name）以’Obama’打头的所有员工，列出这些员工的全部个人信息。（4分）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees e <span class="keyword">where</span> date_format(e.hired_date,<span class="string">&#x27;%y&#x27;</span>) <span class="operator">=</span> date_format(now(),<span class="string">&#x27;%y&#x27;</span>) <span class="keyword">or</span> (e.salary <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span>) <span class="keyword">or</span> e.last_name <span class="keyword">like</span> <span class="string">&#x27;Obama%&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>基于上述employees表写出查询：查出部门平均工资大于1800元的部门的所有员工，列出这些员工的全部个人信息。（4分）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.first_name,e.last_name,e.salary,e.hired_date <span class="keyword">from</span> employees e <span class="keyword">where</span> e.department_id <span class="operator">=</span> <span class="keyword">any</span>(<span class="keyword">select</span> e.department_id <span class="keyword">from</span> employees e <span class="keyword">group</span> <span class="keyword">by</span> e.department_id <span class="keyword">having</span> <span class="built_in">avg</span>(e.salary) <span class="operator">&gt;</span> <span class="number">1800</span>)</span><br></pre></td></tr></table></figure><ul><li>基于上述employees表写出查询：查出个人工资高于其所在部门平均工资的员工，列出这些员工的全部个人信息及该员工工资高出部门平均工资百分比。（5分）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span>,(e.salary <span class="operator">-</span> t.avg_salary)<span class="operator">/</span>t.avg_salary percentage <span class="keyword">FROM</span> employees e,(<span class="keyword">SELECT</span> e.department_id,<span class="built_in">avg</span>(e.salary) avg_salary <span class="keyword">FROM</span> employees e <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id) t</span><br><span class="line"><span class="keyword">WHERE</span> t.department_id <span class="operator">=</span> e.department_id <span class="keyword">AND</span> e.salary <span class="operator">&gt;</span> t.avg_salary</span><br></pre></td></tr></table></figure><h4 id="3-19-注册Jdbc驱动程序的三种方式"><a href="#3-19-注册Jdbc驱动程序的三种方式" class="headerlink" title="3.19 注册Jdbc驱动程序的三种方式"></a>3.19 注册Jdbc驱动程序的三种方式</h4><ul><li><p>Class.forName(“com.mysql.jdbc.Driver”);</p></li><li><p>DriverManager.registerDriver(new com.mysql.jdbc.Driver())</p></li><li><p>System.setProperty(“jdbc.drivers”,”com.mysql.jdbc.Driver”);</p></li></ul><p>第二种与第三种注册的方法看起来更加的直接与好理解。第一种方法是通过Class把类先装载到java的虚拟机中，并没有创建Driver类的实例。</p><p>第二种与第一种方法可以脱离jdbc的驱动进行编译，第二种方法不可以的，它一定要有jdbc的驱动才可以通过编译，这样对我们的程序就有很多的不好之处，为程序换数据库会带来麻烦</p><h4 id="3-20-用JDBC如何调用存储过程"><a href="#3-20-用JDBC如何调用存储过程" class="headerlink" title="3.20  用JDBC如何调用存储过程"></a>3.20  用JDBC如何调用存储过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JdbcTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里最好不要这么干，因为驱动名写死在程序中了</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//实际项目中，这里应用DataSource数据，如果用框架，</span></span><br><span class="line">            <span class="comment">//这个数据源不需要我们编码创建，我们只需Datasource ds = context.lookup()</span></span><br><span class="line">            <span class="comment">//cn = ds.getConnection();</span></span><br><span class="line">            cn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">            cstmt = cn.prepareCall(<span class="string">&quot;&#123;call insert_Student(?,?,?)&#125;&quot;</span>);</span><br><span class="line">            cstmt.registerOutParameter(<span class="number">3</span>, Types.INTEGER);</span><br><span class="line">            cstmt.setString(<span class="number">1</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">            cstmt.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">            cstmt.execute();</span><br><span class="line">            <span class="comment">//get第几个，不同的数据库不一样，建议不写</span></span><br><span class="line">            System.out.println(cstmt.getString(<span class="number">3</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         </span><br><span class="line">                   <span class="comment">/*try&#123;cstmt.close();&#125;catch(Exception e)&#123;&#125;</span></span><br><span class="line"><span class="comment">           try&#123;cn.close();&#125;catch(Exception e)&#123;&#125;*/</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cstmt != <span class="literal">null</span>)</span><br><span class="line">                    cstmt.close();</span><br><span class="line">                <span class="keyword">if</span> (cn != <span class="literal">null</span>)</span><br><span class="line">                    cn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-21-JDBC中的PreparedStatement相比Statement的好处"><a href="#3-21-JDBC中的PreparedStatement相比Statement的好处" class="headerlink" title="3.21 JDBC中的PreparedStatement相比Statement的好处"></a>3.21 JDBC中的PreparedStatement相比Statement的好处</h4><p>答：一个sql命令发给服务器去执行的步骤为：语法检查，语义分析，编译成内部指令，缓存指令，执行指令等过程。</p><p>select * from studentwhere id &#x3D;3—-缓存–àxxxxx二进制命令</p><p>select * from studentwhere id &#x3D;3—-直接取-àxxxxx二进制命令</p><p>select * from studentwhere id &#x3D;4— -à会怎么干？</p><p>如果当初是select * from student where id &#x3D;?— -à又会怎么干？</p><p>上面说的是性能提高</p><p>可以防止sql注入。</p><h4 id="3-22-写一个用jdbc连接并访问oracle数据的程序代码"><a href="#3-22-写一个用jdbc连接并访问oracle数据的程序代码" class="headerlink" title="3.22 写一个用jdbc连接并访问oracle数据的程序代码"></a>3.22 写一个用jdbc连接并访问oracle数据的程序代码</h4><h4 id="3-23-Class-forName的作用-为什么要用"><a href="#3-23-Class-forName的作用-为什么要用" class="headerlink" title="3.23 Class.forName的作用?为什么要用?"></a>3.23 Class.forName的作用?为什么要用?</h4><p>按参数中指定的字符串形式的类名去搜索并加载相应的类，如果该类字节码已经被加载过，则返回代表该字节码的Class实例对象，否则，按类加载器的委托机制去搜索和加载该类，如果所有的类加载器都无法加载到该类，则抛出ClassNotFoundException。加载完这个Class字节码后，接着就可以使用Class字节码的newInstance方法去创建该类的实例对象了。</p><p>有时候，我们程序中所有使用的具体类名在设计时（即开发时）无法确定，只有程序运行时才能确定，这时候就需要使用Class.forName去动态加载该类，这个类名通常是在配置文件中配置的，例如，spring的ioc中每次依赖注入的具体类就是这样配置的，jdbc的驱动类名通常也是通过配置文件来配置的，以便在产品交付使用后不用修改源程序就可以更换驱动类名。</p><h4 id="3-24-大数据量下的分页解决方法。"><a href="#3-24-大数据量下的分页解决方法。" class="headerlink" title="3.24 大数据量下的分页解决方法。"></a>3.24 <code>大数据量下的分页解决方法。</code></h4><p><strong>最好的办法是利用sql语句进行分页，这样每次查询出的结果集中就只包含某页的数据内容。</strong></p><p><strong>如果sql语句无法实现分页的情况下，可以考虑对大的结果集通过游标定位方式来获取某页的数据。</strong></p><p>sql语句分页，不同的数据库下的分页方案各不一样，下面是主流的三种数据库的分页sql</p><h4 id="3-25-用-JDBC-查询学生成绩单-把主要代码写出来（考试概率极大）"><a href="#3-25-用-JDBC-查询学生成绩单-把主要代码写出来（考试概率极大）" class="headerlink" title="3.25 用 JDBC 查询学生成绩单, 把主要代码写出来（考试概率极大）"></a>3.25 <code>用 JDBC 查询学生成绩单, 把主要代码写出来（考试概率极大）</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">PreparedStatementpstmt =<span class="literal">null</span>;</span><br><span class="line"><span class="type">Resultset</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Class.forname(driveClassName);</span><br><span class="line">    cn = DriverManager.getConnection(url,username,password);</span><br><span class="line">    pstmt = cn.prepareStatement(<span class="string">&quot;select  score.* from score ,student &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;where score.stuId = student.idand student.name = ?&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">1</span>,studentName);</span><br><span class="line">    <span class="type">Resultset</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        system.out.println(rs.getInt(“subject”)  +  <span class="string">&quot;&quot;</span> + rs.getFloat(“score”) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exceptione)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rs != <span class="literal">null</span>) <span class="keyword">try</span>&#123; rs.close()&#125;<span class="keyword">catch</span>(exception e)&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(pstmt != <span class="literal">null</span>)<span class="keyword">try</span>&#123;pstmt.close()&#125;<span class="keyword">catch</span>(exception e)&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(cn != <span class="literal">null</span>) <span class="keyword">try</span>&#123; cn.close()&#125;<span class="keyword">catch</span>(exception e)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-26-这段代码有什么不足之处"><a href="#3-26-这段代码有什么不足之处" class="headerlink" title="3.26 这段代码有什么不足之处?"></a>3.26 这段代码有什么不足之处?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> ...;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;select * from table1&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有finally语句来关闭各个对象，另外，使用finally之后，要把变量的定义放在try语句块的外面，以便在try语句块之外的finally块中仍可以访问这些变量。</p><h4 id="3-27-说出数据连接池的工作机制是什么"><a href="#3-27-说出数据连接池的工作机制是什么" class="headerlink" title="3.27 说出数据连接池的工作机制是什么?"></a>3.27 <code>说出数据连接池的工作机制是什么?</code></h4><p>J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。</p><p>客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为忙。</p><p>如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量有配置参数决定。</p><p>当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。</p><p>实现方式，返回的Connection是原始Connection的代理，代理Connection的close方法不是真正关连接，而是把它代理的Connection对象还回到连接池中</p><h4 id="3-28-为什么要用-ORM-和-JDBC-有何不一样"><a href="#3-28-为什么要用-ORM-和-JDBC-有何不一样" class="headerlink" title="3.28 为什么要用 ORM?  和 JDBC 有何不一样?"></a>3.28 <code>为什么要用 ORM?  和 JDBC 有何不一样?</code></h4><p><strong>orm是一种思想，就是把object转变成数据库中的记录，或者把数据库中的记录转变成object</strong>，我们可以用jdbc来实现这种思想，其实，如果我们的项目是严格按照oop方式编写的话，我们的jdbc程序不管是有意还是无意，就已经在实现orm的工作了。</p><p>现在有许多orm工具，它们底层调用jdbc来实现了orm工作，我们直接使用这些工具，就省去了直接使用jdbc的繁琐细节，提高了开发效率，现在用的较多的orm工具是Mybatis</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之设计原则</title>
      <link href="/posts/4a7ab732/"/>
      <url>/posts/4a7ab732/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/files/image/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/image-20200421151206761.png" alt="image-20200421151206761"></p><h2 id="1-任务描述"><a href="#1-任务描述" class="headerlink" title="1. 任务描述"></a>1. 任务描述</h2><ul><li><p>以用户管理为例演示单一职责原则。</p></li><li><p>演示里氏替换原则。</p></li><li><p>演示依赖倒置原则。</p></li><li><p>以订单为例演示接口隔离原则。</p></li><li><p>演示迪米特法则。</p></li><li><p>以书店售书为例演示开闭原则。</p></li></ul><h2 id="2-单一职责原则"><a href="#2-单一职责原则" class="headerlink" title="2.单一职责原则"></a>2.单一职责原则</h2><h4 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h4><p><strong>一个类，应当只有一个引起它变化的原因；即一个类应该只有一个职责。（There should never be more than one reason for a class to change.）</strong></p><p>就一个类而言，应该只专注于做一件事和仅有一个引起变化的原因，这就是所谓的单一职责原则。该原则提出了对对象职责的一种理想期望，对象不应该承担太多职责，正如人不应该一心分为二用。<strong><em>唯有专注，才能保证对象的高内聚；唯有单一，才能保证对象的细粒度</em>。</strong>对象的高内聚与细粒度有利于对象的重用。一个庞大的对象承担了太多的职责，当客户端需要该对象的某一个职责时，就不得不将所有的职责都包含进来，从而造成冗余代码。</p><p>单一职责原则还有利于对象的稳定。所谓“职责”，就是对象能够承担的责任，并以某种行为方式来执行。对象的职责总是要提供给其他对象进行调用的，从而形成对象与对象的协作，由此产生对象之间的依赖关系。类的职责越少，则对象之间的依赖关系就越少，耦合度就减弱，受其他对象的约束与牵制就越少，从而保证了系统的可扩展性。因此，在单一职责原则中，也可以把“职责”定义为“变化的原因”。如果存在多个动机去改变一个类，那么这个类就具有多于一个的职责。“变化的原因”只有实际发生时才有意义，可能预测到会有多个原因引起这个类的变化，但这仅仅是预测，并没有真的发生，那么这个类仍可看做具有单一职责，不需要分离职责。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之概述</title>
      <link href="/posts/54d03dc6/"/>
      <url>/posts/54d03dc6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/files/image/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A6%82%E8%BF%B0/image-20200417115802474.png" alt="image-20200417115802474"></p><h2 id="1-设计模式概述"><a href="#1-设计模式概述" class="headerlink" title="1.设计模式概述"></a>1.设计模式概述</h2><p>设计模式（Design Pattern）是一套被反复使用、多数人知晓、经过分类编目的优秀代码设计经验的总结。<strong>使用设计模式是为了重用代码、使代码更易理解并保证代码的可靠性</strong>。毫无疑问，设计模式的使用于己于他人于系统都是有利的，设计模式使代码编制真正工程化，是软件工程的基石，使人们可以更加简单方便地复用成功的设计和体系结构，将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。在面向对象编程语言中（例如Java），设计模式为我们提供了一套可复用的面向对象技术。</p><p><strong>Java设计模式贯彻的原理是：面向接口编程，而不是面向实现。其目标原则是：降低耦合，增强灵活性。</strong></p><h2 id="2-设计模式简史"><a href="#2-设计模式简史" class="headerlink" title="2.设计模式简史"></a>2.设计模式简史</h2><ul><li>起源于建筑工程设计大师Christopher Alexander的关于城市规划和建筑设计的著作</li><li>1995年GoF的“Design Patterns: Elements of Reusable Object-Oriented Software”（《设计模式：可复用面向对象软件的基础》）出版。该书第一次将设计模式提升到理论高度，并将之规范化，<strong>同时提出了 23 种基本设计模式</strong></li></ul><h2 id="3-设计模式要素"><a href="#3-设计模式要素" class="headerlink" title="3.设计模式要素"></a>3.设计模式要素</h2><ul><li><p><em>模式名称（pattern name）</em></p><p>设计模式的名称简洁地描述了设计模式的问题、解决方案和效果。一个模式必须有一个有意义的、简短而准确的名字。好的模式名称便于设计人员之间交流思想，进行抽象讨论及研究设计结果。找到恰当的模式名称也是设计模式编目工作的难点之一，命名一个新的模式，就可以讨论模式并在编写文档时使用它们。</p></li><li><p><em>问题（problem）</em></p><p>描述了应该在何时使用模式。它解释了设计问题和问题存在的前因后果，它可能描述了特定的设计问题，如怎样用对象表示算法等，也可能描述了导致不灵活设计的类或对象结构。有时候，问题部分会包括使用模式必须满足的一系列先决条件。</p></li><li><p><em>环境或初始环境（context或initial context）</em></p><p>环境说明模式的使用范围，也是模式应用之前的起始条件（也叫前提条件）。</p></li><li><p><em>解决方案（solution）</em></p><p>描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式。模式就像一个模板，可应用于多种不同场合，因此解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象组合）来解决这个问题。</p></li><li><p><em>效果（consequences）</em></p><p>描述了模式应用的效果及使用模式应权衡的问题。效果用来描述设计模式的利弊，它往往是衡量模式是否可用的重要因素，对于评价设计选择和理解使用模式的代价及好处具有重要意义。软件效果大多关注对时间和空间的衡量，表述了语言和实现问题。因为复用是面向对象设计的要素之一，所以模式效果包括其对系统的灵活性、扩展性或可移植性的影响，显式地列出这些效果对理解和评价这些模式具有很大的帮助。</p></li><li><p><em>举例（examples）</em></p><p>使用一个或多个示意性的应用来说明特定的真实环境，以及模式是如何应用到环境中、改变环境并且给出当模式结束时的末态环境。例子有助于理解模式的使用方法和适用性，每一个例子均可以附带一个实现的样本，说明解答是如何给出来的。从熟知系统里取出来的、有视觉效果的，或以比喻方式表达的例子，更易于使用者理解。</p></li><li><p><em>末态环境（resulting context）</em></p><p>模式应用到系统之后的状态。末态环境包括模式带来的好结果和坏结果，以及新状态中含有的其他问题和可能涉及的其他有关系的模式。末态环境是模式的末态条件和可能有的副作用。描述末态环境可以帮助比较末态环境与起始环境的区别和联系。</p></li><li><p><em>推理（rationale）</em></p><p>推理解释本模式的步骤、规则，以及此模式作为一个整体是如何以特定的方式解决模式的。推理让使用者知道模式是如何工作的，为什么可以工作，以及使用此模式的优点是什么。模式的解答描述模式外部的、可见的结构和行为，而推理则给出模式在系统表层以下的深层结构和关键机制。</p></li><li><p><em>其他有关模式（related pattern）</em></p><p>描述在现有的系统中此模式与其他模式的静态和动态的关系。相关模式的初始环境和末态环境经常是相容的，这些模式有可能是本模式的前任模式，即应用了这些模式可以给出本模式的初始环境，也有可能是本模式的继任模式，即本模式的应用给出这些模式的初始环境。这些模式还有可能是本模式的替换模式，即给出相同问题的不同解答，也有可能是本模式的相互依赖的模式，可以或必须和本模式同时使用。</p></li><li><p><em>已知的应用（known uses）</em></p><p>已知的应用是在已有的系统模式中出现和应用的例子，有助于证明此模式确实是对一个重复发生的问题可行的解答。已知的应用经常成为教学用的教材。</p></li></ul><h2 id="4-设计模式分类"><a href="#4-设计模式分类" class="headerlink" title="4.设计模式分类"></a>4.设计模式分类</h2><ul><li>创建型</li><li>结构型</li><li>行为型</li></ul><h4 id="4-1创建型"><a href="#4-1创建型" class="headerlink" title="4.1创建型"></a>4.1创建型</h4><p>创建型模式是用来创建对象的模式，抽象了实例化的过程，帮助一个系统独立于其关联对象的创建、组合和表示方式。</p><p>所有的创建型模式都有两个主要功能：</p><ul><li><em>将系统所使用的具体类的信息封装起来；</em></li><li><em>隐藏类的实例是如何被创建和组织的。外界对于这些对象只知道它们共同的接口，而不清楚其具体的实现细节。</em></li></ul><p>创建型模式的作用可以概括为如下两点：</p><ul><li><em>封装创建逻辑，不仅仅是new一个对象那么简单；</em></li><li><em>封装创建逻辑变化，客户代码尽量不修改，或尽量少修改。</em></li></ul><p>常见的创建型设计模式：</p><ul><li><strong>单例模式（Singleton Pattern）</strong>：一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</li><li><strong>工厂方法模式（Factory Pattern）</strong>：在工厂方法模式中，工厂类成为了抽象类，实际的创建工作将由其具体子类来完成。工厂方法的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中去，强调的是“单个对象”的变化。</li><li><strong>抽象工厂模式（Abstract Factory）</strong>：抽象工厂是所有工厂模式中最为抽象和最具有一般性的一种形态。抽象工厂可以向客户提供一个接口，使得客户可以在不必指定产品具体类型的情况下，创建多个产品族中的产品对象，强调的是“系列对象”的变化。</li><li><strong>建造者模式（Builder Pattern）</strong>：把构造对象实例的逻辑移到了类的外部，在类的外部定义了该类的构造逻辑。它把一个复杂对象的构造过程从对象的表示中分离出来，其直接效果是将一个复杂的对象简化为一个比较简单的目标对象，强调的是产品的构造过程。</li><li><strong>原型模式（Prototype Pattern）</strong>：原型模式和工厂模式一样，同样对客户隐藏了对象创建工作，但与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过复制一个现有对象生成新对象。</li></ul><h4 id="4-2结构型"><a href="#4-2结构型" class="headerlink" title="4.2结构型"></a>4.2结构型</h4><p>顾名思义，结构型模式讨论的是类和对象的结构，它采用继承机制来组合接口或实现（类结构型模式），或者通过组合一些对象实现新的功能（对象结构型模式）。这些结构型模式在某些方面具有很大的相似性，但侧重点却各有不同。</p><p>常见结构型设计模式有以下几种：</p><ul><li><strong>代理模式（Proxy）</strong>：为其他对象提供一种代理以控制对该对象的访问。</li><li><strong>装饰模式（Decorator）</strong>：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</li><li><strong>适配器模式（Adapter）</strong>：将一个类的接口变换成客户端所期待的另一接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</li><li><strong>组合模式（Composite）</strong>：也叫合成模式，将对象组合成树形结构以表示“部分—整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</li><li><strong>桥梁模式（Bridge）</strong>：也叫桥接模式，将抽象和实现解耦，使得两者可以独立变化。</li><li><strong>外观模式（Facade）</strong>：也叫门面模式，要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行，外观模式提供一个高层次的接口，使得子系统更易于使用。</li><li><strong>享元模式（Flyweight）</strong>：是池技术的重要实现方式，使用共享对象可有效地支持大量的细粒度的对象。</li></ul><h4 id="4-3行为型"><a href="#4-3行为型" class="headerlink" title="4.3行为型"></a>4.3行为型</h4><p>行为型设计模式关注的是对象的行为，用来解决对象之间的联系问题，常见的行为型设计模式有以下几种。</p><ul><li><strong>模板方法模式（Template Method）</strong>：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li><strong>命令模式（Command）</strong>：是一种高内聚的模式，将一个请求封装成一个对象，从而使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</li><li><strong>责任链模式（Chain of Responsibility）</strong>：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</li><li><strong>策略模式（Strategy）</strong>：也叫政策模式，定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</li><li><strong>迭代器模式（Iterator）</strong>：提供一种方法访问一个容器对象中的各个元素，而又不需要暴露该对象的内部细节。</li><li><strong>中介者模式（Mediator）</strong>：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li><li><strong>观察者模式（Observer）</strong>：也叫发布订阅模式，定义对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</li><li><strong>备忘录模式（Memento）</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li><li><strong>访问者模式（Visitor）</strong>：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</li><li><strong>状态模式（State</strong>）：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类型，状态模式的核心是封装，状态的变更引起行为的变更。</li><li><strong>解释器模式（Interpreter）</strong>：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该文法表示来解释语言中的句子。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见问题</title>
      <link href="/posts/42b8ec66/"/>
      <url>/posts/42b8ec66/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="报错：refusing-to-merge-unrelated-histories"><a href="#报错：refusing-to-merge-unrelated-histories" class="headerlink" title="报错：refusing to merge unrelated histories"></a>报错：refusing to merge unrelated histories</h3><p>新GitHub新建仓库之后，希望将原有的项目上传之新仓库中，但是在使用git pull是出现上述错误！</p><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><hr><h3 id="代码冲突的常用解决方式"><a href="#代码冲突的常用解决方式" class="headerlink" title="代码冲突的常用解决方式"></a>代码冲突的常用解决方式</h3><p>1.commit之后pull代码产生的冲突</p><p>冲突文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">b789</span><br><span class="line">=======</span><br><span class="line">b45678910</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dcc</span><br></pre></td></tr></table></figure><p><code>&lt;&lt;&lt;HEAD</code>和<code>===</code>之间的内容是自己commit的内容</p><p><code>===</code>和<code>&gt;&gt;&gt;</code>之间的内容是pull下来的内容</p><p>2.stash pop之后产生的冲突</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream</span><br><span class="line">1111112222</span><br><span class="line">=======</span><br><span class="line">11111111</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes</span><br></pre></td></tr></table></figure><p><code>&lt;&lt;&lt;Updated upstream</code> 和<code>=====</code>之间的内容是pop之前的内容</p><p><code>====</code>和<code>&gt;&gt;&gt;stashed changes</code>之间的内容是pop出来的内容</p><hr><h3 id="Git忽略规则-gitignore配置）不生效原因和解决"><a href="#Git忽略规则-gitignore配置）不生效原因和解决" class="headerlink" title="Git忽略规则(.gitignore配置）不生效原因和解决"></a>Git忽略规则(.gitignore配置）不生效原因和解决</h3><p>.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</p><p>解决方法: git清除本地缓存（改变成未track状态），然后再提交:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>需要特别注意的是：<br>1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。<br>2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。</p><hr><h3 id="使用git-pull命令出现以下提示："><a href="#使用git-pull命令出现以下提示：" class="headerlink" title="使用git pull命令出现以下提示："></a>使用git pull命令出现以下提示：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; release</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因是本地分支需要跟远程分支关联上，或者使用命令 git pull <remote> <branch> </p><h3 id="git文件-x2F-文件夹命名大小写不敏感引发的问题"><a href="#git文件-x2F-文件夹命名大小写不敏感引发的问题" class="headerlink" title="git文件&#x2F;文件夹命名大小写不敏感引发的问题"></a>git文件&#x2F;文件夹命名大小写不敏感引发的问题</h3><p>现象：执行<code> git add .</code> 没有任何变化，再次执行<code>git status</code>命令发现依旧显示有修改,两条命令循环往复一直无果</p><p>解决办法: 先执行以下命令设置git大小写敏感</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config core.ignorecase false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再执行<code>git add .</code>等一系列命令就发现有效了</p>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git设置SSH</title>
      <link href="/posts/acf464b3/"/>
      <url>/posts/acf464b3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-检查密钥是否存在"><a href="#1-检查密钥是否存在" class="headerlink" title="1.检查密钥是否存在"></a>1.检查密钥是否存在</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="2-生成密钥"><a href="#2-生成密钥" class="headerlink" title="2.生成密钥"></a>2.生成密钥</h3><h5 id="2-1备份密钥（可选）"><a href="#2-1备份密钥（可选）" class="headerlink" title="2.1备份密钥（可选）"></a>2.1备份密钥（可选）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir key_backup</span><br><span class="line">cp id_rsa* key_backup</span><br><span class="line">rm id_rsa*</span><br></pre></td></tr></table></figure><h5 id="2-2生成新密钥："><a href="#2-2生成新密钥：" class="headerlink" title="2.2生成新密钥："></a>2.2生成新密钥：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;您的email&quot;</span><br></pre></td></tr></table></figure><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。<br>密钥生成后您可以在你本机系统盘下，您的用户文件夹里发现一个.ssh文件，其中的id_rsa.pub文件里储存的即为刚刚生成的ssh公钥。</p><h3 id="3-复制公钥"><a href="#3-复制公钥" class="headerlink" title="3.复制公钥"></a>3.复制公钥</h3><h5 id="3-1手动复制"><a href="#3-1手动复制" class="headerlink" title="3.1手动复制"></a>3.1手动复制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>注意：手工复制公钥时不要复制多余的空格，否则可能添加不成功。</p><h5 id="3-2使用命令直接复制密钥到剪贴板"><a href="#3-2使用命令直接复制密钥到剪贴板" class="headerlink" title="3.2使用命令直接复制密钥到剪贴板"></a>3.2使用命令直接复制密钥到剪贴板</h5><ul><li><strong>Windows:</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li><strong>Mac:</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li><strong>Linux:</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="4-最后将公钥串设置到代码库"><a href="#4-最后将公钥串设置到代码库" class="headerlink" title="4.最后将公钥串设置到代码库"></a>4.最后将公钥串设置到代码库</h3><p><strong>参考</strong>：<a href="https://support.huaweicloud.com/usermanual-codehub/devcloud_hlp_00083.html"><strong>设置SSH密钥&#x2F;HTTPS密码</strong></a></p><hr>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/posts/c6b59e99/"/>
      <url>/posts/c6b59e99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|列名1|列名2|列名3|</span><br><span class="line">|--|--|--|</span><br><span class="line">|我是第一列|我是第二列|我是第三列|</span><br></pre></td></tr></table></figure><table><thead><tr><th>列名1</th><th>列名2</th><th>列名3</th></tr></thead><tbody><tr><td>我是第一列</td><td>我是第二列</td><td>我是第三列</td></tr></tbody></table><h2 id="单表格指定列宽"><a href="#单表格指定列宽" class="headerlink" title="单表格指定列宽"></a>单表格指定列宽</h2><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width: 60pt&quot;&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下:</p><table><thead><tr><th><div style="width: 60pt">列名1</div></th><th><div style="width: 6pt">列名2</div></th><th><div style="width: 600pt">列名3</div></th></tr></thead><tbody><tr><td>我是第一列</td><td>我是第二列</td><td>我是第三列</td></tr></tbody></table><p><code>全局指定列宽配置前提下,优先单表格指定列宽</code></p><h2 id="全局指定列宽"><a href="#全局指定列宽" class="headerlink" title="全局指定列宽"></a>全局指定列宽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">table th:first-of-type &#123;</span><br><span class="line">    width: 10%;</span><br><span class="line">&#125;</span><br><span class="line">table th:nth-of-type(2) &#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">&#125;</span><br><span class="line">table th:nth-of-type(2) &#123;</span><br><span class="line">    width: 20%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下:</p><style>table th:first-of-type {    width: 10%;}table th:nth-of-type(2) {    width: 70%;}table th:nth-of-type(2) {    width: 20%;}</style><table><thead><tr><th>列名1</th><th>列名2</th><th>列名3</th></tr></thead><tbody><tr><td>我是第一列</td><td>我是第二列</td><td>我是第三列</td></tr></tbody></table><p><code>如果要固定指定列宽把百分比改为固定支就行,单位pt、px、cm、em等,这种设置方式属于全局的,即同一个文件所有表格都会生效</code></p><h2 id="表格内换行"><a href="#表格内换行" class="headerlink" title="表格内换行"></a>表格内换行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|列名1|列名2|列名3|</span><br><span class="line">|--|--|--|</span><br><span class="line">|我是第一列|我是第二列|我是&lt;br&gt;第三列|</span><br></pre></td></tr></table></figure><p>效果如下:</p><table><thead><tr><th>列名1</th><th>列名2</th><th>列名3</th></tr></thead><tbody><tr><td>我是第一列</td><td>我是第二列</td><td>我是<br>第三列</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis注解版</title>
      <link href="/posts/b38c605c/"/>
      <url>/posts/b38c605c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>mybatis-注解版sql一直以来被应用的很少，主要是由于sql修改之后还需要编译之后才能运行，下面根据本人在工作中用到的情况分需求来一一演示，如有不对之处还望指正，请轻喷。</p><!---more---><h1 id="1、四个本命注解-Select、-Update、-Delete、-Insert"><a href="#1、四个本命注解-Select、-Update、-Delete、-Insert" class="headerlink" title="1、四个本命注解@Select、@Update、@Delete、@Insert"></a>1、四个本命注解@Select、@Update、@Delete、@Insert</h1><p>CRUD使用的就是上面的注解，这个都较为普通，在这里简单描述一下,需要注意的时：<strong>四个注解都是支持String数组的</strong></p><p>所以可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&#123; &quot;insert into tbl_varys_r_account(ac_parent_account_id,ac_accont_id) values(#&#123;pid&#125;,#&#123;sid&#125;)&quot; &#125;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertAccountLinkedInfo</span><span class="params">(<span class="meta">@Param(&quot;pid&quot;)</span> Integer parentId, <span class="meta">@Param(&quot;sid&quot;)</span> Integer subId)</span>;</span><br></pre></td></tr></table></figure><p>当然也可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tbl_varys_r_account(ac_parent_account_id,ac_accont_id) values(#&#123;pid&#125;,#&#123;sid&#125;)&quot; )</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertAccountLinkedInfo</span><span class="params">(<span class="meta">@Param(&quot;pid&quot;)</span> Integer parentId, <span class="meta">@Param(&quot;sid&quot;)</span> Integer subId)</span>;</span><br></pre></td></tr></table></figure><h2 id="1）-Select"><a href="#1）-Select" class="headerlink" title="1）@Select"></a>1）@Select</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tbl_varys_m_user t where t.us_username = #&#123;username&#125; and t.us_pwd = #&#123;password&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Results(id = &quot;user_resultMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;id&quot;,  column = &quot;us_uuid&quot;,id=true),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;orgid&quot;,  column = &quot;us_orgid_fk&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;username&quot;,  column = &quot;us_username&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;password&quot;,  column = &quot;us_pwd&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;nickname&quot;,  column = &quot;us_nickname&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;creatorid&quot;,  column = &quot;us_usid_creator&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;telNum&quot;,  column = &quot;us_tel_num&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;status&quot;,  column = &quot;us_status&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;type&quot;,  column = &quot;us_type&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;email&quot;,  column = &quot;us_email&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;isSub&quot;,  column = &quot;us_issub&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;createTime&quot;,  column = &quot;us_create_time&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;modifyTime&quot;,  column = &quot;us_modify_time&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">User <span class="title function_">selectUserByPwdAndUsername</span><span class="params">(<span class="meta">@Param(&quot;password&quot;)</span> String password, <span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-Update"><a href="#2-Update" class="headerlink" title="2)@Update"></a>2)@Update</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&#123; &quot;update tbl_varys_m_user set us_pwd = #&#123;newPwd&#125; where us_uuid = #&#123;uuid&#125; and us_pwd = #&#123;oldPwd&#125;&quot; &#125;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">modifyPassword</span><span class="params">(<span class="meta">@Param(&quot;uuid&quot;)</span> Integer uuid, <span class="meta">@Param(&quot;oldPwd&quot;)</span> String oldPassword,<span class="meta">@Param(&quot;newPwd&quot;)</span> String newPassword)</span>;</span><br></pre></td></tr></table></figure><h2 id="3-Insert"><a href="#3-Insert" class="headerlink" title="3)@Insert"></a>3)@Insert</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&#123; &quot;insert into tbl_varys_r_account(ac_parent_account_id,ac_accont_id) values(#&#123;pid&#125;,#&#123;sid&#125;)&quot; &#125;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertAccountLinkedInfo</span><span class="params">(<span class="meta">@Param(&quot;pid&quot;)</span> Integer parentId, <span class="meta">@Param(&quot;sid&quot;)</span> Integer subId)</span>;</span><br></pre></td></tr></table></figure><h2 id="4-Delete"><a href="#4-Delete" class="headerlink" title="4)@Delete"></a>4)@Delete</h2><p>由于当前项目我负责部分还为涉及delete操作，就暂时不展示了，不过用户和上面的都一样</p><h1 id="2、-Results注解复用resultMap"><a href="#2、-Results注解复用resultMap" class="headerlink" title="2、@Results注解复用resultMap"></a>2、@Results注解复用resultMap</h1><p>之前在写xml文件时是可以复用ResultMap的，注解版依旧可以复用，就像上面Select展示的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results(id = &quot;user_resultMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;id&quot;,  column = &quot;us_uuid&quot;,id=true),</span></span><br><span class="line"><span class="meta">    ....</span></span><br></pre></td></tr></table></figure><p>只需要在@Results注解中设置属性id的值，再其他方法放可以通过注解@ResultMap注解复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tbl_varys_m_user t where t.us_username = #&#123;username&#125; and t.us_email = #&#123;email&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;user_resultMap&quot;)</span></span><br><span class="line">User <span class="title function_">selectUserByAccountAndEmail</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;email&quot;)</span> String email)</span>;</span><br></pre></td></tr></table></figure><h1 id="3、如何设置主键返回"><a href="#3、如何设置主键返回" class="headerlink" title="3、如何设置主键返回"></a>3、如何设置主键返回</h1><p>此处主页分成两种情况，返回自增主键和非自增主键</p><h2 id="1）返回自增主键"><a href="#1）返回自增主键" class="headerlink" title="1）返回自增主键"></a>1）返回自增主键</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&#123; &quot;insert into tbl_varys_m_user(us_orgid_fk,us_username,&quot;, &quot;us_pwd,us_nickname,us_usid_creator,&quot;,&quot;us_tel_num,us_email,us_status,&quot;, &quot;us_type,us_issub,us_create_time) &quot;, &quot;values(#&#123;orgid&#125;,#&#123;username&#125;,&quot;,</span></span><br><span class="line"><span class="meta">&quot;#&#123;password&#125;,#&#123;nickname&#125;,#&#123;creatorID&#125;,&quot;, &quot;#&#123;telNum&#125;,#&#123;email&#125;,#&#123;status&#125;,&quot;, &quot;&#x27;1&#x27;,#&#123;isSub&#125;,#&#123;createTime&#125;)&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;userid&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUserinfo</span><span class="params">(CustomerRegisterForm registerForm)</span>;</span><br></pre></td></tr></table></figure><p>增加注解@Options并设置属性useGeneratedKeys为true，同时指定主键返回到当前对象的那个字段keyProperty &#x3D; “userid”</p><h2 id="2）返回非自增主键"><a href="#2）返回非自增主键" class="headerlink" title="2）返回非自增主键"></a>2）返回非自增主键</h2><p>返回非自增主键需要用到注解@SelectKey，由于当前项目未涉及到非自曾主键的返回，在此就引用《Mybatis从入门到精通》一书中的内容</p><p><img src="/img/posts/2018-11-15-mybatis-annotation-sql-1.png" alt="返回非自增主键"></p><h1 id="4、如何验证参数非空"><a href="#4、如何验证参数非空" class="headerlink" title="4、如何验证参数非空"></a>4、如何验证参数非空</h1><h2 id="1）使用标签”-lt-script-gt-”"><a href="#1）使用标签”-lt-script-gt-”" class="headerlink" title="1）使用标签”&lt;script&gt;”"></a>1）使用标签”&lt;script&gt;”</h2><p>自此先做个补充，使用此标签之后类同xml文件中的动态sql，可以跟在xml中的动态sql写法一样，同样也可以用foreach、when、if等标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123; &quot;&lt;script&gt;&quot;, &quot;SELECT c.td_mcn_name AS clientName, a.us_tel_num AS phoneNum,a.us_email AS email, &quot;,</span></span><br><span class="line"><span class="meta">&quot;b.og_wechatnum AS wechatNum, b.og_publicnum_type AS publicNumType, d.nt_name AS industry, &quot;,</span></span><br><span class="line"><span class="meta">&quot;CONCAT(e.ap_name, f.ac_name) AS provinceAndCity,g.mt_name AS mediaType, a.us_status AS &#x27;status&#x27; &quot;,</span></span><br><span class="line"><span class="meta">&quot;FROM tbl_varys_m_user a, tbl_varys_m_organization b, tbl_varys_m_thirdplatinfo c, &quot;,</span></span><br><span class="line"><span class="meta">&quot;tbl_varys_d_industry d, tbl_varys_d_area_province e,tbl_varys_d_area_city f, tbl_varys_d_media_type g &quot;,</span></span><br><span class="line"><span class="meta">&quot;WHERE a.us_orgid_fk = b.og_id AND a.us_uuid = c.td_usid_fk AND b.og_industry_fk = d.nt_id &quot;,</span></span><br><span class="line"><span class="meta">&quot;AND b.og_arid_province = e.ap_id AND b.og_arid_city = f.ac_id AND c.td_mdid_fk = g.mt_id &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;provinceID != null&#x27;&gt; AND b.og_arid_province = #&#123;provinceID&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;cityID != null&#x27;&gt; AND b.og_arid_city = #&#123;cityID&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;countyID != null&#x27;&gt; AND b.og_arid_county = #&#123;countyID&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;status != null &#x27;&gt; AND a.us_status = #&#123;status&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;publicNumType != null&#x27;&gt; AND b.og_publicnum_type = #&#123;publicNumType&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;industryID != null&#x27;&gt; AND b.og_industry_fk = #&#123;industryID&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;mediaTypeID != null&#x27;&gt; AND c.td_mdid_fk  &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;when test = &#x27;startIndex != null and pageSize != null&#x27;&gt; LIMIT #&#123;startIndex&#125;,#&#123;pageSize&#125; &lt;/when&gt; &quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot; &#125;)</span></span><br><span class="line">List&lt;ClientSimpleForm&gt; <span class="title function_">selectUserInfoListByPage</span><span class="params">(SearchClientListForm condition)</span>;</span><br></pre></td></tr></table></figure><p>另外，<strong>上面的sql中没有用到ResulMap做映射，使用关键字AS改了结果集中的别名，这两种方式都可以</strong></p><h2 id="2）使用Provider注解"><a href="#2）使用Provider注解" class="headerlink" title="2）使用Provider注解"></a>2）使用Provider注解</h2><p>CRUD的四个基本注解都有个Provider形式的注解（@SelectProvider…）</p><h3 id="①、写个方法返回sql，在该方法中进行非空验证"><a href="#①、写个方法返回sql，在该方法中进行非空验证" class="headerlink" title="①、写个方法返回sql，在该方法中进行非空验证"></a>①、写个方法返回sql，在该方法中进行非空验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">queryConditionNotEmpty</span><span class="params">(<span class="keyword">final</span> SearchMCNListForm condition)</span> &#123;</span><br><span class="line"><span class="type">SQL</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SQL</span>()</span><br><span class="line">.SELECT(<span class="string">&quot;b.td_mcn_num,c.ap_name,a.og_publicnum,a.og_wechatnum,f.us_username,&quot;</span></span><br><span class="line">+ <span class="string">&quot;d.mt_name,a.og_expire_time,e.tp_id,e.tp_name,b.td_tel_num,b.td_loginstate,e.tp_logo_url&quot;</span>)</span><br><span class="line">.FROM(<span class="string">&quot;tbl_varys_m_thirdplatinfo b,tbl_varys_m_organization a,tbl_varys_d_area_province c&quot;</span></span><br><span class="line">+ <span class="string">&quot;,tbl_varys_d_media_type d,tbl_varys_d_third_plat e,tbl_varys_m_user f&quot;</span>);</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;b.td_orgid_fk = a.og_id AND b.td_mdid_fk = d.mt_id AND a.og_arid_province = c.ap_id &quot;</span></span><br><span class="line">+ <span class="string">&quot;AND b.td_platid_fk = e.tp_id AND b.td_usid_fk = f.us_uuid&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getCityID()) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;a.og_arid_city = #&#123;countyID&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getCountyID()) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;a.og_arid_city = #&#123;cityID&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getProvinceID()) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;a.og_arid_province = #&#123;provinceID&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getStatus()) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;b.td_loginstate = #&#123;status&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getThirdPartyPlatInfoID()) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;b.td_platid_fk = #&#123;thirdPartyPlatInfoID&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getMcnNum() &amp;&amp; <span class="string">&quot;&quot;</span>.equals(condition.getMcnNum())) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;b.td_mcn_num = #&#123;mcnNum&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != condition.getPublicNum() &amp;&amp; <span class="string">&quot;&quot;</span>.equals(condition.getPublicNum())) &#123;</span><br><span class="line">sqlStr.WHERE(<span class="string">&quot;a.og_publicnum = #&#123;publicNum&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sqlStr.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②、使用Provider注解（如下：-SelectProvider）在持久层对应方法中指定，相当于代替了CRUD的源注解（如：-Select）"><a href="#②、使用Provider注解（如下：-SelectProvider）在持久层对应方法中指定，相当于代替了CRUD的源注解（如：-Select）" class="headerlink" title="②、使用Provider注解（如下：@SelectProvider）在持久层对应方法中指定，相当于代替了CRUD的源注解（如：@Select）"></a>②、使用Provider注解（如下：@SelectProvider）在持久层对应方法中指定，相当于代替了CRUD的源注解（如：@Select）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mcnID&quot;, column = &quot;td_mcn_num&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;provinceName&quot;, column = &quot;ap_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;publicName&quot;, column = &quot;og_publicnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;wechatNum&quot;, column = &quot;og_wechatnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;number121&quot;, column = &quot;us_username&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mediaTypeName&quot;, column = &quot;mt_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;lastTime&quot;, column = &quot;og_expire_time&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;id&quot;, column = &quot;tp_id&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;platName&quot;, column = &quot;tp_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;phone&quot;, column = &quot;td_tel_num&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;url&quot;, column = &quot;tp_logo_url&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;status&quot;, column = &quot;td_loginstate&quot;</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@SelectProvider(method = &quot;queryConditionNotEmpty&quot;,type=Test.class)</span></span><br><span class="line">List&lt;MCNInfoForm&gt; <span class="title function_">selectOrganizationList</span><span class="params">(SearchMCNListForm condition)</span>;</span><br></pre></td></tr></table></figure><p><em>写在后面：不过本人在使用Provider注解替代CRUD注解时，通过单元测试报错，BuidlerException，由于时间的原因没来得及细分析原因，直接改成了使用”&lt;script&gt;”标签的写法，再次先留下疑问，后续补充……</em></p><h1 id="5、如何根据结果集封装复杂对象"><a href="#5、如何根据结果集封装复杂对象" class="headerlink" title="5、如何根据结果集封装复杂对象"></a>5、如何根据结果集封装复杂对象</h1><p>注解版本将结果集映射到java的POJO对象还是有很多不完善的功能，这一点没有xml文件上的功能全面，本人体会的就是在一个对象里面有个集合属性的时候在映射里面的集合属性的时候就出现了问题，后来改用java代码来二次处理数据…..</p><h2 id="1）collection（对象内韩集合类型的属性）"><a href="#1）collection（对象内韩集合类型的属性）" class="headerlink" title="1）collection（对象内韩集合类型的属性）"></a>1）collection（对象内韩集合类型的属性）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dao层的接口方法如下</span></span><br><span class="line">List&lt;MCNAccountSimpleForm&gt; <span class="title function_">selectOrganizationList</span><span class="params">(SearchMCNListForm condition)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回的对象如下</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MCNAccountSimpleForm</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String mcnID;<span class="comment">//mcnNum</span></span><br><span class="line"><span class="keyword">private</span> String provinceName;<span class="comment">// 省份名称</span></span><br><span class="line"><span class="keyword">private</span> String publicName; <span class="comment">// 公众号名称</span></span><br><span class="line"><span class="keyword">private</span> String wechatNum; <span class="comment">// 微信号</span></span><br><span class="line"><span class="keyword">private</span> String number121; <span class="comment">// 121账号</span></span><br><span class="line"><span class="keyword">private</span> String mediaTypeName; <span class="comment">// 媒体类型</span></span><br><span class="line"><span class="keyword">private</span> String lastTime; <span class="comment">// 授权到期日</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ThirdPartyPlatForm&gt; thirdPartyPlatFormList;<span class="comment">// 第三方平台开通状况</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面对象对应的thirdPartyPlatFormList属性的内置对象属性如下</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdPartyPlatForm</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String platName;<span class="comment">// 平台名称</span></span><br><span class="line"><span class="keyword">private</span> String phone;<span class="comment">// 手机号</span></span><br><span class="line"><span class="keyword">private</span> String url;<span class="comment">// 主页链接</span></span><br><span class="line"><span class="keyword">private</span> Integer status;<span class="comment">// 登陆状态</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上面的情况，在结果集映射的时候，如果是在xml文件里面写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如下为resultMap指定映射结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;org_resultMap&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;com.guwukeji.varyscommon.form.response.user.MCNAccountSimpleForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mcnID&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;td_mcn_num&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;ap_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;publicName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_publicnum&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;wechatNum&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_wechatnum&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;number121&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;us_username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mediaTypeName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;mt_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;lastTime&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_expire_time&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;thirdPartyPlatFormList&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;id&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;platName&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;phone&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;td_tel_num&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;url&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_logo_url&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;status&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;td_loginstate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>—以上为原来的mapper文件的写法，到了注解版，大同小异，下面来做演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;SELECT b.td_mcn_num, c.ap_name,a.og_publicnum, a.og_wechatnum, f.us_username, d.mt_name, &quot;</span></span><br><span class="line"><span class="meta">+ &quot;a.og_expire_time, e.tp_logo_url,e.tp_id, e.tp_name,b.td_tel_num, b.td_loginstate &quot; + </span></span><br><span class="line"><span class="meta">&quot;FROM tbl_varys_m_thirdplatinfo b,tbl_varys_m_organization a, tbl_varys_m_user f, &quot;</span></span><br><span class="line"><span class="meta">+ &quot;tbl_varys_d_area_province c, tbl_varys_d_media_type d,tbl_varys_d_third_plat e &quot; + </span></span><br><span class="line"><span class="meta">&quot;WHERE b.td_orgid_fk = a.og_id AND b.td_mdid_fk = d.mt_id AND a.og_arid_province = c.ap_id &quot;</span></span><br><span class="line"><span class="meta">+ &quot;AND b.td_platid_fk = e.tp_id AND b.td_usid_fk = f.us_uuid&quot;,</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mcnID&quot;, column = &quot;td_mcn_num&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;provinceName&quot;, column = &quot;ap_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;publicName&quot;, column = &quot;og_publicnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;wechatNum&quot;, column = &quot;og_wechatnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;number121&quot;, column = &quot;us_username&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mediaTypeName&quot;, column = &quot;mt_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;lastTime&quot;, column = &quot;og_expire_time&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property= &quot;thirdPartyPlatFormList&quot;, column= &quot;param&quot;,many=@Many(select=&quot;com.guwukeji.varysucenter.dao.UserDao.selectThirdPlat&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">List&lt;MCNAccountSimpleForm&gt; <span class="title function_">selectOrganizationList</span><span class="params">(SearchMCNListForm condition)</span>;</span><br></pre></td></tr></table></figure><p>上述的@Many注解替代的就是”&lt;collection&gt;”标签，注解里面的属性select的值另一个方法的返回的结果集所封装成的集合对象（即thirdPartyPlatFormList），需要注意的是@Many注解所在的@Result注解中的column属性里面填写的值是另一个子查询接口方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;....&quot;,//由于此处的sql并非重点，且在当前项目中本人也并没有使用此方法，所以就忽略不写</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;id&quot;, column = &quot;tp_id&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;platName&quot;, column = &quot;tp_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;phone&quot;, column = &quot;td_tel_num&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;url&quot;, column = &quot;tp_logo_url&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;status&quot;, column = &quot;td_loginstate&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">List&lt;ThirdPartyPlatForm&gt; <span class="title function_">selectThirdPlat</span><span class="params">(String param)</span>;</span><br></pre></td></tr></table></figure><p>综上：可以看出，使用注解版映射对象里面的集合属性相当于走了两次查询，而且在mybatis的官方文档中也指出了，<em><strong>（@Many与@One注解）的联合映射在注解 API中是不支持的</strong></em>，所以本人亲身体验注解版之后只想说，还是mapper文件好，且本人在实验中并没有成功，感觉也没有再次实验下去的必要，希望之后的注解版可以再次加强</p><h2 id="2）association（对象内涵单个自定义引用类型对象）"><a href="#2）association（对象内涵单个自定义引用类型对象）" class="headerlink" title="2）association（对象内涵单个自定义引用类型对象）"></a>2）association（对象内涵单个自定义引用类型对象）</h2><p>将上面的MCNAccountSimpleForm对象的属性换成单个ThirdPartyPlatForm对象，其他不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回的对象如下</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MCNAccountSimpleForm</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String mcnID;<span class="comment">//mcnNum</span></span><br><span class="line"><span class="keyword">private</span> String provinceName;<span class="comment">// 省份名称</span></span><br><span class="line"><span class="keyword">private</span> String publicName; <span class="comment">// 公众号名称</span></span><br><span class="line"><span class="keyword">private</span> String wechatNum; <span class="comment">// 微信号</span></span><br><span class="line"><span class="keyword">private</span> String number121; <span class="comment">// 121账号</span></span><br><span class="line"><span class="keyword">private</span> String mediaTypeName; <span class="comment">// 媒体类型</span></span><br><span class="line"><span class="keyword">private</span> String lastTime; <span class="comment">// 授权到期日</span></span><br><span class="line"><span class="keyword">private</span> ThirdPartyPlatForm thirdPartyPlatFormList;<span class="comment">// 第三方平台开通状况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如下为resultMap指定映射结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;org_resultMap&quot;</span><span class="attr">type</span>=<span class="string">&quot;com.guwukeji.varyscommon.form.response.user.MCNAccountSimpleForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mcnID&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;td_mcn_num&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;ap_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;publicName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_publicnum&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;wechatNum&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_wechatnum&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;number121&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;us_username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mediaTypeName&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;mt_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;lastTime&quot;</span> , <span class="attr">column</span>=<span class="string">&quot;og_expire_time&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;thirdPartyPlatFormList&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;id&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;platName&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;phone&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;td_tel_num&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;url&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;tp_logo_url&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">&quot;status&quot;</span>, <span class="attr">column</span> = <span class="string">&quot;td_loginstate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至于但对象内的属性是自定义的引用类型，无非就是将注解@Many换成了@One</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;SELECT b.td_mcn_num, c.ap_name,a.og_publicnum, a.og_wechatnum, f.us_username, d.mt_name, &quot;</span></span><br><span class="line"><span class="meta">+ &quot;a.og_expire_time, e.tp_logo_url,e.tp_id, e.tp_name,b.td_tel_num, b.td_loginstate &quot; + </span></span><br><span class="line"><span class="meta">&quot;FROM tbl_varys_m_thirdplatinfo b,tbl_varys_m_organization a, tbl_varys_m_user f, &quot;</span></span><br><span class="line"><span class="meta">+ &quot;tbl_varys_d_area_province c, tbl_varys_d_media_type d,tbl_varys_d_third_plat e &quot; + </span></span><br><span class="line"><span class="meta">&quot;WHERE b.td_orgid_fk = a.og_id AND b.td_mdid_fk = d.mt_id AND a.og_arid_province = c.ap_id &quot;</span></span><br><span class="line"><span class="meta">+ &quot;AND b.td_platid_fk = e.tp_id AND b.td_usid_fk = f.us_uuid&quot;,</span></span><br><span class="line"><span class="meta">         &quot;&lt;/script&gt;&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mcnID&quot;, column = &quot;td_mcn_num&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;provinceName&quot;, column = &quot;ap_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;publicName&quot;, column = &quot;og_publicnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;wechatNum&quot;, column = &quot;og_wechatnum&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;number121&quot;, column = &quot;us_username&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;mediaTypeName&quot;, column = &quot;mt_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;lastTime&quot;, column = &quot;og_expire_time&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property= &quot;thirdPartyPlatFormList&quot;, column= &quot;&quot;,</span></span><br><span class="line"><span class="meta"> //将注解@Many换成了@One           </span></span><br><span class="line"><span class="meta">            one=@One(select=&quot;com.guwukeji.varysucenter.dao.UserDao.selectThirdPlat&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">List&lt;MCNAccountSimpleForm&gt; <span class="title function_">selectOrganizationList</span><span class="params">(SearchMCNListForm condition)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;....&quot;,//由于此处的sql并非重点，且在当前项目中本人也并没有使用此方法，所以就忽略不写</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;id&quot;, column = &quot;tp_id&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;platName&quot;, column = &quot;tp_name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;phone&quot;, column = &quot;td_tel_num&quot;), </span></span><br><span class="line"><span class="meta">    @Result(property = &quot;url&quot;, column = &quot;tp_logo_url&quot;),</span></span><br><span class="line"><span class="meta">    @Result(property = &quot;status&quot;, column = &quot;td_loginstate&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="comment">//此处返回的是一个对象，不再是集合</span></span><br><span class="line">ThirdPartyPlatForm <span class="title function_">selectThirdPlat</span><span class="params">(String param)</span>;</span><br></pre></td></tr></table></figure><p>写在后面：<em><strong>最近做的一个子模块用户中心，一时心血来潮，想尝试不写mapper文件了，而用完注解版之后只想说，。。。。，好了大家还是用mapper文件吧，如果简单的sql可以用注解来实现，复杂的尤其是映射的对象比较复杂的，还是老老实实在mapper文件里面写吧</strong></em></p><p>最后跟搭建推荐一本感觉还不错的书<em>刘增辉</em>编著的《Mybatis从入门到精通》，下面是本人百度网盘分享链接</p><p><a href="https://pan.baidu.com/s/1zOhaDl7Ef2Pj640gD5pkUQ">点击这里</a>  提取码：if38 </p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="1、动态sql不支持单引号"><a href="#1、动态sql不支持单引号" class="headerlink" title="1、动态sql不支持单引号"></a>1、动态sql不支持单引号</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;SELECT mnh.mnh_mcn_num, mf.mf_name, mt.mt_name, ma.ma_name, mnh.mnh_plat_name, mnh.mnh_content&quot;,</span></span><br><span class="line"><span class="meta">&quot;FROM ( SELECT * FROM tbl_varys_m_mcnnotification_h h &lt;where&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;mcnNum != null and mcnNum != \&#x27;\&#x27; &#x27;&gt;h.mnh_mcn_num = #&#123;mcnNum&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;belongDate != null&#x27;&gt; AND h.mnh_belong_date = #&#123;belongDate&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;platId != null &#x27;&gt;AND h.mnh_platid_fk = #&#123;platId&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;content != null and content != \&#x27;\&#x27; &#x27;&gt;AND h.mnh_content LIKE concat(&#x27;%&#x27;,#&#123;content&#125;,&#x27;%&#x27;) &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;/where&gt;) mnh&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_m_mcninfo mf ON mf.mf_mcnid = mnh.mnh_mcn_num&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_m_organization og ON og.og_id = mf.mf_orgid_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_d_media_attr ma ON ma.ma_id = og.og_mediaattr_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_d_media_type mt ON mt.mt_id = mf.mf_mtlx_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;mediaTypeId != null &#x27;&gt; AND mf.mf_id = #&#123;mediaTypeId&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;limit #&#123;startIndex&#125; , #&#123;pageSize&#125;&quot;,&quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>启动报错:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">12</span>-<span class="number">10</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">43.366</span> ERROR <span class="number">11148</span> --- [           main] o.m.spring.mapper.MapperFactoryBean      : Error <span class="keyword">while</span> adding the mapper <span class="string">&#x27;interface com.guwukeji.varysstat.dao.MCNPlatNotificDao&#x27;</span> to configuration.</span><br><span class="line"></span><br><span class="line">org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: <span class="number">1</span>; columnNumber: <span class="number">208</span>; 元素类型 <span class="string">&quot;if&quot;</span> 必须后跟属性规范 <span class="string">&quot;&gt;&quot;</span> 或 <span class="string">&quot;/&gt;&quot;</span>。</span><br></pre></td></tr></table></figure><p>修改之后：（**将\‘\‘ 修改成\“\“**）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;SELECT mnh.mnh_mcn_num, mf.mf_name, mt.mt_name, ma.ma_name, mnh.mnh_plat_name, mnh.mnh_content&quot;,</span></span><br><span class="line"><span class="meta">&quot;FROM ( SELECT * FROM tbl_varys_m_mcnnotification_h h &lt;where&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;mcnNum != null and mcnNum != \&quot;\&quot; &#x27;&gt;h.mnh_mcn_num = #&#123;mcnNum&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;belongDate != null&#x27;&gt; AND h.mnh_belong_date = #&#123;belongDate&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;platId != null &#x27;&gt;AND h.mnh_platid_fk = #&#123;platId&#125; &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;content != null and content != \&quot;\&quot; &#x27;&gt;AND h.mnh_content LIKE concat(&#x27;%&#x27;,#&#123;content&#125;,&#x27;%&#x27;) &lt;/if&gt;&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;/where&gt;) mnh&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_m_mcninfo mf ON mf.mf_mcnid = mnh.mnh_mcn_num&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_m_organization og ON og.og_id = mf.mf_orgid_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_d_media_attr ma ON ma.ma_id = og.og_mediaattr_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;LEFT JOIN tbl_varys_d_media_type mt ON mt.mt_id = mf.mf_mtlx_fk&quot;, </span></span><br><span class="line"><span class="meta">&quot;&lt;if test = &#x27;mediaTypeId != null &#x27;&gt; AND mf.mf_id = #&#123;mediaTypeId&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">&quot;limit #&#123;startIndex&#125; , #&#123;pageSize&#125;&quot;,&quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>成功启动！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
